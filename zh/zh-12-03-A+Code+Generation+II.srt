0
00:00:04,200 --> 00:00:08,280
This video is a continuation of the previous video where we'll be finishing up
这个视频是上一个视频的延续，我们将在前面的视频中结束

1
00:00:08,280 --> 00:00:12,870
co-generation for the simple language dealing with function calls, function
共同生成处理函数调用、函数

2
00:00:12,870 --> 00:00:19,870
definitions and variable references. So just to remind you what we're working on,
定义和变量引用。所以为了提醒你们我们在做什么，

3
00:00:20,470 --> 00:00:24,099
here is the simple language And again, we have a bunch of different kinds of
这是简单的语言，再一次，我们有一堆不同类型的

4
00:00:24,099 --> 00:00:30,059
expressions And we dealt with all of these last time except for variable references
表达式，上一次我们讨论了除变量引用之外的所有这些表达式

5
00:00:30,059 --> 00:00:34,500
and function calls And of course, we also have function definitions. So, as I said
和函数调用，当然，我们也有函数定义。所以，就像我说的

6
00:00:34,500 --> 00:00:38,080
in the introduction these are the three constructs we'll be looking at in this
在引言中，这些是我们将在本示例中查看的三个结构

7
00:00:38,080 --> 00:00:44,700
video. >> The main issue in designing the co-generation for function calls and
录像带。>>设计函数调用和函数调用联合生成的主要问题

8
00:00:44,700 --> 00:00:49,500
function definitions is that both of these will depend intimately on the layout of
函数定义是，这两者都将密切依赖于

9
00:00:49,500 --> 00:00:53,150
the activation record. So really, co-generation for function calls,
激活记录。所以真的，函数调用的联合生成，

10
00:00:53,150 --> 00:00:56,780
co-generation for function definitions and the layout of the activation record all
函数定义和激活记录布局的联合生成

11
00:00:56,780 --> 00:01:02,110
need to be designed together. Now for this particular language, a very simple
需要一起设计。现在对于这种特殊的语言，一个非常简单的

12
00:01:02,110 --> 00:01:06,619
activation record will be sufficient. Because we are using a stack machine, we
激活记录就足够了。因为我们使用的是堆叠机，所以我们

13
00:01:06,619 --> 00:01:11,399
are modeling a stack machine in our code generation. The results of a function call
在我们的代码生成中对堆栈机器进行建模。函数调用的结果

14
00:01:11,399 --> 00:01:14,560
will always be in the accumulator and that means there is no need to store the
将始终位于累加器中，这意味着不需要存储

15
00:01:14,560 --> 00:01:18,749
results of the function call in the activation record And furthermore, the
激活记录中函数调用的结果，而且

16
00:01:18,749 --> 00:01:22,299
activation record will hold the actual parameters. So when we go to computer
激活记录将保存实际参数。所以当我们去电脑的时候

17
00:01:22,299 --> 00:01:27,520
function call with arguments X1 through XN, we will push those arguments onto the
带有参数X1到Xn的函数调用，我们将把这些参数推送到

18
00:01:27,520 --> 00:01:30,979
stack And as it happens, these are the only variables in this language that are
堆栈，并且碰巧的是，这是该语言中仅有的变量

19
00:01:30,979 --> 00:01:37,979
no local or global variables other than the arguments to a function call And so
除函数调用的参数外没有局部或全局变量，因此

20
00:01:38,159 --> 00:01:41,909
those are the only variables that will need to be stored in the activation
这些是激活中需要存储的唯一变量

21
00:01:41,909 --> 00:01:47,849
record. Now recall that the stack machine discipline guarantees that the stack
录音。现在回想一下，堆栈机器规则保证堆栈

22
00:01:47,849 --> 00:01:50,829
pointer is preserved across function calls. So the stack pointer will be
指针在函数调用之间保留。因此堆栈指针将为

23
00:01:50,829 --> 00:01:54,279
exactly the same when we exit from a function call, as it was when we entered
当我们从函数调用中退出时，与我们进入函数调用时完全相同

24
00:01:54,279 --> 00:01:58,459
the function call And this means we won't need a control link in our activation
函数调用，这意味着我们在激活时不需要控制链接

25
00:01:58,459 --> 00:02:03,319
record. The point of a control link is to help us find the previous activat ion, and
录音。控制链接的目的是帮助我们找到之前的激活项，并且

26
00:02:03,319 --> 00:02:07,229
since, the stack pointer is preserved, it will have no trouble finding it when we
因为堆栈指针是保留的，所以当我们执行以下操作时，它将毫不费力地找到它

27
00:02:07,229 --> 00:02:11,039
return from our function call, and we'll never need to look at another activation
从我们的函数调用返回，我们再也不需要查看另一个激活

28
00:02:11,038 --> 00:02:17,120
during a function call since there are no non-local variables in the language. We
在函数调用期间，因为语言中没有非局部变量。我们

29
00:02:17,120 --> 00:02:20,470
will however need the return address and that will need to be stored somewhere in
但是，需要返回地址，并且该地址需要存储在

30
00:02:20,470 --> 00:02:26,079
the activation record And, one more thing. It turns out that a pointer to the current
激活记录，还有一件事。事实证明，指向当前

31
00:02:26,079 --> 00:02:29,989
activation will be useful. Now this is to the current activation, not to the
激活会很有用。这是针对当前激活的，而不是针对

32
00:02:29,989 --> 00:02:36,480
previous activation And this pointer will live in the register, FP, which stands for
上一次激活，该指针将位于寄存器fp中，该寄存器表示

33
00:02:36,480 --> 00:02:40,450
Frame Pointer. This is a conventional, this is a, this is the register name on
帧指针。这是一种常规，这是一种，这是寄存器上的名称

34
00:02:40,450 --> 00:02:44,810
the MIPS and the name is chosen, to denote the frame pointer And by
选择MIPS和名称来表示帧指针，并通过

35
00:02:44,810 --> 00:02:48,709
convention, the compilers put the frame pointer there. What the frame pointer is
按照惯例，编译器将帧指针放在那里。帧指针是什么

36
00:02:48,709 --> 00:02:52,159
good for, well it points to the current frame, so that's what the name comes from.
好的，它指向当前帧，这就是这个名字的由来。

37
00:02:52,159 --> 00:02:58,379
But, what it's good for, we'll see in a few minutes. Right so to summarize for
但是，它有什么好处，我们几分钟后再看。对，所以总结一下

38
00:02:58,379 --> 00:03:02,799
this language an activation record that has the caller's frame pointer, The actual
此语言是一个激活记录，它具有调用方的帧指针、实际的

39
00:03:02,799 --> 00:03:07,469
parameters and the return address will be sufficient. So let's consider a call to
参数和返回地址就足够了。那么让我们考虑一个电话，

40
00:03:07,469 --> 00:03:12,510
the function F and has two arguments X and Y. Then at the time the call is performed
函数F和有两个参数X和Y。然后在执行调用时

41
00:03:12,510 --> 00:03:17,379
before we start executing the body of the function this is what the activation
在我们开始执行函数体之前，这是激活

42
00:03:17,379 --> 00:03:21,400
record will look like, So we'll have the old frame pointer. So this is the frame
记录将如下所示，因此我们将使用旧的帧指针。所以这就是框架

43
00:03:21,400 --> 00:03:25,739
pointer that points to the caller's frame. Not to the frame of the function that
指向调用方框架的指针。而不是指向函数的框架，该函数

44
00:03:25,739 --> 00:03:29,439
we're executing And the reason that it does that is that we have to save it
我们在执行，之所以这样做，是因为我们必须保存它

45
00:03:29,439 --> 00:03:32,709
somewhere because the frame pointer register will be overwritten with the
因为帧指针寄存器将被

46
00:03:32,709 --> 00:03:37,400
frame pointer for the current activation so we have to save the old one, so that we
当前激活的帧指针，因此我们必须保存旧的，这样我们

47
00:03:37,400 --> 00:03:42,780
can restart the caller when we return to it, from the current function. And then
当我们从当前函数返回调用方时，可以重新启动调用方。然后

48
00:03:42,780 --> 00:03:45,859
there the arguments of the function and those that are pushed on the stack in
这里有函数的参数和在堆栈中压入的参数

49
00:03:45,859 --> 00:03:50,430
reverse order. So the last argument is pushed on first and the first argument is
颠倒顺序。因此，最后一个参数首先被推入，第一个参数是

50
00:03:50,430 --> 00:03:53,700
at the top of the stack And the reason for doing it this way is it'll make the
堆栈的顶部，这样做的原因是它将使

51
00:03:53,700 --> 00:03:59,749
indexing to find the a rguments a little bit easier. A little bit simpler And then
建立索引，以便更容易地找到目标。稍微简单一点，然后

52
00:03:59,749 --> 00:04:03,340
We have the stack pointer so there's a, there's nothing here. What will go here is
我们有堆栈指针，所以这里没有任何东西。这里要讲的是

53
00:04:03,340 --> 00:04:08,310
the callee, the function that we're calling, will push on the return address.
被调用者，也就是我们正在调用的函数，将推送返回地址。

54
00:04:08,310 --> 00:04:13,299
So this is where the return address will go And these elements, the callers frame
这就是返回地址将要到达的位置，而这些元素，即调用者帧

55
00:04:13,299 --> 00:04:18,510
pointer, the arguments to the function and the return address of the call function
指针、函数的参数和调用函数的返回地址

56
00:04:18,510 --> 00:04:25,510
will make up the activation record of F. A bit of terminology, the calling sequence
将组成F.的激活记录。一些术语，调用顺序

57
00:04:27,190 --> 00:04:31,670
is the sequence of instructions that both the caller and callee to set up a function
是调用方和被调用方设置函数的指令序列

58
00:04:31,670 --> 00:04:37,350
invocation, okay? So that's referred to in compiler lingo as the calling sequence And
召唤，好吗？因此，这在编译器行话中称为调用序列，

59
00:04:37,350 --> 00:04:42,850
we're going to need a new instruction to show the calling sequence for this for,
我们需要一个新的指令来显示的调用序列，

60
00:04:42,850 --> 00:04:47,220
for function calls. And that will be the jump and link instruction. So jump and
用于函数调用。这就是跳转和链接指令。所以跳起来吧

61
00:04:47,220 --> 00:04:52,250
link what it does is it jumps to the label that it's given as an argument And it
链接它所做的是跳转到它作为参数给出的标签，并且它

62
00:04:52,250 --> 00:04:56,380
saves the address of the next instruction after the jump in link, in the register
将跳转链接之后的下一条指令的地址保存在寄存器中

63
00:04:56,380 --> 00:05:01,740
R.A. Which stands for, return address. So, what would happen in the jump in link
R.A.代表回邮地址。那么，在跳转链接中会发生什么呢？

64
00:05:01,740 --> 00:05:05,700
instructions, if I have jump in link to label L And then there's an add
说明，如果我跳转到标签L的链接，然后有一个添加

65
00:05:05,700 --> 00:05:09,270
instruction that comes next. I don't know what it is. It's the address of this
接下来是指令。我不知道这是什么。这是这个的地址

66
00:05:09,270 --> 00:05:13,940
instruction, the one after the jump in the link that will be stored in the ret-, in
指令，将存储在ret-，in中的链接跳转后的指令

67
00:05:13,940 --> 00:05:18,920
the, in the register RA. So this instruction will jump to L. It will store
在登记册RA中。所以这条指令将跳转到L。它将存储

68
00:05:18,920 --> 00:05:24,100
the address of this add instruction in RAb And it will execute whatever code is at L.
该ADD指令在RAB中的地址，它将执行位于L的任何代码。

69
00:05:24,100 --> 00:05:28,960
And then the code that's at L can execute a jump back to the address in here to
然后L处的代码可以跳回这里的地址

70
00:05:28,960 --> 00:05:35,960
execute the return, to the caller. So now we're ready to actually generate code for
执行对调用者的返回。现在，我们已经准备好实际为以下项生成代码

71
00:05:36,840 --> 00:05:42,630
a function call expression. So let's say we have the call, F of E1 To EN Where of
函数调用表达式。假设我们有E1的F到EN的呼叫

72
00:05:42,630 --> 00:05:46,830
course E1 through EN are expressions. And let me change colors here. So these are
课程E1到EN都是表达式。让我在这里换一下颜色。那么这些是

73
00:05:46,830 --> 00:05:52,310
expressions, here, not values. So how are we going to do that? >> Well, the first
这里是表达式，而不是值。那么我们要怎么做呢？>>好的，第一个

74
00:05:52,310 --> 00:05:55,590
thing we're going to do is we're going to start building, the activation record And
我们要做的是开始建立激活记录，

75
00:05:55,590 --> 00:05:59,780
so we save the current frame pointer. This is the frame pointer for the collar. >>
所以我们保存当前帧指针。这是衣领的帧指针。>>

76
00:05:59,780 --> 00:06:04,210
Okay. >> This is pointing to th e collars frame. >> Right >> And we store that at
好吧。>>这是指向衣领框架的。>>对>>我们将其存储在

77
00:06:04,210 --> 00:06:10,620
the stack pointer. We have to bump the stack pointer. And then we generate code
堆栈指针。我们必须撞击堆栈指针。然后我们生成代码

78
00:06:10,620 --> 00:06:17,330
for the last argument, for EN, right? And so that code gets inserted here And then
最后一个论点，嗯，对吗？所以代码会被插入到这里，然后

79
00:06:17,330 --> 00:06:20,620
we push it on the stack. So we store the results of EN which will be in the
我们将其推送到堆栈上。所以我们将en的结果存储在

80
00:06:20,620 --> 00:06:27,270
accumulator A0 on the stack and then we, bump the stack pointer. Alright, and we'll
堆栈上的累加器A0，然后我们，撞击堆栈指针。好的，我们会

81
00:06:27,270 --> 00:06:32,770
do that for all the arguments finishing up with E-1. So, we generate code for E-1 and
对所有以E-1结尾的论点都这样做。因此，我们为E-1生成代码，

82
00:06:32,770 --> 00:06:39,340
we push it onto the stack. So, now all the arguments are on the stack and now we just
我们把它推到堆栈上。所以，现在所有参数都在堆栈上，现在我们只需

83
00:06:39,340 --> 00:06:43,340
do the jump in link. So, we've done as much of the work or much of the calling
跳入链接。所以，我们已经完成了尽可能多的工作或召唤

84
00:06:43,340 --> 00:06:48,030
sequence as we can do on the caller's side. So, this code is executing in the
序列，就像我们在呼叫方那一侧所能做的那样。因此，此代码在

85
00:06:48,030 --> 00:06:55,030
function in the caller. Okay, so this is the caller side of the calling sequence,
函数在调用方中执行。好的，这是呼叫序列的呼叫方，

86
00:06:55,860 --> 00:06:59,420
and it builds up as much of the activation record as it can. In particular it's
它会尽可能多地建立激活记录。尤其是它

87
00:06:59,420 --> 00:07:03,350
evaluating the actual parameters and pushing them on to the stack to form part
评估实际参数并将其推送到堆栈上以形成部件

88
00:07:03,350 --> 00:07:07,500
of the activation record, for the called function, and then we do the jump and
被调用函数的激活记录，然后我们进行跳转并

89
00:07:07,500 --> 00:07:11,690
link. And we jump to the entry point of the function that we're calling. So we're,
链接。我们跳到正在调用的函数的入口点。所以我们是，

90
00:07:11,690 --> 00:07:18,640
this is a call to, to F, and so we jump to F's entry point. So a few more things to
这是对F的调用，所以我们跳到F的入口点。所以还有几件事要做

91
00:07:18,640 --> 00:07:23,550
note, First of all, as we discussed on the previous slide When we execute the jump in
请注意，首先，正如我们在上一张幻灯片中讨论的那样，当我们在

92
00:07:23,550 --> 00:07:28,270
link instruction that is going to save the return address in the register RA And that
将把返回地址保存在寄存器RA中的链接指令

93
00:07:28,270 --> 00:07:32,830
address will be this address here, the one that comes after the, the address of the
地址将是这里的这个地址，在，地址后面的那个地址

94
00:07:32,830 --> 00:07:37,520
next instruction, after the jump in link instruction And you'll notice also that
下一条指令，在跳转到链接指令之后，您还会注意到

95
00:07:37,520 --> 00:07:43,210
the activation record we've built so far is four times N plus four bytes. So this
到目前为止，我们构建的激活记录是4乘以N加上4个字节。所以这件事

96
00:07:43,210 --> 00:07:46,680
is where N here is the number of arguments. Each argument takes up four
这里的N是参数的数量。每个论点占四个

97
00:07:46,680 --> 00:07:51,960
bytes, and then four bytes for the old frame pointer. Now we're ready to talk
字节，然后四个字节用于旧帧指针。现在我们准备好谈谈了

98
00:07:51,960 --> 00:07:55,170
about the callee side of the calling sequence And we're going to need one new
关于调用序列的被呼叫方，我们需要一个新的

99
00:07:55,170 --> 00:07:59,880
instruction for that. The JR instruction stands for jump register. And it just
这方面的说明。JR指令代表跳转寄存器。而且它只是

100
00:07:59,880 --> 00:08:05,810
jumps to the address in its register argument. So now, the callee side is the
跳转到其寄存器参数中的地址。所以现在，被调用方是

101
00:08:05,810 --> 00:08:10,640
code for the function definition, okay? So this is the co de that actually executes
函数定义的代码，好吗？这就是实际执行的code

102
00:08:10,640 --> 00:08:15,470
the body of the function. And how do we generate code for that? Well let's take a
函数的主体。我们如何为此生成代码呢？好的，让我们拿一张

103
00:08:15,470 --> 00:08:20,430
look. Now actually the very first thing that should be here is that this first
看。现在，实际上首先应该在这里的是，这是第一个

104
00:08:20,430 --> 00:08:25,500
instruction of the call side is the entry point. So, we're missing the label
呼叫侧的指令是入口点。所以，我们找不到标签了

105
00:08:25,500 --> 00:08:30,930
here So this would be labeled F entry. Okay So this is the target of the jump in
这里，所以这将被标记为F条目。好的，这就是跳跃的目标

106
00:08:30,930 --> 00:08:35,529
link instruction. And then the very first thing we do is we set up the frame
链接说明。然后我们要做的第一件事就是架设好框架

107
00:08:35,529 --> 00:08:39,539
pointer. So we copy the current value of the stack pointer into the frame pointer.
指针。因此，我们将堆栈指针的当前值复制到帧指针中。

108
00:08:39,539 --> 00:08:44,080
That sets, that points to the end of the frame for the call-ee, for the new
该设置指向被呼叫方的帧的末尾，用于新的

109
00:08:44,080 --> 00:08:49,200
function that's being executed. We also save the return address at the current
正在执行的函数。我们还将寄信人地址保存在当前

110
00:08:49,200 --> 00:08:52,680
position on the stacks. Remember there was one more thing to do one thing one thing
放置在堆栈上。记住还有一件事要做一件事一件事

111
00:08:52,680 --> 00:08:55,740
that was missing. On the caller side on the caller side of the sequences which is
那东西不见了。在序列的呼叫方一侧的呼叫方一侧

112
00:08:55,740 --> 00:08:59,590
the return address. We don't know the return address until after the jumping
寄信人地址。我们直到跳跃之后才知道回信地址

113
00:08:59,590 --> 00:09:05,400
link instructions executes And so the callee is the one that has to save that
执行链接指令，因此被调用方必须保存该链接

114
00:09:05,400 --> 00:09:10,890
value. Okay so after the jumping link the RA register contains the return address
价值。好的，那么在跳转链接之后，RA寄存器包含返回地址

115
00:09:10,890 --> 00:09:17,230
and that we save it into the frame. All right, and then we push the stack pointer.
我们把它保存到相框里。好的，然后我们按下堆栈指针。

116
00:09:17,230 --> 00:09:22,010
'Kay. And now we just generate code for the body of the function. So now the, at
‘好的。现在我们只为函数体生成代码。

117
00:09:22,010 --> 00:09:26,330
this point the activation record is completely set up, and now we can just
这一点激活记录已经完全设置好了，现在我们只需

118
00:09:26,330 --> 00:09:30,080
generate code for the function body. And after the function body executes, of
为函数体生成代码。在函数体执行之后，

119
00:09:30,080 --> 00:09:35,830
course, the stack pointer will be preserved, and, and that means that the
当然，堆栈指针将被保留，这意味着

120
00:09:35,830 --> 00:09:40,780
return address will be at four offset from the stack pointer, so we can load the
返回地址将位于堆栈指针的四个偏移量，因此我们可以加载

121
00:09:40,780 --> 00:09:46,940
return address back into the return address register And then we can pop the
将地址返回到返回地址寄存器，然后我们可以弹出

122
00:09:46,940 --> 00:09:51,530
stack So here we're going to pop off The current frame from the stack And that's
堆栈，所以这里我们将从堆栈中弹出当前帧，这是

123
00:09:51,530 --> 00:09:56,870
going to be song size, z. Which we I haven't shown you what it is yet But,
将会是歌曲的大小，z。我们还没有给你们展示它是什么，但是，

124
00:09:56,870 --> 00:10:00,690
we'll calculate The size of z in just a minute? This is going to be an immediate
我们马上就能计算出z的大小？这将是一个即刻的

125
00:10:00,690 --> 00:10:06,090
value. So it's a constant that we plug in there And then we load the old frame
价值。所以这是一个常数，我们把它插进去，然后加载旧的框架

126
00:10:06,090 --> 00:10:11,730
pointer. Okay So once we've incremented the stacks we popped off the existing
指针。好的，一旦我们增加了堆栈，我们就会弹出现有的

127
00:10:11,730 --> 00:10:17,310
frame, and so now we're pointing at the frame pointer at the first we're, we're,
帧，所以现在我们指向帧指针，在第一个我们，我们是，

128
00:10:17,310 --> 00:10:21,500
we're pointing at the first thing beyond the previous stack frame, and, what was
我们指的是前一个堆栈帧之外的第一件事，

129
00:10:21,500 --> 00:10:25,370
that, well, that was the first thing that we saved in the stack frame for F, and
这是我们在堆栈框架中为F保存的第一件事，

130
00:10:25,370 --> 00:10:29,330
that's the old frame pointer. So now we restore the old frame pointer so that the
那是旧的帧指针。因此，现在我们恢复旧的帧指针，以便

131
00:10:29,330 --> 00:10:34,279
call, the function that called us, we'll have its frame pointer back, and then now
调用，调用我们的函数，我们会找回它的帧指针，然后现在

132
00:10:34,279 --> 00:10:39,880
we're ready to return it resume execution of the calling function. We just do that
我们已经准备好返回它，继续执行调用函数。我们就这么做

133
00:10:39,880 --> 00:10:46,670
by a jump register to the return address, All right? So note here that the frame
通过跳转寄存器转到返回地址，好吗？请注意，这里的框架

134
00:10:46,670 --> 00:10:50,250
pointer points to the top of the frame, not the bottom of the frame. Okay? So that
指针指向框架的顶部，而不是框架的底部。好吧?所以

135
00:10:50,250 --> 00:10:52,940
will actually be important when we talk about how we use the frame pointer When we
在我们讨论如何使用帧指针时，

136
00:10:52,940 --> 00:10:59,620
get to talking about the variable references next And the callee pops the
接下来开始讨论变量引用，被调用者弹出

137
00:10:59,620 --> 00:11:03,090
return address, The actual arguments in the saved value of the frame pointer from
返回地址，帧指针的保存值中的实际参数来自

138
00:11:03,090 --> 00:11:06,170
the stacks. So the callee pops off the entire activation record, and also
堆栈。因此被呼叫者弹出整个激活记录，并且

139
00:11:06,170 --> 00:11:12,700
restores the caller's frame pointer And what's the value of Z? Well, there are N
恢复调用者的帧指针以及Z的值是多少？嗯，有N个

140
00:11:12,700 --> 00:11:16,050
arguments. Each of which take up four bytes So there's at, so the size of the
争论。每个都占用4个字节，所以在，所以

141
00:11:16,050 --> 00:11:20,730
activation record is four times N. Plus, there are two other values. In the
激活记录是N的四倍，另外还有两个值。在

142
00:11:20,730 --> 00:11:27,190
activation record One is the return address. And the other one is the old
激活记录一是返回地址。另一个是老的

143
00:11:27,190 --> 00:11:32,480
frame pointer. Okay and the space for two more words is eight bytes. So that's the
帧指针。好的，另外两个字的空间是八个字节。所以这就是

144
00:11:32,480 --> 00:11:35,810
size of the activation record. So that's how much we have to add to the stack
激活记录的大小。这就是我们要添加到堆栈中的数量

145
00:11:35,810 --> 00:11:42,160
pointer to pop the activation record for F off the stack. Just to give you a sketch
将F的激活记录从堆栈中弹出的指针。只是想给你一张素描

146
00:11:42,160 --> 00:11:47,570
of, what this looks like before the call. We have the frame pointer for the caller,
在电话之前这是什么样子。我们有调用者的帧指针，

147
00:11:47,570 --> 00:11:52,750
and we have the, The current value of the stack pointer And on entry to the
我们有堆栈指针的当前值，并且在进入

148
00:11:52,750 --> 00:11:58,850
function. Okay, after the calling after the calling functions side of the calling
功能。好的，在调用之后，调用函数端的调用

149
00:11:58,850 --> 00:12:01,980
sequence has completed what's on the stack, well, we have the old frame
序列已经完成了堆栈上的内容，那么，我们有了旧的帧

150
00:12:01,980 --> 00:12:05,860
pointer, and the two arguments, and then the stack pointer points to the next
指针和两个参数，然后堆栈指针指向下一个

151
00:12:05,860 --> 00:12:10,500
unused, location. Which is where the return address will go Alright, then we do
未使用的位置。那就是寄信人地址的位置好的，然后我们就

152
00:12:10,500 --> 00:12:14,430
the jump and link. We jump over, and the return address gets pushed on to the
跳跃和链接。我们跳过，然后把寄信人的地址推到

153
00:12:14,430 --> 00:12:19,320
stack, a nd the frame pointer gets moved to point two, the current value of the
堆栈，然后将帧指针移到指针2，即

154
00:12:19,320 --> 00:12:24,400
frame. Okay, you've got to point to the top of the frame. Okay? And then after the
画框。好的，你要指向画面的顶部。好吧?然后在

155
00:12:24,400 --> 00:12:26,890
call, what has happened? Well, we've popped everything off the stack, we've
打电话，发生什么事了？嗯，我们已经把所有东西都从堆栈里拿出来了，我们已经

156
00:12:26,890 --> 00:12:32,089
popped the entire. Your activation record for the call function off of the stack And
把整个都炸飞了。您的调用函数在堆栈之外的激活记录和

157
00:12:32,089 --> 00:12:36,339
so now notice that we're back in the same state. So again, function calls have to
现在请注意，我们又回到了相同的状态。所以再一次，函数调用必须

158
00:12:36,339 --> 00:12:41,279
preserve the invariant that. The stack is preserved across the call so the stack
保持不变量。堆栈在调用期间保留，因此堆栈

159
00:12:41,279 --> 00:12:48,279
should be exactly the same after the call, as it was on entry to the call. So we are
在调用之后应该与进入调用时完全相同。所以我们是

160
00:12:48,320 --> 00:12:51,839
almost done with code generation for simple language. The last construct we
基本完成了简单语言的代码生成。我们的最后一个结构是

161
00:12:51,839 --> 00:12:57,020
need to talk about is how we generate code for variable references. Now the variables
需要讨论的是我们如何为变量引用生成代码。现在这些变量

162
00:12:57,020 --> 00:13:01,970
of a function again are just its arguments just the parameters to the function. There
函数的参数，也就是它的参数，也就是函数的参数。那里

163
00:13:01,970 --> 00:13:05,540
are no other kinds of variables in this simple language And these variables are
在这个简单的语言中没有其他类型的变量，这些变量是

164
00:13:05,540 --> 00:13:09,440
all in the activation record. So we really all we have to do is generate code to look
都在激活记录里。所以我们真正要做的就是生成代码来查看

165
00:13:09,440 --> 00:13:15,070
up a variable in its appropriate place in the activation record But there is one
在激活记录中的适当位置上移一个变量，但有一个变量

166
00:13:15,070 --> 00:13:20,220
problem, and that's that the stack does grow and shrink with intermediate values.
问题，那就是堆栈确实会随着中间值的增加而增大和缩小。

167
00:13:20,220 --> 00:13:25,380
So when you call a function and you begin executing its body values will be popped
因此，当您调用一个函数并开始执行它的体值时，将弹出

168
00:13:25,380 --> 00:13:30,750
and pushed onto the stack beside the activation record. So think back to the
并推送到激活记录旁边的堆栈上。所以回想一下

169
00:13:30,750 --> 00:13:35,450
code generation for plus and minus and if then else intermediate values were being
加号和减号的代码生成，如果是，则中间值为

170
00:13:35,450 --> 00:13:39,360
pushed and popped from the stack And so what this means is that these variables
从堆栈中推入和弹出，这意味着这些变量

171
00:13:39,360 --> 00:13:44,980
that are in the activation record are not at a fixed offset From the stack pointer.
在激活记录中的值与堆栈指针的偏移不是固定的。

172
00:13:44,980 --> 00:13:49,550
So we can't use the stack point very easily to the side or to find those
所以我们不能很容易地使用堆栈指针到一边或找到那些

173
00:13:49,550 --> 00:13:56,550
variables. So the solution is to use the frame pointer. The frame pointer always
变量。因此，解决方案是使用帧指针。帧指针始终

174
00:13:57,149 --> 00:14:01,360
points to the return address in the activation record and because it doesn't
指向激活记录中的返回地址，因为它没有

175
00:14:01,360 --> 00:14:05,230
move during the execution of the function body, we can always find the variables at
MOVE在函数体的执行过程中，我们总是可以在以下位置找到变量

176
00:14:05,230 --> 00:14:09,750
the same place relative to the frame pointer. So, how do we do that? Well,
相对于帧指针的相同位置。那么，我们该怎么做呢？井,

177
00:14:09,750 --> 00:14:15,899
let's consider the i-th argument, X of I and does the i-th argument to
让我们考虑第i个参数，即i的X，并将第i个参数

178
00:14:15,899 --> 00:14:22,000
the, to the function. So where is that going to be relative to the frame pointer?
这个，到这个函数。那么它相对于帧指针的位置是什么呢？

179
00:14:22,000 --> 00:14:27,880
That will be at offset Z from the frame pointer And Z is just four times I. Right,
这将位于距帧指针的偏移量Z处，而Z仅是I的四倍。好的，

180
00:14:27,880 --> 00:14:33,149
and this is actually the reason here for generating for pushing the arguments on
这实际上就是在这里生成推论的原因

181
00:14:33,149 --> 00:14:36,990
the stack in reverse order, starting with the last argument to the function, because
堆栈的顺序相反，从函数的最后一个参数开始，因为

182
00:14:36,990 --> 00:14:40,250
it just makes this index calculation simple. It wouldn't be that much more
它只是使这个指数的计算变得简单。不会再多了

183
00:14:40,250 --> 00:14:44,020
complicated if we pushed the arguments in the other order. It just makes it a little
如果我们把论据推到另一个顺序，情况就复杂了。它只是让它变得有点

184
00:14:44,020 --> 00:14:49,149
easier to see how the indexing works And anyway this index, this offset, is being
更容易看到索引是如何工作的，而且无论如何，这个索引、这个偏移量

185
00:14:49,149 --> 00:14:53,140
calculated at compile time. So, notice that this number, this four times I, is
在编译时计算。所以，请注意这个数字，这四倍于I，是

186
00:14:53,140 --> 00:14:56,300
something that the compiler knows, and what we're putting in the code here is
编译器知道的东西，我们在这里放入的代码是

187
00:14:56,300 --> 00:15:00,190
just a fixed offset. So, we are not actually doing that multiplication at run
只是一个固定的偏移量。因此，我们实际上没有在运行时进行乘法运算

188
00:15:00,190 --> 00:15:05,110
time. See here is just a number, as computed statically by the compiler. So
时间到了。这里只是一个数字，由编译器静态计算。所以

189
00:15:05,110 --> 00:15:12,110
anyway We just load and off send Z which is the four times I where I is the index,
不管怎样，我们只需要加载和关闭Z，它是I的四倍，其中I是索引，

190
00:15:12,120 --> 00:15:18,520
the position of the variable in the list of parameters. At that offset from the
变量在参数列表中的位置。在该偏移量处

191
00:15:18,520 --> 00:15:22,190
frame pointer, that's where XI is stored in the activation record And we just load
帧指针，这是XI存储在激活记录中的位置，我们只需加载

192
00:15:22,190 --> 00:15:26,550
it into the accumulator. So that is the entire code generation for a variable
把它放到蓄电池里。这就是变量的整个代码生成过程

193
00:15:26,550 --> 00:15:33,550
reference. Here's a little example. So for the function, the hypothetical function
参考。这里有一个小例子。所以对于函数，假设函数

194
00:15:34,580 --> 00:15:39,130
that we've been looking at, with two parameters x and y. X is going to be at
这是我们一直在看的，有两个参数x和y，x将在

195
00:15:39,130 --> 00:15:43,399
the frame pointer +four and y will be at the frame pointer +eight.
帧指针+4和y将位于帧指针+8。

