0
00:00:03,970 --> 00:00:07,800
Welcome back, In this video we're going to look at another example of cool
欢迎回来，在这段视频中，我们将看到另一个很酷的例子

1
00:00:07,800 --> 00:00:14,800
programing. This time let's move beyond the simple hello world kind of examples
编程。这一次，让我们超越简单的hello world之类的示例

2
00:00:19,119 --> 00:00:24,400
and on to something more exciting, say, the ever popular factorial function. So,
接下来是一些更令人兴奋的事情，比如说，一直很受欢迎的阶乘函数。所以,

3
00:00:24,400 --> 00:00:29,960
in order to write factorial, we'll need to open a file, which we can write some code.
为了编写阶乘，我们需要打开一个文件，我们可以编写一些代码。

4
00:00:29,960 --> 00:00:36,320
Let me start that. And recall from last time that every cool program has to have a
让我开始吧。回想上一次，每个很酷的程序都必须有一个

5
00:00:36,320 --> 00:00:42,790
main class and the main class is required to have a main method. And we don't care
Main类和Main类需要有Main方法。我们也不在乎

6
00:00:42,790 --> 00:00:46,060
what the main method return, so we'll just have it return something a type object,
Main方法返回什么，所以我们只需要让它返回一个类型对象，

7
00:00:46,060 --> 00:00:53,060
and then we'll just fill in a skeleton here on the file. And, so now we're ready
然后我们就在这份文件上填一份骨架。所以，现在我们准备好了

8
00:00:53,320 --> 00:00:58,360
to write some codes. So what are we going to have the main method do? Well, before
来写一些代码。那么我们要让main方法做什么呢？嗯，在此之前

9
00:00:58,360 --> 00:01:02,090
we can actually write factorially, before we can get to the guts of this program,
在我们到达这个程序的毅力之前，我们实际上可以写成事实，

10
00:01:02,090 --> 00:01:06,360
which is actually not very difficult. We need to talk about IO some more. Because
这其实并不是很难。我们需要更多地讨论IO。因为

11
00:01:06,360 --> 00:01:12,600
we're going to need to be able to, read and write, numbers. We need to be able to
我们需要能够读写数字。我们需要能够

12
00:01:12,600 --> 00:01:16,180
read numbers from, the, the user who's running the program, and print them back
从运行该程序的用户处读取数字，并将其打印回来

13
00:01:16,180 --> 00:01:20,580
out. So let's just review little bit about IO, also. In order to invoke the IO
出去。那么让我们也来回顾一下IO。为了调用IO

14
00:01:20,580 --> 00:01:25,140
functions, we need an IO object. And one of the IO functions is something that
函数，我们需要一个IO对象。IO功能之一是

15
00:01:25,140 --> 00:01:31,090
prints out a string. So let's just, write a program that we already know how to do,
打印出字符串。所以让我们写一个我们已经知道怎么做的程序，

16
00:01:31,090 --> 00:01:37,409
just to confirm that we remember that. And, we can compile this program. And it
只是为了确认我们还记得这一点。而且，我们可以编译这个程序。而且它

17
00:01:37,409 --> 00:01:44,409
should just print one. And, let's see. Indeed it does. Okay? So it prints out the
应该只打印一张。让我们看看。确实如此。好吧?所以它会打印出

18
00:01:46,310 --> 00:01:53,110
number one. And so now, let's come back here and let's talk about how to do input.
一号。现在，让我们回到这里，讨论一下如何进行输入。

19
00:01:53,110 --> 00:01:57,700
So, instead of just printing out the number one, let's print out a strain that
所以，与其只打印出数字1，不如打印出一个

20
00:01:57,700 --> 00:02:01,909
the user types in. So, ins-, in here, we're going to read a strain. And in order
用户键入。所以，INS-，在这里，我们要读一首曲子。按顺序排列

21
00:02:01,909 --> 00:02:07,420
to do that, we need an IO object because there is another function, another method,
为此，我们需要一个IO对象，因为还有另一个函数、另一个方法

22
00:02:07,420 --> 00:02:14,420
called in-strain. Okay. And so this will renew this string. And return to string.
被称为“in-straint”。好吧。所以这会更新这根弦。然后返回到字符串。

23
00:02:15,569 --> 00:02:21,860
And to make sure that we get the nice output let's concatenate on to that string
为了确保我们得到好的输出，让我们连接到该字符串

24
00:02:21,860 --> 00:02:27,209
a new line. So, this is just to. When it prints this string back out it will be
一条新的路线。所以这只是为了。当它将此字符串重新打印出来时，它将

25
00:02:27,209 --> 00:02:34,209
printed on i ts own line. So, let's try compiling this, And steak. It compiles,
印在自己的行上。那么，让我们试着把这个整理一下，然后吃牛排。它会编译，

26
00:02:39,590 --> 00:02:44,620
And now we can run spin. Remember the bang command in UNIX runs the previous command
现在我们可以开始旋转了。请记住，UNIX中的bang命令运行前面的命令

27
00:02:44,620 --> 00:02:48,599
that began with the same letters. And now the program runs and it waits. Cause it's
都是以相同的字母开头的。现在程序运行，它在等待。因为这是

28
00:02:48,599 --> 00:02:53,800
waiting for me to type something. And if I type it type in one it prints back one and
等着我打点什么。如果我把它打进去，它会把它打印回来，然后

29
00:02:53,800 --> 00:03:00,800
if I type in 42 it gives me back 42. And so now The next thing we need to talk
如果我输入42，它会返回42。所以现在我们要谈的下一件事

30
00:03:01,150 --> 00:03:06,020
about is how to convert strings into integers, because if we're going to do a
关于如何将字符串转换为整数，因为如果我们要做一个

31
00:03:06,020 --> 00:03:08,879
factorial, we want to work on integers and not strings. And at the moment we're just
阶乘，我们希望处理整数而不是字符串。而此时此刻我们只是

32
00:03:08,879 --> 00:03:14,629
reading and writing strings. So, there is a library written in cool that does
读写字符串。所以，有一个用Cool编写的库可以

33
00:03:14,629 --> 00:03:19,690
conversion between integers and strings. And we're going to give the main class
整数和字符串之间的转换。我们要给主要班级

34
00:03:19,690 --> 00:03:26,690
here the functionality of that class. Which is called A2I for ASCII to integer.
这里是该类的功能。它被称为A2I，用于将ASCII转换为整数。

35
00:03:28,230 --> 00:03:33,060
And that defines a bunch of methods, that can convert between strings and integers.
这定义了一系列方法，可以在字符串和整数之间进行转换。

36
00:03:33,060 --> 00:03:40,060
So let's add those, commands in here. So here, here's our string. That we've read
那么让我们在这里添加这些命令。所以这里，这是我们的线。我们已经读过了

37
00:03:41,860 --> 00:03:48,860
in. And what we want to do now is to, convert this into an integer. So let me
在……里面。我们现在要做的是，把它转换成一个整数。所以让我

38
00:03:51,610 --> 00:03:57,550
just add a couple of parens here. So there's our string, okay? And now we're
只需在这里添加几个括号即可。所以这就是我们的线，好吗？现在我们是

39
00:03:57,550 --> 00:04:03,650
going to invoke. On that the method I'm sorry we're going to call on that the
我要召唤。关于这个方法，我很抱歉我们要调用

40
00:04:03,650 --> 00:04:10,650
function the method, A to I. Okay? And let's just double check here that we've
函数的方法，从A到I，好吗？让我们再检查一遍我们有没有

41
00:04:11,170 --> 00:04:15,909
got friends in the right place. So that's the argument to A2I. Now, we recall that
在正确的地方交到了朋友。这就是A2I的论点。现在，我们回想起

42
00:04:15,909 --> 00:04:18,849
when we have a dispatch to a method and it's just sitting by itself with not
当我们有一个方法的派单，而它只是自己坐着不管的时候

43
00:04:18,849 --> 00:04:23,970
object, it's dispatched to the self object. And the self object is the object
对象，则将其调度到Self对象。自我客体就是客体

44
00:04:23,970 --> 00:04:28,160
of the current class that we're in. In this case the main object, which has
我们现在所在的班级。在本例中，主对象具有

45
00:04:28,160 --> 00:04:33,660
inherited the A2I methods, And so the A2I functions should be defined in there. Now
继承了A2I方法，所以应该在那里定义A2I函数。现在

46
00:04:33,660 --> 00:04:38,150
we have an integer. And we can do something with that integer if we like.
我们有一个整数。如果我们愿意，我们可以用这个整数做点什么。

47
00:04:38,150 --> 00:04:42,250
So, let's add some more [inaudible] here and let's just say we add just one to the
所以，让我们在这里再加一些[听不见的]，假设我们只加一个到

48
00:04:42,250 --> 00:04:47,580
integer. Okay. And then once we're done with our integer. Whatever operation it is
整数。好吧。然后一旦我们处理完整数。不管是什么手术

49
00:04:47,580 --> 00:04:51,410
that we want to do with the integer we need to convert it back to a string so
我们想要对整数执行此操作，我们需要将其转换回字符串，因此

50
00:04:51,410 --> 00:04:57,160
that we can print it out. An there's an inverse function I2A that will do. So, I
我们可以把它打印出来。有一个反函数i2a就行了。所以，我

51
00:04:57,160 --> 00:05:01,320
don't know if we have all the parens in the right places at this point. So,
我不知道现在我们是否把所有的父母都放在了正确的位置。所以,

52
00:05:01,320 --> 00:05:08,320
let's just check. Yes. That looks like that should work. So this will, read in a
让我们来检查一下。是。看起来这应该行得通。所以这份遗嘱，读一读

53
00:05:08,430 --> 00:05:14,150
string, convert, convert it to an integer, add one to it convert it back to a string,
字符串，转换，转换成整数，加一再转换回字符串，

54
00:05:14,150 --> 00:05:18,810
concatenate on a new line, and print it out. Now let's see if all that actually
连接在新行上，然后将其打印出来。现在让我们看看这一切是否真的

55
00:05:18,810 --> 00:05:23,650
works, so let's run the compiler and we have a problem here. It says that we have
工作，所以让我们运行编译器，我们在这里有一个问题。上面说我们有

56
00:05:23,650 --> 00:05:29,380
an undefined class A to I. And the reason is, we didn't supply the code for A2I. So
一个未定义的A类到I类，原因是，我们没有提供A2I的代码。所以

57
00:05:29,380 --> 00:05:33,690
if we look in our directory here, we'll see I've already copied in the class file
如果我们查看这里的目录，就会发现我已经复制了类文件

58
00:05:33,690 --> 00:05:36,960
for A2I. And I encourage you to go and look at that code. It's actually
给A2I的。我鼓励你们去看看这段代码。它实际上是

59
00:05:36,960 --> 00:05:40,199
interesting code to see how the conversions are written in COOL.
看看转换是如何用Cool编写的很有趣的代码。

60
00:05:40,199 --> 00:05:45,590
But now we need to talk about how to compile a program that uses a library, And
但现在我们需要讨论如何编写使用库的程序，以及

61
00:05:45,590 --> 00:05:50,310
the way you do it is very simple. You just list all the class files on the command
你做这件事的方法很简单。您只需列出命令中的所有类文件

62
00:05:50,310 --> 00:05:53,880
line when you call up the compiler. And it will read them all in and treat them as a
当您调用编译器时，行。它会把它们全部读进去，并把它们当作

63
00:05:53,880 --> 00:06:00,000
single program. So in this case we compile, compile fact together with A2I.
单一程序。所以在这种情况下，我们编译，编译FACT和A2I一起。

64
00:06:00,000 --> 00:06:07,000
And that complies. And then we can run it. [sound]. And now, if I type in three, it
这也符合我们的要求。然后我们就可以运行它了。[声音]。现在，如果我输入三个字，它

65
00:06:07,580 --> 00:06:13,330
prints four. And if I type in one, it prints two. And so the program seems to be
打印了四张。如果我输入一个，它会打印两个。所以这个项目看起来

66
00:06:13,330 --> 00:06:18,460
working. And now we're almost ready to write our factorial function. So what do
在工作。现在我们几乎准备好编写阶乘函数了。那么，我们该怎么做呢？

67
00:06:18,460 --> 00:06:21,900
we want to do in factorial? Well, we want to do something other than just adding
我们想做阶乘吗？嗯，我们想做的不只是添加

68
00:06:21,900 --> 00:06:27,770
one. Instead, we want to call, our special function factorial. So let's insert a call
一。相反，我们希望调用我们的特殊函数factorial。那么让我们插入一个呼叫

69
00:06:27,770 --> 00:06:34,770
to factorial in here. Okay, and let's get rid of the plus one. And then let's check
到这里的阶乘。好的，让我们去掉加在一起的那个。然后让我们检查一下

70
00:06:35,610 --> 00:06:39,850
that we have all the parens that we need. So we need to close off the, the A2I call,
我们有我们需要的所有父母。所以我们需要关闭A2I电话，

71
00:06:39,850 --> 00:06:45,669
the factorial call, The I2A call. And then that last one should be the out string
阶乘调用，i2a调用。然后最后一个应该是输出字符串

72
00:06:45,669 --> 00:06:51,770
call, And it is, Okay. So now we can add a method fact to this class, And fact is
打个电话，就是了，好的。所以现在我们可以向这个类添加一个方法事实，事实是

73
00:06:51,770 --> 00:06:56,819
gonna take an integer argument. So we need a parameter here, And it's type is in
我要接受一个整数参数。所以我们这里需要一个参数，它的类型是

74
00:06:56,819 --> 00:07:03,710
force. And the whole thing is gonna return an integer. And then we have body of our
武力。整个过程会返回一个整数。然后我们就有了我们的身体

75
00:07:03,710 --> 00:07:09,610
function, And probably a good idea here, just to make sure that we got this much
函数，这里可能是个好主意，只是为了确保我们得到这么多

76
00:07:09,610 --> 00:07:13,520
right, to do something simple. So let's just try to make a function that returns
对，做点简单的事。所以让我们试着创建一个函数，该函数返回

77
00:07:13,520 --> 00:07:16,600
one more than it's argument. So this will do exactly the same thing that we had
比它的论点多了一个。所以这将会做和我们之前做过的完全一样的事情

78
00:07:16,600 --> 00:07:23,600
before and let's just confirm that, that is working. So EW compile with the A2I
在此之前，让我们确认一下，这是有效的。因此，我们使用A2I进行编译

79
00:07:24,280 --> 00:07:30,880
library and now we have a syntax error. And we see that I forgot the closing
库，现在我们有一个语法错误。我们看到我忘了结案陈词

80
00:07:30,880 --> 00:07:37,880
semicolon here for the method. Remember the, the, class body is a list of methods,
在这里用分号表示该方法。记住，类主体是一个方法列表，

81
00:07:38,860 --> 00:07:44,870
and each method is terminated by a semicolon, Must try compiling that again.
并且每个方法都以分号结尾，则必须再次尝试编译。

82
00:07:44,870 --> 00:07:50,280
Now it compiles. Let's run it. We type in four gives a spec five. Alright, So looks
现在它可以编译了。让我们运行它。我们输入4给出规范5。好的，所以看起来

83
00:07:50,280 --> 00:07:54,280
right we're ready now to actually right the code for factorial. And this is gonna
好了，我们现在已经准备好实际纠正阶乘的代码了。而这将会是

84
00:07:54,280 --> 00:07:58,630
be anti climactic because it's actually a very simple code if we write it
令人沮丧的是，如果我们编写它，它实际上是一个非常简单的代码

85
00:07:58,630 --> 00:08:05,630
recursively. So let's do that. So how's that going to work? Well, everybody knows
递归地。那我们就这么做吧。那么这是怎么回事呢？嗯，大家都知道

86
00:08:07,289 --> 00:08:13,330
the definition by Hardy Hope. If I is equal to zero then the factorial of zero
哈代·霍普的定义。如果i等于零，那么零的阶乘

87
00:08:13,330 --> 00:08:20,330
is one. And we have a keyword there then one, otherwise the factorial is going to
就是其中之一。我们在那里有一个关键字，然后是一个，否则阶乘将会

88
00:08:22,060 --> 00:08:29,060
be I times, the factorial of I minus one. Right, and then if statements in
就是i乘以i减一的阶乘。对，然后如果语句中

89
00:08:31,690 --> 00:08:36,529
[inaudible] always end in the keyword [inaudible] so it's an if then else
[听不到]总是以关键字[听不到]结尾，所以它是IF THEN ELSE

90
00:08:36,529 --> 00:08:41,129
[inaudible] construct. And that is actually the entire definition. So now we
[听不见]构造。这实际上就是整个定义。所以现在我们

91
00:08:41,129 --> 00:08:45,179
should have a program that actually computes factorial, it compiles, so now
应该有一个真正计算阶乘的程序，它会编译，所以现在

92
00:08:45,179 --> 00:08:52,179
let's run it. So factorial of three is six. And factorial of six, is 720 and that
让我们运行它。所以3的阶乘是6。6的阶乘是720

93
00:08:55,639 --> 00:09:02,019
looks right. And if we try it one more time with a bigger number, we get a, we
看起来是对的。如果我们用一个更大的数字再试一次，我们会得到一个，我们

94
00:09:02,019 --> 00:09:05,050
get a large number, we think that's probably correct. And so, anyway our
得到一个大数目，我们认为这可能是正确的。所以，不管怎样，我们的

95
00:09:05,050 --> 00:09:10,519
factorial function, is working. So, now let's come back here, and just as an
阶乘函数，起作用了。所以，现在让我们回到这里，作为一个

96
00:09:10,519 --> 00:09:14,699
exercise, let's rewrite this code iteratively. So instead of using a
练习，让我们迭代地重写这段代码。因此，与其使用

97
00:09:14,699 --> 00:09:21,439
recursive function, let's write it using a loop. And in order to that [inaudible]
递归函数，让我们使用循环来编写它。为了[听不见]

98
00:09:21,439 --> 00:09:26,239
gonna get rid of that code. What are we going to need? Well, we're going to need
我要去掉那个密码。我们需要什么？嗯，我们需要

99
00:09:26,239 --> 00:09:32,899
an accumulator here. We're going to need a, a local variable that we can use to
这里有个蓄电池。我们需要一个，一个局部变量，我们可以用它来

100
00:09:32,899 --> 00:09:37,170
accumulate the results of the factorial computation. And the way you declare local
累加阶乘计算的结果。以及你声明本地化的方式

101
00:09:37,170 --> 00:09:40,230
variables in [inaudible] is with [inaudible] Statements, or naudibl
[不可听]中的变量带有[不可听]语句，或不可听

102
00:09:40,230 --> 00:09:45,230
expressions. So we're gonna have, let's call this, variable fact, for the, result
表情。因此，我们将有，让我们称之为，可变事实，对于结果

103
00:09:45,230 --> 00:09:48,429
of factorial. And notice here that I can have a variable that has the same name as
阶乘的。请注意，这里我可以有一个与以下名称相同的变量

104
00:09:48,429 --> 00:09:52,199
the function. And the programming language, [inaudible] will not get
函数。和编程语言，[听不见]将不会得到

105
00:09:52,199 --> 00:09:57,439
confused about that, Because variables and functions, play different roles. So we'll
对此感到困惑，因为变量和函数，扮演着不同的角色。所以我们会

106
00:09:57,439 --> 00:10:03,579
have the factorial fact, excuse me, it's of type Int, and we do initialize it to
有阶乘事实，打扰一下，它是Int类型的，我们确实将它初始化为

107
00:10:03,579 --> 00:10:10,139
one. Alright, so that multiplication will work. I think that the default for
一。好的，这样乘法就行了。我认为默认情况下

108
00:10:10,139 --> 00:10:14,059
integers is to be initialized to zero and that would not be good if we're going to
整数要初始化为零，如果我们要

109
00:10:14,059 --> 00:10:20,610
be multiplying up fact with other with other numbers. Alright, so then the, a let
将事实与其他数字相乘。好的，那么，那就是，让

110
00:10:20,610 --> 00:10:24,910
has two parts. It has the variable or variables that you are declaring. This
有两个部分。它包含您正在声明的一个或多个变量。这

111
00:10:24,910 --> 00:10:28,420
could actually be a list of variables. We'll only have one this time. And then it
可能实际上是一个变量列表。这次我们只要一个。然后它

112
00:10:28,420 --> 00:10:34,179
has a body. The, the expression or the computation in which the fact variable is
有一具身体。事实变量为的事实变量的表达式或计算

113
00:10:34,179 --> 00:10:40,350
available. And what do we want to do? So, I think we're gonna need to have this be a
有空的。那我们想做什么呢？所以，我想我们需要把这件事

114
00:10:40,350 --> 00:10:43,049
statement block 'cause we're gonna need to have more than one statement in the
挡路语句，因为我们需要在

115
00:10:43,049 --> 00:10:46,910
sequence. And we'll see why in just a minute. But then we wanna have a loop. And
序列。稍后我们再来看看原因。但是我们想要一个循环。和

116
00:10:46,910 --> 00:10:52,220
so what is our loop going to do? Well, we're gonna say while I is not equal to
那么我们的循环要做什么呢？好吧，我们要说的是，虽然我不能

117
00:10:52,220 --> 00:10:59,220
zero. What do we, and what do we need to do the opening for the loop body the
零。我们应该做什么，我们需要做什么来打开循环体

118
00:11:01,110 --> 00:11:07,259
opening keyword is called loop. [sound]. And now, I think we're going to need
开始关键字称为循环。[声音]。现在，我想我们需要

119
00:11:07,259 --> 00:11:11,100
another statement block here. So let's open up a block. We're gonna probably need
另一份声明请单击此处的挡路。那么让我们开一家挡路吧。我们可能需要

120
00:11:11,100 --> 00:11:17,899
to do more than one thing. The first thing we want to do is we want to have fact. Be
做不止一件事。我们想要做的第一件事是我们想要有事实。BE

121
00:11:17,899 --> 00:11:24,899
fact times I, so we know that I is not zero so we need to multiply the current
事实乘以I，所以我们知道I不是零，所以我们需要乘以电流

122
00:11:25,459 --> 00:11:30,899
value of I into fact to accumulate the result and then we want to subtract one
将i的值转化为事实来累加结果，然后我们要减去1

123
00:11:30,899 --> 00:11:35,220
from I and notice that the assignment statement in cool is this backwards arrow.
注意，COOL中的赋值语句是这个向后箭头。

124
00:11:35,220 --> 00:11:37,589
That's how you do assignment. It's also how you do initialization. So,
你就是这样做任务的。这也是您进行初始化的方式。所以,

125
00:11:37,589 --> 00:11:44,569
initialization and assignment look the same. Then we can close off our statement
初始化和赋值看起来是一样的。然后我们就可以结账了

126
00:11:44,569 --> 00:11:50,259
block. Okay, so the body of a while loop is always a single expression. In this
挡路。好的，While循环的主体总是一个表达式。在这里面

127
00:11:50,259 --> 00:11:56,899
case, that expression is a block that consists of two statements. [sound] And
在这种情况下，该表达式是由两个语句组成的挡路。[声音]和

128
00:11:56,899 --> 00:12:03,489
then we can close the loop. And the closing for a loop is the pool key word.
然后我们就可以关闭环路了。循环的结尾是POOL关键字。

129
00:12:03,489 --> 00:12:07,119
And then now we're in a statement block, so this has to end with a semicolon.
现在我们在挡路声明中，所以必须以分号结束。

130
00:12:07,119 --> 00:12:11,959
Notice the statement block up there from the let, And now we want the result of the
请注意上面来自LET的挡路语句，现在我们需要

131
00:12:11,959 --> 00:12:16,609
let block, or the let expression, to be factorial. So whatever the, whatever we
让挡路或let的表达成为阶乘。所以不管什么，不管我们

132
00:12:16,609 --> 00:12:19,829
got out of the while loop, whatever we computed in the while loop, we want that
摆脱了WHILE循环，无论我们在WHILE循环中计算了什么，我们都希望

133
00:12:19,829 --> 00:12:24,139
to be the result of the entire let expression. [sound] so that's the last
作为整个let表达式的结果。[声音]所以这是最后一次了

134
00:12:24,139 --> 00:12:29,009
statement of our blog. Remember the last statement of a statement blog, is the
我们博客的声明。记住声明博客的最后一句话，是

135
00:12:29,009 --> 00:12:35,089
value of the blog. The body of the led is the, the result of the led, so fact will
博客的价值。发光二极管的本体是发光二极管的结果，所以事实也是如此。

136
00:12:35,089 --> 00:12:37,989
also be result of the whole led statements, it's just the result of the
也是整个led语句的结果，这只是

137
00:12:37,989 --> 00:12:44,949
statement blog. And since the body of the, factorial method itself is just the led
声明博客。由于阶乘方法的主体本身就是主导的

138
00:12:44,949 --> 00:12:48,829
expression, fact will be the result of the whole thing. And so this, if we've
表达，事实将是整个事情的结果。所以这个，如果我们

139
00:12:48,829 --> 00:12:53,889
written, haven't made any mistakes, should be an iterative version of factorial. So,
写的，没有任何错误，应该是阶乘的迭代版本。所以,

140
00:12:53,889 --> 00:12:59,839
let's compile this. And amazingly it complies on the first try. And now let's
让我们编译这段代码。令人惊讶的是，它在第一次尝试时就符合要求。现在让我们

141
00:12:59,839 --> 00:13:05,480
run it. [sound] And whoa! It actually works. So we got six. And let's just do
运行它。[声音]哇哦！它确实起作用了。所以我们有六个人。我们就这么做吧

142
00:13:05,480 --> 00:13:10,059
one more test, to see that, to convince ourselves that, things are working
再来一次测试，看看，说服我们自己，事情正在进行中

143
00:13:10,059 --> 00:13:16,239
reasonably well, and they are. Now, let me just point out, one, common, mistake, that
相当不错，他们确实是这样。现在，让我指出，一个常见的错误，

144
00:13:16,239 --> 00:13:19,629
you can easily make, and, that I make when I haven't written cool programs for a
你可以很容易地做，而且，当我还没有写很酷的程序的时候，你可以很容易地做这件事。

145
00:13:19,629 --> 00:13:26,149
little while. If you're a C or programmer or a Java programmer, you might, think
一会儿就好。如果您是一名C或程序员或Java程序员，您可能会认为

146
00:13:26,149 --> 00:13:30,290
about, writing assignments, like this. So I just use the equal sign to write
关于，写作业，像这样。所以我只是用等号来写

147
00:13:30,290 --> 00:13:33,420
assignment. That looks completely fine if you're, if you're familiar with those
任务。如果你是，如果你熟悉那些，那看起来完全没问题

148
00:13:33,420 --> 00:13:38,889
languages, or used to programming in those languages. And now, let's see what happens
语言，或者习惯于用这些语言编程。现在，让我们看看会发生什么

149
00:13:38,889 --> 00:13:43,279
when we try to compile this. Oh, it compiles just fine. And then what happens
当我们试图编译这个的时候。哦，它编译得很好。然后会发生什么

150
00:13:43,279 --> 00:13:48,939
when we try to run it. Well it runs [inaudible] input so let's give it input
当我们试图运行它的时候。好的，它运行[听不见]输入，所以让我们给它输入

151
00:13:48,939 --> 00:13:53,660
and. Then we see that we've run out of heat. And that looks like an infinite
和。然后我们发现我们的热量用完了。这看起来像是一个无限大的

152
00:13:53,660 --> 00:13:59,119
loop. So we're going around and around the loop And consuming memory for some reason.
循环。因此，出于某种原因，我们在循环中循环并消耗内存。

153
00:13:59,119 --> 00:14:02,350
And we'll, we '[laugh] get to that much later in the class. Why, why this loop
我们会在课上晚些时候讲到这一点。为什么，为什么是这个环路

154
00:14:02,350 --> 00:14:07,720
actually ends up consuming memory. But, clearly, we don't have enough memory, in
实际上最终会消耗内存。但是，很明显，我们没有足够的内存，在

155
00:14:07,720 --> 00:14:12,540
the loop, and, and eventually we run out. And so, so that's a sure sign Of an
循环，然后，最终我们就用完了。所以，这是一个明确的信号

156
00:14:12,540 --> 00:14:16,859
infinite look. So what is going on here? Well the thing is that equals. Equals
无限的眼神。那么这里到底是怎么回事呢？问题是这等于。等于

157
00:14:16,859 --> 00:14:22,109
operator in cool is the comparison operators. [inaudible] Well we compared I
COOL中的运算符是比较运算符。[听不见]嗯，我们比较了一下

158
00:14:22,109 --> 00:14:26,579
with O and that returns a boullion. So these are perfectly valid cool
加上O，它会返回一个大球。所以这些都是非常有效的，酷毙了

159
00:14:26,579 --> 00:14:32,139
expressions. They just happen to be boullions. So, you don't ever actually I
表情。它们只是碰巧是巨石。所以，你不会真的

160
00:14:32,139 --> 00:14:38,589
or factorial in this program. Your just comparing fact with factoid body and I
或者这个程序中的阶乘。你只是拿事实和我的肉体做比较

161
00:14:38,589 --> 00:14:43,829
with I minus one and the program is perfectly happy to do that. It just
我减一，程序非常乐意这样做。它只是

162
00:14:43,829 --> 00:14:47,129
doesn't compute the factorial function. And it never terminates, because I never
不计算阶乘函数。它永远不会结束，因为我从来没有

163
00:14:47,129 --> 00:14:53,759
reaches zero. So that concludes our factorial example. And we'll do one more
达到零。我们的阶乘示例到此结束。我们会再做一次

164
00:14:53,759 --> 00:14:59,040
example next time of a more complicated, of a, of a cool program with some
下一次更复杂的示例，一个很酷的程序，有一些

165
00:14:59,040 --> 00:15:00,489
non-trivial data structures.
非常重要的数据结构。

