0
00:00:03,730 --> 00:00:07,980
We are now ready to begin our next major topic, Program Optimization. In this
我们现在准备开始我们的下一个主要话题，程序优化。在这里面

1
00:00:07,980 --> 00:00:12,400
video, we're just going to give overview discussing why we want to perform
视频，我们将给出一个概述，讨论为什么我们想要表演

2
00:00:12,400 --> 00:00:16,740
optimization and what the trade-offs are for compilers and deciding what kind of
优化以及编译器的权衡是什么，以及决定哪种类型的

3
00:00:16,740 --> 00:00:23,740
optimizations to implement. Optimization is the last compiler phase that we're
要实施的优化。优化是我们正在进行的最后一个编译阶段

4
00:00:24,609 --> 00:00:29,380
going to discuss. Let's just very briefly review the compiler phases. First there is
我们要讨论一下。让我们非常简要地回顾一下编译器阶段。首先是

5
00:00:29,380 --> 00:00:35,050
lexical analysis and then that's followed by parsing. Then we have semantic
词法分析，然后是解析。然后我们就有了语义

6
00:00:35,050 --> 00:00:42,050
analysis. And after that we talked about code generation. And now we're going to
分析。在那之后，我们讨论了代码生成。现在我们要做的是

7
00:00:47,500 --> 00:00:51,870
talk about optimization, okay? So optimization actually comes before code
谈论优化，好吗？因此，优化实际上先于代码

8
00:00:51,870 --> 00:00:56,109
generation because we want to improve the program before we commit it to machine
生成，因为我们希望在将程序提交到机器之前对其进行改进

9
00:00:56,109 --> 00:01:01,100
code but it is of course the last one that we've discussed. But, just point out here,
代码，但这当然是我们讨论的最后一个问题。但是，只要在这里指出，

10
00:01:01,100 --> 00:01:05,360
optimization fits in between generally semantic analysis and code generation and
优化介于一般的语义分析和代码生成之间，并且

11
00:01:05,360 --> 00:01:10,520
in modern compilers this is where most of the action is. It's usually has by far the
在现代编译器中，这是操作最多的地方。到目前为止，它通常都有

12
00:01:10,520 --> 00:01:17,250
most code, and it's also the most complex part of the compiler. Now, a very basic
大多数代码，也是编译器中最复杂的部分。现在，一个非常基本的问题

13
00:01:17,250 --> 00:01:21,550
question is, when we should perform optimizations? And we actually have some
问题是，我们应该在什么时候进行优化？我们实际上有一些

14
00:01:21,550 --> 00:01:26,310
choices. We could perform them on the abstract syntax tree and, a big advantage
选择。我们可以在抽象语法树上执行它们，这是一个很大的优势

15
00:01:26,310 --> 00:01:32,060
of that is that it's machine independent but for many optimizations we want to do,
其中之一是它是独立于机器的，但对于我们想要进行的许多优化，

16
00:01:32,060 --> 00:01:36,310
this, it turns out that the abstract syntax tree will be too high level that we
这就证明了抽象语法树的级别太高，以至于我们

17
00:01:36,310 --> 00:01:40,090
can't actually even express the optimizations we want to perform because
实际上甚至不能表达我们想要执行的优化，因为

18
00:01:40,090 --> 00:01:46,030
those optimizations depend on lower level details of the machine or of the kind of
这些优化取决于机器的较低级别的详细信息或

19
00:01:46,030 --> 00:01:49,140
machine that we're generating code for that aren't present in the abstract syntax
我们正在为其生成代码的计算机没有出现在抽象语法中

20
00:01:49,140 --> 00:01:54,490
tree. Another possibility would be to perform optimizations directly on assembly
树。另一种可能性是直接对程序集执行优化

21
00:01:54,490 --> 00:02:00,470
language and the advantage here that all the details of the machine are exposed. We
这里的优点是机器的所有细节都被曝光了。我们

22
00:02:00,470 --> 00:02:04,470
can see everything that the machine is doing. We can talk about all the resources
可以看到机器正在做的一切。我们可以谈论所有的资源

23
00:02:04,470 --> 00:02:08,509
of the machine and so, in principle, any optimization we want to perform can be
因此，原则上，我们要执行的任何优化都可以是

24
00:02:08,508 --> 00:02:13,959
expressed at the assembly language level. Now a disadvantage of doing optimizations
用汇编语言级别表达。现在做优化的一个缺点是

25
00:02:13,959 --> 00:02:17,439
on assembly language is that they are machine-dependent. And then we would have
汇编语言的特点是它们依赖于机器。然后我们就会有

26
00:02:17,439 --> 00:02:21,480
to potentially re-implement our optimizations for each new kind of
为了潜在地重新实现我们对每一种新类型的

27
00:02:21,480 --> 00:02:28,480
architecture. And so, as we mentioned in the previous video, another option is to
建筑。因此，正如我们在前面的视频中提到的，另一种选择是

28
00:02:29,859 --> 00:02:33,819
use an intermediate language And the intermediate language has the advantage
使用中间语言，中间语言具有优势

29
00:02:33,819 --> 00:02:38,239
potentially, if it's designed well, of still being machine independent. Meaning
如果设计得当，它仍有可能独立于机器。含义

30
00:02:38,239 --> 00:02:42,140
it can, it can be a little bit above the level of the concrete details of very,
它可以，它可以比非常具体的细节稍微高一点，

31
00:02:42,140 --> 00:02:47,359
very specific architectures. I mean, it can still represent a large family of
非常特殊的架构。我是说，它仍然可以代表一个大家庭

32
00:02:47,359 --> 00:02:53,189
machines but while, at the same time, exposing enough optimization opportunities
机器，但同时也暴露了足够的优化机会

33
00:02:53,189 --> 00:03:00,189
that the compiler can do a good job of improving the program's performance. So,
编译器可以很好地提高程序的性能。所以,

34
00:03:00,969 --> 00:03:06,980
we will be looking at optimizations that work on intermediate language that has
我们将研究在具有以下特性的中间语言上工作的优化

35
00:03:06,980 --> 00:03:12,099
operations given by this grammar. So, in this case, a program is a sequence of
由这种语法给出的运算。因此，在这种情况下，程序是一系列

36
00:03:12,099 --> 00:03:18,010
statements and a statement consists of either, an assignment Which could be a
语句，而语句由任一语句组成，赋值可以是

37
00:03:18,010 --> 00:03:24,540
simple copy, or a unary, or binary operation. We can push and pop things from
简单复制，或一元或二进制操作。我们可以从这里推送和弹出东西

38
00:03:24,540 --> 00:03:29,529
a stack and then we have a couple of different kinds of jumps. We have a
一个堆栈，然后我们有几种不同的跳跃。我们有一个

39
00:03:29,529 --> 00:03:33,170
comparison in jump where we compare the value of two registers and then
跳转中的比较，我们比较两个寄存器的值，然后

40
00:03:33,170 --> 00:03:38,279
conditionally jump to a label. We have unconditional jumps and finally there are
有条件地跳转到标签。我们有无条件的跳跃，最后还有

41
00:03:38,279 --> 00:03:43,459
labels, the targets of jumps. And the identifiers here are the register names,
标签，跳跃的目标。这里的标识符是寄存器名称，

42
00:03:43,459 --> 00:03:48,279
and we could also use immediate values on the right hand side of operations instead
我们也可以在运算的右侧使用立即值

43
00:03:48,279 --> 00:03:53,010
of registers and the typical operators, we're just going to assume some typical
寄存器和典型运算符，我们将假设一些典型的

44
00:03:53,010 --> 00:04:00,010
family of operators like +,,, -,,, 'lt;i>, etcetera. Now, optimizations typically'lt;/i>
运算符系列，如+、-、‘lt；i>等。现在，优化通常是’lt；/i>

45
00:04:00,730 --> 00:04:05,680
work on groups of statements and one of the most important and useful statement
研究语句组和最重要、最有用的语句之一

46
00:04:05,680 --> 00:04:11,120
groupings is the basic block. So a basic block is a sequence of instructions and
分组是基本的挡路。所以基本的挡路是一系列的指令和

47
00:04:11,120 --> 00:04:14,639
typically we want it to be the longest possible sequence of instructions. So we
通常，我们希望它是尽可能长的指令序列。所以我们

48
00:04:14,639 --> 00:04:19,419
want it to be maximal and this sequence has two properties. First of all there are
希望它是最大的，这个序列有两个属性。首先，有几个

49
00:04:19,418 --> 00:04:24,500
no labels except possibly for the very first instruction. And there are no jumps
除了可能的第一条指示外，没有标签。而且没有跳跃

50
00:04:24,500 --> 00:04:30,820
anywhere in this sequence of instructions except, possibly for the last instruction.
该指令序列中的任何位置，可能除了最后一条指令之外。

51
00:04:30,820 --> 00:04:34,980
And a basic block the ide a behind a basic block, and the reason we require these two
一个基本的挡路背后有一个基本的挡路，我们需要这两个的原因

52
00:04:34,980 --> 00:04:40,340
properties is that it's guaranteed to flow, the execution is guaranteed to
属性是它被保证流动，执行被保证

53
00:04:40,340 --> 00:04:43,970
proceed from the first statement in the block to the last statement in the block.
从挡路的第一条声明到挡路的最后一条声明。

54
00:04:43,970 --> 00:04:49,680
So the flow of control within a basic block is completely predictable. Once we
所以在一个基本的挡路内部的控制流是完全可以预测的。一旦我们

55
00:04:49,680 --> 00:04:53,320
enter the block, once we begin at the first statement of the block which might
进入挡路，一旦我们从挡路的第一句话开始，可能

56
00:04:53,320 --> 00:05:00,150
have a label, there will be a sequence of statements. That must all execute before
有了标签，就会有一系列的陈述。它们必须全部在之前执行

57
00:05:00,150 --> 00:05:03,880
we reach the last statement which could potentially be a jump to some other part
我们到达最后一条语句，它可能会跳转到其他部分

58
00:05:03,880 --> 00:05:08,400
of the code. But once we get here, once we get to this very first statement, then
代码的一部分。但是一旦我们到了这里，一旦我们到了第一个陈述，那么

59
00:05:08,400 --> 00:05:14,230
we're guaranteed to execute the entire block without jumping out And furthermore,
我们保证在不跳出来的情况下执行整个挡路，而且，

60
00:05:14,230 --> 00:05:17,550
there's no way to jump into the block. You couldn't just come from some other random
没有办法跳进挡路。你不能随便从别的地方来

61
00:05:17,550 --> 00:05:22,060
part of the program and begin execution, say, at the second or third instruction.
程序的一部分，并开始执行，比方说，在第二条或第三条指令处。

62
00:05:22,060 --> 00:05:26,180
The only way into the block is through the first statement, and the only way out is
进入挡路的必由之路是通过第一条语句，唯一的出路是

63
00:05:26,180 --> 00:05:33,180
through the last statement. Say here's a example basic block and just to show you
通过最后一份声明。假设这是一个基本的挡路示例，只是为了向您展示一下

64
00:05:34,320 --> 00:05:39,620
why basic blocks are useful. Let's observ that we can actually optimize this piece
为什么基本块很有用。让我们观察一下，我们实际上可以优化这一块

65
00:05:39,620 --> 00:05:45,160
of code. Okay because three always executes after two. This instruction here
代码。好的，因为三总是在二之后执行。此处的说明

66
00:05:45,160 --> 00:05:50,270
always execute after this instruction. We could change that third instruction to be
始终在此指令之后执行。我们可以将第三条指令更改为

67
00:05:50,270 --> 00:05:57,270
w = three x. Okay because we can see here that t is getting two x + x or two
W=3x，好的，因为我们在这里可以看到t是2x+x或2x

68
00:05:57,910 --> 00:06:02,040
x and here we're adding in another x and so w is actually always equal to three
在这里我们再加上一个x，所以w实际上总是等于3

69
00:06:02,040 --> 00:06:08,730
x. And a question then, so that, that is certainly a correct optimization and, and
x.然后是一个问题，所以，这肯定是一个正确的优化，并且

70
00:06:08,730 --> 00:06:14,110
it's correct exactly because statement two is always guaranteed to execute before
它是正确的，因为语句2总是保证在

71
00:06:14,110 --> 00:06:18,450
statement three. Another question we might be is whether we can eliminate this
陈述三。我们可能面临的另一个问题是，我们是否能消除这一点

72
00:06:18,450 --> 00:06:25,450
statement so once we replace this by three x, you know maybe we don't need this
语句，所以一旦我们用3x替换它，你知道我们可能不需要这个

73
00:06:27,090 --> 00:06:31,690
assignment anymore if this was the only place that t was used if t was a temporary
如果这是唯一使用t的位置(如果t是临时的

74
00:06:31,690 --> 00:06:37,910
value that was computed only to compute the, the value w. And then we can delete
仅为计算w值而计算的值，然后我们可以删除

75
00:06:37,910 --> 00:06:42,130
this statement and this depends on the rest of the program. We have to know
这句话和这句话要看节目的睡觉。我们必须知道

76
00:06:42,130 --> 00:06:46,440
whether t has any other uses someplace else in the program w hich we can't see
程序中其他我们看不到的地方有没有其他用途

77
00:06:46,440 --> 00:06:53,170
just by looking at the single basic block. The next important grouping of statements
单看一下基本的挡路就知道了。下一个重要的语句分组

78
00:06:53,170 --> 00:06:58,620
is a control flow graph. And a control flow graph is a, just a graph of basic
是一个控制流图。而控制流图就是一个，就是一个基本的

79
00:06:58,620 --> 00:07:04,210
blocks. And so there's an edge from block a to block b. If execution could pass from
块。所以从挡路a到挡路b有优势。如果死刑可以从

80
00:07:04,210 --> 00:07:08,750
the last instruction in a to the first instruction of b. So essentially the
a中的最后一条指令到b的第一条指令。所以本质上

81
00:07:08,750 --> 00:07:13,720
control flow graph just shows how control flow can pass between the blocks and there
控制流图仅显示控制流如何在块和块之间传递

82
00:07:13,720 --> 00:07:17,580
isn't of course no interesting control flow within the block. We know that the
当然，挡路中没有有趣的控制流。我们知道

83
00:07:17,580 --> 00:07:20,990
basic block will just execute from the first instruction to the last instruction.
基本挡路只执行从第一条指令到最后一条指令。

84
00:07:20,990 --> 00:07:25,610
So, the control flow graph is a way of summarizing the interesting decision
因此，控制流程图是总结有趣决策的一种方式

85
00:07:25,610 --> 00:07:30,990
points in a, in a procedure or a other piece of code showing where some
、过程中的点或其他代码段中的点，以显示某些

86
00:07:30,990 --> 00:07:37,200
interesting control flow decision is actually made. So here's a simple control
实际上做出了有趣的控制流决策。所以这里有一个简单的控件

87
00:07:37,200 --> 00:07:42,810
flow graph consists of two basic blocks. The first basic block is outside of the
流程图由两个基本块组成。第一个基本的挡路在世界范围外

88
00:07:42,810 --> 00:07:47,170
loop, and consists of some initialization code. And then we have one basic block
循环，并由一些初始化代码组成。然后我们有一个基本的挡路

89
00:07:47,170 --> 00:07:51,710
here in the loop. The basic block consists of these three instructions. And at the
就在这个循环里。基本的挡路由这三个指令组成。而在

90
00:07:51,710 --> 00:07:57,000
bottom of the block is a branch, a testing branch where either we, exit and go
挡路的底部是一个分支，一个测试分支，我们要么退出，要么去

91
00:07:57,000 --> 00:08:04,000
someplace else or we loop around and execute the loop body again, okay? And the
其他地方，否则我们再循环一遍，再执行一次循环体，好吗？以及

92
00:08:04,790 --> 00:08:09,100
body of a method can always be represented as a control flow graph. The convention
方法体始终可以表示为控制流图。大会

93
00:08:09,100 --> 00:08:13,180
that we'll use is always a distinguished entry node so a distinguished start node
我们将使用的始终是可区分的条目节点，因此可区分的起始节点

94
00:08:13,180 --> 00:08:15,820
of the control flow graph and typically it'll just be obvious it'll be the one
控制流图的一部分，通常很明显，它将是

95
00:08:15,820 --> 00:08:21,060
listed at the top. And then there will be some return nodes or one or some nodes of
列在最上面。然后会有一些返回节点或一个或几个节点

96
00:08:21,060 --> 00:08:25,850
which you can return from and you know you have a return statements in the procedure.
您可以从中返回，并且您知道在该过程中有一个Return语句。

97
00:08:25,850 --> 00:08:31,040
And return nodes or places where you exit the procedure will always be terminal.
并且返回您退出该过程的节点或位置将始终是终止的。

98
00:08:31,040 --> 00:08:37,529
Meaning there will be no edges out of those blocks. Now, the purpose of
这意味着这些区块将不会有边缘。现在，我要说的是

99
00:08:37,529 --> 00:08:42,749
optimization is to improve a program's resource utilization. And for the purposes
优化就是提高程序的资源利用率。并且出于以下目的

100
00:08:42,749 --> 00:08:46,389
of this classroom, when we talk about optimization in, in our examples and in
当我们在、在我们的示例中和在中谈论优化时，

101
00:08:46,389 --> 00:08:49,930
the videos we're gonna be talking about execution time. And we're gonna be talking
我们将要谈论的行刑时间的视频。我们将会谈论

102
00:08:49,930 --> 00:08:53,230
about, we're g onna be talking about making the program run faster. And this is
关于，我们要讨论的是如何让程序运行得更快。这是

103
00:08:53,230 --> 00:08:58,449
mostly what people are interested in. So most compilers do spent quite a bit of
主要是人们感兴趣的东西。所以大多数编译器确实花费了相当多的时间

104
00:08:58,449 --> 00:09:02,800
effort on making programs run faster but it's important to realize that there are
努力让程序运行得更快，但重要的是要认识到

105
00:09:02,800 --> 00:09:07,949
many other resources that we could optimize for. And, actually for any
我们可以针对许多其他资源进行优化。而且，实际上对任何人来说

106
00:09:07,949 --> 00:09:12,639
resource that you can imagine there probably is a compiler out there that
资源，您可以想象可能有一个编译器在那里

107
00:09:12,639 --> 00:09:18,620
spend some effort optimizing for an insert domain domains of application. So for
花点功夫来优化应用程序的插入域域。所以对于

108
00:09:18,620 --> 00:09:23,449
example there are compilers we might care about code size. We might care about the
例如，有些编译器我们可能会关心代码大小。我们可能会关心

109
00:09:23,449 --> 00:09:28,209
number of network messages sent, other things that are commonly optimized for our
发送的网络消息数量，以及通常针对我们的

110
00:09:28,209 --> 00:09:34,709
memory usage, disk accesses so, so databases, for example. Try to minimize
内存使用率、磁盘访问量等等，比如数据库。尽量最小化

111
00:09:34,709 --> 00:09:39,639
the number of times you access the disk and, and power for battery powered
您访问磁盘的次数和，以及电池供电的电源

112
00:09:39,639 --> 00:09:45,300
devices. And the important thing about optimization is that it should not alter
设备。关于优化的重要一点是，它不应该改变

113
00:09:45,300 --> 00:09:50,459
what the program computes. The answer still must be the same, okay? So we're
程序计算的内容。答案肯定还是一样的，好吗？所以我们要

114
00:09:50,459 --> 00:09:55,319
allowed to improve, the program's resource utilization, but we can't change what the
允许改善，程序的资源利用率，但我们不能改变

115
00:09:55,319 --> 00:10:02,319
program will produce. Now, for languages like C and Cool, and all of the languages
节目将会制作。现在，对于像C和Cool这样的语言，以及所有的语言

116
00:10:03,370 --> 00:10:07,370
that you're probably familiar with, there are three granularities of optimization
您可能很熟悉，有三种粒度的优化

117
00:10:07,370 --> 00:10:12,160
that people typically talk about. One is called local optimization, and those are
这是人们通常谈论的话题。一种叫做局部优化，它们是

118
00:10:12,160 --> 00:10:16,559
optimizations that apply to a basic block in isolation. So these are optimizations
孤立地应用于基本挡路的优化。所以这些都是优化的

119
00:10:16,559 --> 00:10:22,579
that occur within a single basic block. Then there are what are called global
出现在一个基本的挡路内。然后是所谓的全局

120
00:10:22,579 --> 00:10:27,360
optimizations and this is really misnamed because it's not global across the entire
优化，这真的是命名错误，因为它不是整个全局的

121
00:10:27,360 --> 00:10:31,430
program. What people mean by global optimization is that implies to a control
程序。人们所说的全局优化是指控制

122
00:10:31,430 --> 00:10:37,279
flow graph. It's global across an entire function alright so, so global
流程图。它在整个函数中是全局的，好的，所以是全局的

123
00:10:37,279 --> 00:10:40,860
optimizations would apply to a single function and optimizer across all the
优化将应用于所有

124
00:10:40,860 --> 00:10:46,240
basic blocks of that function. And finally there are inter-procedural optimizations
该功能的基本模块。最后，还有过程间的优化

125
00:10:46,240 --> 00:10:50,860
these are optimizations that work across method boundaries. They take multiple
这些是跨方法边界工作的优化。他们使用多个

126
00:10:50,860 --> 00:10:56,999
functions and move things around to try to optimize the collection of functions as a
函数并移动对象，以尝试将函数集合优化为

127
00:10:56,999 --> 00:11:02,209
whole. Many compilers do one, in fact almost all compilers do one. Many, many
完整的。许多编译器都会这样做，事实上几乎所有编译器都会这样做。很多很多

128
00:11:02,209 --> 00:11:07,959
compilers today do two, but not very many actually do three, okay? So you see
今天的编译器做两个，但实际上做三个的人不是很多，好吗？所以你看

129
00:11:07,959 --> 00:11:14,439
decreasing numbers of compilers doing, these optimizations as you move up in the
进行这些优化的编译器数量不断减少，当您在

130
00:11:14,439 --> 00:11:20,480
granularity, and partly that's because the optimization's are more difficult to
粒度，这在一定程度上是因为优化更难

131
00:11:20,480 --> 00:11:23,730
implement so it's just more work to implement the inter-procedural
实现，所以只需要做更多的工作来实现过程间

132
00:11:23,730 --> 00:11:29,480
optimization's but also because a lot of the payoff is in the more local
优化的同时也因为更多的收益来自于更多的本地化

133
00:11:29,480 --> 00:11:35,379
optimizations. So, expanding on that last point a little bit more. It turns out
优化。因此，在最后一点上再做一些扩展。结果发现

134
00:11:35,379 --> 00:11:40,660
that, in practice, while we know how to do many, many optimizations. Often a
那就是，在实践中，当我们知道如何做很多很多优化的时候。通常是一个

135
00:11:40,660 --> 00:11:45,499
conscious decision is made not to implement the fanciest optimization that
有意识地决定不实施最花哨的优化

136
00:11:45,499 --> 00:11:50,449
is known in the research literature. And that's kind of an unfortunate thing from
在研究文献中是已知的。这是一件很不幸的事情

137
00:11:50,449 --> 00:11:54,899
my point of view being somebody who's really likes compilers and spent a lot of
我的观点是，我是一个真正喜欢编译器的人，并且花了很多时间

138
00:11:54,899 --> 00:11:59,089
time thinking about optimization. And maybe it's a little bit hard to accept for
花时间思考优化问题。也许这有点让人难以接受

139
00:11:59,089 --> 00:12:04,569
the professional compiler researchers that, that people don't always want to
专业的编译器研究人员认为，人们并不总是想要

140
00:12:04,569 --> 00:12:08,869
implement the latest and greatest optimization. But it's worth understanding
实施最新最大的优化。但这是值得理解的

141
00:12:08,869 --> 00:12:13,680
why that might not be the case and it boils down essentially to software
为什么可能不是这样，归根结底是软件

142
00:12:13,680 --> 00:12:17,170
engineering. Some of these optimizations are really hard to implement, I mean
工程学。我的意思是，其中一些优化确实很难实现

143
00:12:17,170 --> 00:12:20,839
they're just complicated to implement. Some of the optimizations are costly in
它们只是实施起来很复杂。某些优化在以下方面代价高昂

144
00:12:20,839 --> 00:12:27,100
compilation time. So even though the compiling happens offline, it is not part
编译时间。因此，即使编译是离线进行的，它也不是

145
00:12:27,100 --> 00:12:31,699
of the running of the program, you know the programmer still has to wait while the
在程序的运行过程中，您知道程序员仍然需要等待

146
00:12:31,699 --> 00:12:37,139
optimizing compiler compiles, does its compilation and if it takes hours or in
优化编译器编译，进行编译，如果需要几个小时或在

147
00:12:37,139 --> 00:12:42,699
some cases days, to optimize a program, you know, that's not necessarily great.
在某些情况下，要优化一个程序，你知道，这不一定是很好的。

148
00:12:42,699 --> 00:12:49,399
And, some of these optimizations have low pay off. They might, always improve the
而且，其中一些优化的回报很低。他们可能，总是会改善

149
00:12:49,399 --> 00:12:53,779
program, but they might only do it by a very small amount and unfortunately, many
程序，但是他们可能只做很小的量，不幸的是，很多

150
00:12:53,779 --> 00:12:57,379
of the fanciest optimizations in the literature have all three of these
在文献中最奇特的优化中，这三个都有

151
00:12:57,379 --> 00:13:02,100
properties. They're complicated, they take a long time to run, and they don't do very
属性。它们很复杂，需要很长时间才能跑完，而且它们做得不是很好

152
00:13:02,100 --> 00:13:06,639
much. And so it's not so surprising That and not all of these to get implemented in
很多。所以并不令人惊讶的是，并不是所有的这些都能在

153
00:13:06,639 --> 00:13:12,619
production compilers. And this actually, you kn ow points out what the real goal is
生产编译器。而这实际上，你知道指出了真正的目标是什么

154
00:13:12,619 --> 00:13:17,019
in optimization. What we really want is maximum benefit for minimum cost. We're
在优化方面。我们真正想要的是以最小的成本获得最大的利益。我们是

155
00:13:17,019 --> 00:13:21,889
really talking about a cost benefit ratio. So, like optimization costs a certain
真正谈论的是成本效益比。所以，像优化一样需要一定的成本

156
00:13:21,889 --> 00:13:27,779
amount, in code complexity, complexity of the compiler In programmer time I mean
我的意思是，在代码复杂度方面，编译器在程序员时间内的复杂度

157
00:13:27,779 --> 00:13:32,569
waiting for the compiler to run and, and the benefit, the amount that it improves
等待编译器运行，以及它改进的数量

158
00:13:32,569 --> 00:13:35,889
the program has to be sufficient to justify those costs.
该计划必须足以证明这些成本是合理的。

