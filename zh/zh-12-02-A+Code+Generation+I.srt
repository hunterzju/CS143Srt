0
00:00:03,780 --> 00:00:07,370
In the next two videos, we're going to be looking at code generation for a language
在接下来的两个视频中，我们将了解一种语言的代码生成

1
00:00:07,370 --> 00:00:11,139
that's higher level than a simple stack machine language we've been talking about
这比我们一直在讨论的简单堆栈机器语言级别更高

2
00:00:11,139 --> 00:00:18,139
so far. So here's a language with integers and integer operation and this was the
到目前为止。这是一种带有整数和整数运算的语言，这是

3
00:00:21,630 --> 00:00:26,590
grammar. So a program consists of a list of declarations, and what's a declaration?
语法。那么，一个程序由一系列声明组成，什么是声明呢？

4
00:00:26,590 --> 00:00:30,670
A declaration is a function definition so it has a function name, the function takes
声明是一个函数定义，因此它有一个函数名，该函数采用

5
00:00:30,670 --> 00:00:35,570
a list of arguments which are just identifiers, and the function has an
参数列表，这些参数只是标识符，并且该函数有一个

6
00:00:35,570 --> 00:00:39,550
expression, which is the body of the function And what in function bodies look
表达式，它是函数体以及函数体中的外观

7
00:00:39,550 --> 00:00:45,719
like, well they expressions can be integers identifiers if then else, and the
例如，如果Then Else，则它们的表达式可以是整数标识符，并且

8
00:00:45,719 --> 00:00:50,100
only predicate that we're going to allow is an equality test between integers and
我们将允许的唯一谓词是整数和

9
00:00:50,100 --> 00:00:57,100
then sums of expressions, differences of expressions, and function calls. Now we'll
然后是表达式的和、表达式的差异和函数调用。现在我们要

10
00:00:57,449 --> 00:01:01,050
just say that the first function definition in the list is the entry point.
就说列表中的第一个函数定义是入口点。

11
00:01:01,050 --> 00:01:04,019
This will be the main routine, or the function that gets run when the program
这将是主例程，或者是在程序运行时运行的函数

12
00:01:04,019 --> 00:01:09,170
starts And this language is expressive enough to write a Fibonacci function And
开始，并且此语言具有足够的表现力，可以编写斐波那契函数和

13
00:01:09,170 --> 00:01:13,250
here it is And this is just a standard definition, if X is one then the result is
这就是，这只是一个标准定义，如果X是1，那么结果是

14
00:01:13,250 --> 00:01:17,930
zero. If X is two, the result is one. Otherwise it's the sum of fib of X minus
零。如果X是二，则结果是一。否则就是X的fib减去

15
00:01:17,930 --> 00:01:24,930
one and fib of X minus two. Now, it's a two code generation for this language. We
一和X减去二的纤维。现在，这是这种语言的两个代码生成。我们

16
00:01:25,899 --> 00:01:30,240
need to generate code for each expression E; we need to produce MIPS code for each
需要为每个表达式E生成代码；我们需要为每个表达式生成MIPS代码

17
00:01:30,240 --> 00:01:34,560
expression E that accomplishes two things. First of all, that code is going to
表达式E完成两件事。首先，该代码将

18
00:01:34,560 --> 00:01:39,840
compute the value of E, and leave it in the accumulator A zero. Right? So when the
计算E的值，并将其留在累加器A中为零。对吗？所以当

19
00:01:39,840 --> 00:01:46,509
code for E is done, the value of E will be stored in the accumulator And furthermore,
E的代码完成后，E的值将存储在累加器中，而且，

20
00:01:46,509 --> 00:01:50,799
E is going to, the code for E, excuse me, the generated code for E is going to
要，E的代码，打扰一下，E的生成代码要

21
00:01:50,799 --> 00:01:55,369
preserve the stack pointer and the contents of the stack. That means whatever
保留堆栈指针和堆栈内容。那意味着什么都行

22
00:01:55,369 --> 00:02:00,600
the stack is when we started executing E, or the code for E, the stack will be
堆栈是当我们开始执行E时，或者E的代码，堆栈将是

23
00:02:00,600 --> 00:02:06,310
exactly the same after we're done, executing the code for E And we're going
在我们完成之后完全一样，执行E的代码，然后我们将

24
00:02:06,310 --> 00:02:12,129
to write a code generation function C-gen of E that produces code. Okay? So C-gen
编写生成代码的E的代码生成函数C-gen。好吧?所以C世代

25
00:02:12,129 --> 00:02:15,670
would be something that produces a program. It produces code that will
应该是制作程序的东西。它生成的代码将

26
00:02:15,670 --> 00:02:21,599
accomplish these two things. Now our co-generation function is just going to
完成这两件事。现在我们的热电联产函数

27
00:02:21,599 --> 00:02:25,510
work by cases And to begin with let's focus on the expressions, and we're just
按案例工作，首先让我们集中在表达式上，我们只是

28
00:02:25,510 --> 00:02:29,230
going to have, different kind of code or a certain kind of code that's generated for
将有不同类型的代码或特定类型的代码为其生成

29
00:02:29,230 --> 00:02:33,739
each kind of expression in the language. So to evaluate an expression, which is a
语言中的每一种表达方式。因此，要计算一个表达式，该表达式是

30
00:02:33,739 --> 00:02:38,069
just an integral constant, all we have to do is load that constant into the
这只是一个整数常数，我们所要做的就是将该常数加载到

31
00:02:38,069 --> 00:02:43,819
accumulator. So, the code generation for ‘I', for the constant, ‘I', is the
累加器。因此，常量“i”的“i”的代码生成是

32
00:02:43,819 --> 00:02:49,890
instruction, load immediate into the accumulator the value of ‘I' And it's
指令中，将立即值“i”加载到累加器中，则它将

33
00:02:49,890 --> 00:02:53,659
easy to see that this preserves the stack as required, so this doesn't modify the
很容易看出，这会根据需要保留堆栈，因此不会修改

34
00:02:53,659 --> 00:02:57,099
stack pointer or the contents of the stack at all, so the stack is exactly the same
堆栈指针或堆栈的内容，所以堆栈是完全相同的

35
00:02:57,099 --> 00:03:02,450
before and after the execution of this instruction. >> And another thing I want
在执行此指令之前和之后。>>还有一件事我想要

36
00:03:02,450 --> 00:03:07,120
to point out or I want to emphasize here, is I'm going to be following a convention
我要指出或者我想在这里强调的是，我将遵循一个惯例

37
00:03:07,120 --> 00:03:12,349
that things that are in red, are things that are done at compile time And things
红色的东西，是在编译时做的东西

38
00:03:12,349 --> 00:03:17,150
that are in blue are things that are going to be done in run time. So in this case,
蓝色的是要在运行时完成的事情。所以在这种情况下，

39
00:03:17,150 --> 00:03:24,150
at compile time we execute the function C gen of I And that produces code. Here that
在编译时，我们执行i的函数Cgen，生成代码。在这里，那个

40
00:03:24,230 --> 00:03:28,159
will run at run time, okay. So, C gen of I, something that would execute a compile
将在运行时运行，好的。所以，第i代的C语言可以执行编译

41
00:03:28,159 --> 00:03:33,959
time, and it produces a program that will be executed at run time And this is to
时间，它会生成一个将在运行时执行的程序，这是为了

42
00:03:33,959 --> 00:03:39,840
help you separate in your mind, and, and to develop a very, firm grip on the idea
帮助你在脑海中分离，并发展出对这个想法非常，坚定的把握

43
00:03:39,840 --> 00:03:43,540
that we have a real division of time in these programs, There's stuff that happens
我们在这些节目中有一个真正的时间划分，有一些事情会发生

44
00:03:43,540 --> 00:03:47,430
inside the compiler, and then there's computation that's deferred until the
在编译器内部，然后有计算被推迟到

45
00:03:47,430 --> 00:03:53,860
program that we are producing, actually executes. All right, now let's look at
我们正在制作的程序，实际上正在执行。好的，现在我们来看一下

46
00:03:53,860 --> 00:03:58,010
another example. Let's, let's take on the addition of two expressions and think
再举一个例子。让我们来看看这两个表达式的加法，然后想一想

47
00:03:58,010 --> 00:04:02,659
about the code that gets generated for that. So, what are we going to do? Well
关于为此生成的代码。那么，我们要做什么呢？井

48
00:04:02,659 --> 00:04:06,549
the first thing that happens when we execute E1+E2 is that we have to compute
当我们执行E1+E2时发生的第一件事是，我们必须计算

49
00:04:06,549 --> 00:04:09,599
the values of the sum expressions, we have to know what integers we're going to add.
求和表达式的值，我们必须知道要加的整数是什么。

50
00:04:09,599 --> 00:04:13,290
So we better generate code for E1. And that's going to happen at com pile time.
所以我们最好为E1生成代码。这将在COM编译时间发生。

51
00:04:13,290 --> 00:04:16,970
We're definitely going to generate that code at compile time. And then, once we've
我们肯定会在编译时生成该代码。然后，一旦我们

52
00:04:16,970 --> 00:04:21,959
got the value of E1, well, remember we only have one, register stack machine, so
得到e1的值，好的，记住我们只有一个，寄存器堆栈机器，所以

53
00:04:21,959 --> 00:04:25,030
we're going to have to save that value somewhere until we also know the value of
我们将不得不将该值保存在某个地方，直到我们也知道

54
00:04:25,030 --> 00:04:28,360
E2 and where we're going to put it. We'll do what we always do; we'll put it on a
E2和我们要把它放在哪里。我们会像往常一样做；我们会把它放在

55
00:04:28,360 --> 00:04:34,470
stack. So, E1 The, the, the code for E1 is guaranteed to leave the value of E1 and
堆栈。所以E1的这个，这个，E1的代码保证离开E1的值，

56
00:04:34,470 --> 00:04:40,750
the accumulator. So what we're going to store the value of E1 onto the stack. And
累加器。所以我们要把E1的值存储到堆栈上。和

57
00:04:40,750 --> 00:04:46,250
we know how to do that. We store A0 onto the stack, and then we have to bump the
我们知道怎么做。我们将A0存储到堆栈中，然后我们必须将

58
00:04:46,250 --> 00:04:53,250
stack pointer. >> And then we can generate code for E2. Okay and again, this stuff in
堆栈指针。>>然后我们就可以为E2生成代码了。好的，再说一遍，这些东西在

59
00:04:54,300 --> 00:04:59,199
blue is a part of the program that will be executed at, at run time. These are calls
蓝色是程序的一部分，将在运行时执行。这些都是电话

60
00:04:59,199 --> 00:05:04,550
to the co-generator that are happening at compile time. And so we generate the code
传递给编译时正在发生的联合生成器。因此我们生成代码

61
00:05:04,550 --> 00:05:09,750
for E2, and then that goes here after this code for pushing the value of E1 on the
对于E2，则在此代码之后将E1的值推送到

62
00:05:09,750 --> 00:05:16,229
stack And once we have the value for E2, now we can perform the add, So how do we
堆栈，一旦我们有了E2的值，现在我们就可以执行加法了，那么我们该如何

63
00:05:16,229 --> 00:05:21,509
do that? Well, first we retrieve the value of E1. So we load the value of E1 Which is
这样做吗？那么，首先我们检索e1的值。所以我们加载e1的值，它是

64
00:05:21,509 --> 00:05:28,069
on the stack. And notice that. This works because E2 is guaranteed the code for E2
在堆栈上。注意这一点。这是可行的，因为向E2保证了E2的代码

65
00:05:28,069 --> 00:05:31,550
is guaranteed to preserve the stack. You know this code for E2 here, and let me
保证保留堆栈。你知道E2的这个密码吗，让我

66
00:05:31,550 --> 00:05:35,710
digress for a moment; this code for E2 can be arbitrarily complicated. This could be
暂时跑题；E2的这段代码可以任意复杂。这可能是

67
00:05:35,710 --> 00:05:39,590
a whole program. It could go call functions. It could allocate data
一个完整的计划。它可以调用函数。它可以分配数据

68
00:05:39,590 --> 00:05:44,130
structures. It could print things out. It could do all kinds of complicated things
结构。它可以把东西打印出来。它可以做各种复杂的事情

69
00:05:44,130 --> 00:05:49,610
But because we have this invariant that all code generation for all expressions
但是因为我们有这个不变量，所有表达式的所有代码生成

70
00:05:49,610 --> 00:05:53,060
will preserve the stack, we know that no matter how complicated this is and how
将保留堆栈，我们知道无论这有多复杂，有多复杂

71
00:05:53,060 --> 00:05:56,919
long it takes. When it's done executing, the stack will be in the same state. And
这需要很长时间。当它完成执行时，堆栈将处于相同的状态。和

72
00:05:56,919 --> 00:06:02,050
that's what allows us to know. Where to find the value of E1 that we stored away
这就是我们能知道的。在哪里可以找到我们存储的e1的值

73
00:06:02,050 --> 00:06:06,080
It's going to be at the top of the stack, Okay, so we load the value B one back into
它将位于堆栈的顶部，好的，所以我们将值B加回到

74
00:06:06,080 --> 00:06:11,840
a temporary register, now we can do the add Okay, so we add T1 and A0 together,
一个临时寄存器，现在我们可以做加法了好的，所以我们把T1和A0加在一起，

75
00:06:11,840 --> 00:06:17,509
and store that back in the accumulator And now we have to pop the stack And now
并将其存储回累加器，现在我们必须弹出堆栈

76
00:06:17,509 --> 00:06:23,630
notice that this is all the code, here, for E1+E2, and when we're done, we've,
注意，这里是E1+E2的所有代码，当我们完成后，我们已经，

77
00:06:23,630 --> 00:06:29,080
established our the value of E1+E2 is in the accumulator. That was established by
建立了我们的E1+E2的值在累加器中。它是由

78
00:06:29,080 --> 00:06:33,560
this instruction. And this pop here restores the state of the stacks. Now, the
这份指示。这里的弹出窗口恢复了堆栈的状态。现在，

79
00:06:33,560 --> 00:06:38,680
state of the stacks here is exactly what it was when we entered this block of code
这里的堆栈状态与我们输入这段挡路代码时的情况一模一样

80
00:06:38,680 --> 00:06:45,680
up here. Now to be completely precise I really should write this code generation
在这上面。现在，完全准确地说，我真的应该编写这个代码生成

81
00:06:46,830 --> 00:06:52,199
function out a slightly different way And that would be like this. So what we're
以一种稍有不同的方式来实现，就像这样。所以我们要做的是

82
00:06:52,199 --> 00:06:56,129
really doing here is we are generating code for E1 and then we're printing out
我们在这里真正做的是为E1生成代码，然后打印输出

83
00:06:56,129 --> 00:07:03,129
into a file or something like that the code to do the push. Okay, and then we
放入文件或类似的文件中，即执行推送的代码。好的，然后我们

84
00:07:04,629 --> 00:07:09,009
generate the code for U2 And now, these calls, the code generation, are also
为U2生成代码，现在，这些调用，代码生成，也

85
00:07:09,009 --> 00:07:12,910
printing in to the same file, okay. So, here, you know, they just printed out
打印到同一个文件，好的。所以，在这里，你知道，他们只是打印出来

86
00:07:12,910 --> 00:07:16,360
the instructions, whatever the instructions are, like security one, this
指令，不管指令是什么，就像安全指令一样，这个

87
00:07:16,360 --> 00:07:21,669
is printing out the code to execute, to do the push. You print out the code to do U2
打印出要执行的代码，进行推送。你打印出做U2的代码

88
00:07:21,669 --> 00:07:26,879
And then, we print out the code to do the ad and the pop Fence. Yes, The add and the
然后，我们打印出做广告和流行围栏的代码。是的，加法和

89
00:07:26,879 --> 00:07:33,120
pop. Okay, and this is just a, this is much more verbose over here, and so I'm
爸爸。好的，这只是一个，这里要冗长得多，所以我

90
00:07:33,120 --> 00:07:37,099
trying to go in and leave out the prints and just indicate in blue the instructions
试着进去，去掉指纹，只用蓝色标明说明书

91
00:07:37,099 --> 00:07:39,740
that are deferred, but I hope you understand what this means. Everything in
但我希望你能理解这意味着什么。里面的所有东西

92
00:07:39,740 --> 00:07:43,259
red here, of course is being done in compile time so you know, we're calling
这里的红色当然是在编译时完成的，所以您知道，我们调用

93
00:07:43,259 --> 00:07:47,490
these co-generation functions a compile time. The print statements are being
这些联合生成函数在编译时执行。打印语句正在

94
00:07:47,490 --> 00:07:51,159
executed in compile time and then we're accumulating somewhere in some data
在编译时执行，然后我们在某些数据中积累

95
00:07:51,159 --> 00:07:56,159
structure or in a file, all the instructions that will be executed at run
结构或文件中，将在运行时执行的所有指令

96
00:07:56,159 --> 00:08:03,159
time. So let's think about a possible optimization to this code. Instead of
时间到了。因此，让我们考虑一下对此代码进行可能的优化。而不是

97
00:08:03,699 --> 00:08:08,060
pushing the result of E1 on the stack, what if we stored the result of E1 in a
将E1的结果推送到堆栈上，如果我们将E1的结果存储在

98
00:08:08,060 --> 00:08:14,110
temporary register T1. What would the code for that look like? >> Well in that world,
临时寄存器T1。它的代码会是什么样子？>>在那个世界里，

99
00:08:14,110 --> 00:08:20,620
to generate code for E1 plus E2, what would we do? We'd generate code for E1 and
要为E1和E2生成代码，我们应该做什么？我们会为E1生成代码，然后

100
00:08:20,620 --> 00:08:24,520
that would be followed now by instead of pushing the result on the stack, we would
现在，我们将不在堆栈上推送结果，而是

101
00:08:24,520 --> 00:08:29,229
take the result of E1, which of course is in the accumul ator A0, we would store it
取E1的结果，它当然在累加器A0中，我们将存储它

102
00:08:29,229 --> 00:08:35,479
in a temporary register And then we would generate code for E2. Alright, that we
在临时寄存器中，然后我们将为E2生成代码。好的，那我们

103
00:08:35,479 --> 00:08:39,730
followed by the code for E2, and then we could just do the add. We would, take the
然后是E2的代码，然后我们就可以做加法了。我们会，拿着

104
00:08:39,730 --> 00:08:45,350
result of E2, which is in the accumulator A0, add it to the contents of T1, and
在累加器A0中的E2的结果，将其与T1的内容相加，并且

105
00:08:45,350 --> 00:08:50,000
store that into the accumulator A0, and of course there's no pushing and popping from
将其存储到累加器A0中，当然不会从

106
00:08:50,000 --> 00:08:54,660
the stack here, so this code preserves the stack, and it looks like, anyway, that it
这里的堆栈，所以这段代码保留了堆栈，不管怎么说，看起来它

107
00:08:54,660 --> 00:09:00,110
actually puts the value of E1 plus E2, into, the accumulator. Unfortunately, this
实际上把E1加E2的值放入累加器。不幸的是，这

108
00:09:00,110 --> 00:09:06,020
code is incorrect, so this is actually wrong, and you don't want to do this And
代码不正确，因此这实际上是错误的，您不希望这样做，并且

109
00:09:06,020 --> 00:09:13,020
to see why, let's consider what would happen. If, E2 Was itself the actually,
要了解原因，让我们来考虑一下会发生什么。如果E2本身就是真正的

110
00:09:15,700 --> 00:09:20,960
let's do it for a concrete example. Let's do the example one plus two Plus three
让我们来做一个具体的例子。让我们来做这个一加二加三的例子

111
00:09:20,960 --> 00:09:27,960
Parenthesize like that, okay. So what's going to happen, so E1 here, so we're
像这样插入，好的。接下来会发生什么，所以E1在这里，所以我们

112
00:09:27,970 --> 00:09:33,150
doing one plus two plus three. So this will be a load immediate, the first, the
做一加二加三。所以这将是一个立即的负载，第一个，

113
00:09:33,150 --> 00:09:40,150
code for E1 will be a load immediate into A0 of the number one. Okay, and then we'll
E1的代码将直接加载到数字1的A0中。好的，然后我们

114
00:09:42,770 --> 00:09:49,770
have the move. We'll try to save that value I, in, temporary register T1. And
开始行动吧。我们将尝试将该值i1保存在临时寄存器t1中。和

115
00:09:52,720 --> 00:09:56,440
now we're going to generate code for E2. And what's E2? Well, E2 is itself, a plus
现在我们将为E2生成代码。那么E2是什么呢？嗯，E2本身就是一个加号

116
00:09:56,440 --> 00:10:00,150
expression. So we're going to recursively call the code generator to generate code
表达式。所以我们将递归调用代码生成器来生成代码

117
00:10:00,150 --> 00:10:07,150
for two+3. So we generate code for the new first, expression. So that will be a
2+3。所以我们为新的第一个表达式生成代码。所以这将是一个

118
00:10:07,260 --> 00:10:14,260
load immediate, into A0 of the value two And now you should be able to
将IMMEDIATE加载到值2的A0中，现在您应该能够

119
00:10:14,650 --> 00:10:20,360
see what's going to go wrong, because. Since this uses the same co-generation
看看会出什么问题，因为。因为这使用相同的热电联产

120
00:10:20,360 --> 00:10:25,880
strategy, it's also going to try to use T-1 to hold the temporary value. So it's
战略，它还将尝试使用T-1来保持临时价值。所以这就是

121
00:10:25,880 --> 00:10:32,650
going to move the accumulator into T-1, thereby clobbering the value of the
将累加器移到T-1，从而重写

122
00:10:32,650 --> 00:10:38,450
previous self expression that we had evaluated, the number one. Okay, so that
我们之前评估过的自我表达，排名第一。好的，那就是说

123
00:10:38,450 --> 00:10:45,450
value's going to be overwritten and then we're going to do and add  And oops I may
值将被覆盖，然后我们将进行加法运算，哦，我可能会

124
00:10:51,190 --> 00:10:54,960
have made a mistake, we're not going to do an ad, let me erase that Forgot to
犯了个错误，我们不做广告了，让我把忘了的抹去吧

125
00:10:54,960 --> 00:11:01,960
generate the code for the three, so now we load the value of three. I, in to the
生成这三个参数的代码，所以现在我们加载值为3。我，在到了

126
00:11:03,170 --> 00:11:10,170
accumulator And now we can do the add, now comes the add And so we do A0 T1 A0 and
累加器，现在我们可以做加法了，现在加法来了，所以我们做A0，T1，A0和

127
00:11:13,570 --> 00:11:19,020
when you execute this what do you get. You get two + three which is five and that's
当你执行这个的时候，你会得到什么。你得到2+3等于5，那就是

128
00:11:19,020 --> 00:11:26,020
fine but now, Now we have the value of this sub expression. In the accumulator
好的，但是现在，我们有了这个子表达式的值。在累加器中

129
00:11:29,110 --> 00:11:33,610
and now ready to do the outer add. So that generates another add instruction. Which
现在可以进行外部加法了。所以这会生成另一条加法指令。哪一个

130
00:11:33,610 --> 00:11:39,560
is exactly the same But unfortunately, the first value of T1, the first temporary we
是完全相同的，但不幸的是，t1的第一个值，第一个临时的

131
00:11:39,560 --> 00:11:43,000
tried to restore has been overwritten And so what's in that, what's in T1 at this
尝试恢复的内容已被覆盖，因此，T1中的内容如下所示

132
00:11:43,000 --> 00:11:50,000
point is the value two, instead of the value one, and we get that one+2+3=7.
point是值2，而不是值1，我们得到1+2+3=7。

133
00:11:51,870 --> 00:11:55,730
Which is not what we wanted And so the problem here of course is that in the
这不是我们想要的，所以这里的问题当然是在

134
00:11:55,730 --> 00:12:00,400
presence of nested expressions, and particularly nested expressions of the
嵌套表达式的存在，特别是

135
00:12:00,400 --> 00:12:05,680
same kind, if the expressions try to use a fixed register for their temporary
如果表达式尝试将固定寄存器用于其临时寄存器，则返回相同类型的

136
00:12:05,680 --> 00:12:09,930
values, then if you try to generate a code for two different expressions that are
值，则如果您尝试为两个不同的表达式生成代码，这两个表达式分别是

137
00:12:09,930 --> 00:12:12,960
nested - sorry two expressions of the same kind that are nested beside each
嵌套-抱歉，每个表达式旁边嵌套了两个相同类型的表达式

138
00:12:12,960 --> 00:12:18,000
other, they will step on each other's temporary intermediate results And so
其他的，他们会踩到对方的临时中间结果，所以

139
00:12:18,000 --> 00:12:24,750
that's why we have to use a stack to store intermediate values. So this example
这就是为什么我们必须使用堆栈来存储中间值。所以这个例子

140
00:12:24,750 --> 00:12:28,710
illustrates a couple of features of code generation that I just want to emphasize.
说明了我只想强调的几个代码生成功能。

141
00:12:28,710 --> 00:12:33,010
First of all, notice that the code for plus is really a template that has holes
首先，注意加号的代码实际上是一个有漏洞的模板

142
00:12:33,010 --> 00:12:38,140
in it for the code, for evaluating E1, E2, that is there are some fixed instructions,
它里面对代码，对E1，E2求值，就是有一些固定的指令，

143
00:12:38,140 --> 00:12:45,140
that we admit And then there are places where we plug in the code for E one and
我们承认，然后在某些地方，我们插入E One的代码，

144
00:12:45,190 --> 00:12:49,170
the code for E two, okay, so that's what I mean by a template, so there's some fixed
E2的代码，好的，这就是我所说的模板，所以有一些固定的

145
00:12:49,170 --> 00:12:53,050
stuff which are the instructions that actually do the ad, and then there's a
这些东西是实际做广告的指令，然后有一个

146
00:12:53,050 --> 00:12:58,130
place where we can just plug directly in, arbitrary code, whatever it is for
我们可以直接插入任意代码的地方，不管它是用来做什么的

147
00:12:58,130 --> 00:13:04,050
implementing E one and E two, and we'll see the same pattern with all the other
实现E1和E2，我们将看到与所有其他的模式相同的模式

148
00:13:04,050 --> 00:13:09,100
kinds of expressions. The other important point is that stack machine code,
各种各样的表情。另一个要点是堆栈机器代码，

149
00:13:09,100 --> 00:13:14,380
generation is recursive. That is you know the code for E1 plus E2 is code for E1 and
生成是递归的。也就是说，E1加E2的代码是E1的代码，

150
00:13:14,380 --> 00:13:17,910
E2 glued together and recursively regenerate code E1 and E2 which will have
E2粘合在一起并递归地重新生成代码E1和E2

151
00:13:17,910 --> 00:13:21,940
their own templates and may even be other expressions of the same kind as we just
它们自己的模板，甚至可能是与我们刚才所说的相同类型的其他表达式

152
00:13:21,940 --> 00:13:27,870
saw And what this means is that code generation can be written as a recursive
这意味着可以将代码生成编写为递归

153
00:13:27,870 --> 00:13:34,870
descent of the abstract syntax tree, at least for the expressions. Alright so
抽象语法树的下降，至少对于表达式是这样。好的，那么

154
00:13:34,930 --> 00:13:40,240
let's consider another new instruction. Let's add the subtraction instruction And
让我们考虑另一条新指令。让我们添加减法指令并

155
00:13:40,240 --> 00:13:44,140
this is just like addition instruction so sub just subtraction to register instead
这就像加法指令一样，所以SUB只需减去寄存器即可

156
00:13:44,140 --> 00:13:50,690
of adding them. And code generation then for subtraction expression as you might
把它们加进去。然后为减法表达式生成代码，就像您可能做的那样

157
00:13:50,690 --> 00:13:54,820
imagine look and awful like code generation for a plus expression. So what
想象一下，加号表达式的代码生成看起来很可怕。那又怎样

158
00:13:54,820 --> 00:14:00,810
do we have first we have a place where we plug in the code for E1. >> Then we have
我们有没有，首先，我们有一个地方，我们把E1的代码插进去。>>那么我们就有

159
00:14:00,810 --> 00:14:05,600
to store the value of E1 on the stack. We have to remember that intermediate result
将E1的值存储在堆栈上。我们必须记住中间结果

160
00:14:05,600 --> 00:14:11,570
And then we can go off and compute the value of E2. So this is where the code for
然后我们就可以开始计算E2的值了。这就是代码的位置

161
00:14:11,570 --> 00:14:17,510
E2 gets plugged in And then at the end, we load the value of E1 back into a temporary
E2接通电源，然后在最后，我们将E1的值加载回临时

162
00:14:17,510 --> 00:14:23,620
register. I actually do the operation, the subtraction, and then pop the stack And
注册。我实际上做了运算，减法，然后弹出堆栈

163
00:14:23,620 --> 00:14:27,820
the thing to do note about this code is that it's exactly the same as the code for
关于此代码需要注意的是，它与

164
00:14:27,820 --> 00:14:32,640
addition except for this instruction right here where we do a subtraction instead of
加法，除了这里的这条指令，我们在这里做减法，而不是

165
00:14:32,640 --> 00:14:32,890
an add.
一个Add。

