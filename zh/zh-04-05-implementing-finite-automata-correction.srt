0
00:00:04,000 --> 00:00:08,200
Welcome back, In this video we're going to wrap up our presentations on lexical
欢迎回来，在这段视频中，我们将结束我们关于词汇的演讲。

1
00:00:08,200 --> 00:00:12,550
analysis with the discussion of how we implement Finite Automata, using a variety
分析和讨论我们如何实现有限自动机，使用各种

2
00:00:12,550 --> 00:00:19,550
of different techniques. Just to review, here's our little flow chart of how
不同的技术。回顾一下，这是我们的小流程图

3
00:00:19,950 --> 00:00:25,119
lexical analyzers are constructed. And today we're going to be focusing on this
构建了词法分析器。今天我们要关注的就是这一点

4
00:00:25,119 --> 00:00:31,859
last step. The implementation of DFA's and actually I should say that this chart is
最后一步。DFA的实现，实际上我应该说这个图表是

5
00:00:31,859 --> 00:00:35,739
not quite completely accurate because sometimes we don't go all the way to
不完全准确，因为有时我们不会一直走到

6
00:00:35,739 --> 00:00:39,960
DFA's. We stop with NFA's and we implement them directly and so we'll talk a little
DFA。我们不再讨论NFA，而是直接实现它们，所以我们会稍微谈一谈

7
00:00:39,960 --> 00:00:44,370
bit about that. What if we didn't want to build a DFA and instead wanted to base our
关于这一点。如果我们不想构建DFA，而是想基于我们的

8
00:00:44,370 --> 00:00:51,370
lexical analyzers directly on an NFA. So, beginning now with DFA's, It's very simple
直接在NFA上使用词法分析器。所以，现在从DFA开始，非常简单

9
00:00:53,510 --> 00:00:59,370
to implement a deterministic finite automaton as an array. There's dimensional
将确定性有限自动机实现为数组。有次元的

10
00:00:59,370 --> 00:01:06,370
array and one of the dimensions will be the state. So we might have states here
数组，其中一个维度将是状态。所以我们这里可能有州

11
00:01:07,070 --> 00:01:14,070
and the other dimension will be the input symbols. And so I might have a state i and
另一个维度将是输入符号。所以我可能有一个状态，我和

12
00:01:17,659 --> 00:01:24,659
then input A and I simply look up in that position and there will be the next state
然后输入A，我只需在该位置上查找，就会有下一个状态

13
00:01:25,170 --> 00:01:32,170
k to which we're going to move. So the table stores at every particular input
我们要移到K。因此，该表在每个特定的输入上都进行存储

14
00:01:32,380 --> 00:01:39,380
symbol and state, the next state that the machine will move to. So, let's do an
符号和状态，机器将移动到的下一个状态。那么，让我们来做一个

15
00:01:41,400 --> 00:01:45,729
example of converting a deterministic automaton into a table driven
将确定性自动机转换为表驱动的示例

16
00:01:45,729 --> 00:01:51,229
implementation so here is the automaton that we built last time and recall that
实现，这是我们上次构建的自动机，回想一下

17
00:01:51,229 --> 00:01:55,180
several videos ago. We started with a regular expression which we convert into a
几个视频之前。我们从正则表达式开始，将其转换为

18
00:01:55,180 --> 00:01:59,649
non-deterministic finite automaton and then we converted it to a deterministic
非确定性有限自动机，然后我们把它转换成确定性的

19
00:01:59,649 --> 00:02:04,450
automaton just in the last video. And here it is again and now let's talk about how
机器人就在最后一段视频里。现在又来了，现在让我们来谈谈如何

20
00:02:04,450 --> 00:02:09,590
to realize it as a table. So draw 2-dimensional table and there are three
把它变成一张桌子。所以画一个二维表有三个

21
00:02:09,590 --> 00:02:16,590
states so we will need three rows. And just label these rows S, T, and U and then
所以我们需要三排。只需将这些行标记为S、T和U，然后

22
00:02:19,260 --> 00:02:25,620
there are two inputs, zero and one and now let's fill in the entries in the table.
有两个输入，0和1，现在让我们填充表中的条目。

23
00:02:25,620 --> 00:02:32,620
So, in state S on input zero, where do we go? We go to state T. So, the entry in the
那么，在输入0的状态S中，我们该去哪里呢？我们去T州。所以，条目中的

24
00:02:33,930 --> 00:02:40,930
S0 entry will be T. And some really from state S input one will wind up in state U.
S0条目将是T，而一些真正来自状态S的输入1将最终到达状态U。

25
00:02:44,629 --> 00:02:51,629
So on so the S1 entry will be U, okay? And then certainly for the other the other
所以S1条目将是U，好吗？当然，对另一个人来说，对另一个人来说

26
00:02:53,099 --> 00:03:00,099
rows of the table let's do the T row next on one we go to U and on zero we stay in
表中的各行，让我们做T行，下一行在1上，我们转到U，在0上，我们留在原地

27
00:03:01,769 --> 00:03:08,769
T. So, this, this row is also TU. And finally for U, what happens well, on zero
T那么这，这一排也是TU。最后，对于你来说，什么是好的，在零的情况下

28
00:03:10,659 --> 00:03:17,659
we go to T and on one we stay in U so this row is also TU and there's our table. That
我们去T，在一，我们留在U，所以这一排也是TU，这是我们的桌子。那

29
00:03:18,830 --> 00:03:24,250
describes the transition relation of the automaton. And now if we would think about
描述了自动机的转移关系。现在如果我们想一想

30
00:03:24,250 --> 00:03:30,940
how we would use this transition relation in a program, you can easily imagine. We
我们将如何在程序中使用这种过渡关系，您可以很容易地想象到。我们

31
00:03:30,940 --> 00:03:37,940
would start out say with our input index. Porting to the beginning of the input and
会从我们的输入索引开始。移植到输入的开头，然后

32
00:03:38,799 --> 00:03:44,129
let's call that zero and we can have to have a current state and we start at the
让我们称它为零，我们必须有一个当前状态，我们从

33
00:03:44,129 --> 00:03:48,879
start state, let's just say that that's row zero so in this case that would be row
开始状态，假设这是第0行，所以在本例中这将是第0行

34
00:03:48,879 --> 00:03:55,879
S. And then while what we wanted to do, we wanted to walk over the input. And check
然后，当我们想要做的时候，我们想要遍历输入。并勾选

35
00:03:58,959 --> 00:04:04,290
whether, and checking on it, you know and make the transitions for each element of
您是否了解并检查，并对每个元素进行转换

36
00:04:04,290 --> 00:04:09,530
the input one at a time and we want to stop when the input is empty. So while
输入一次一个，我们希望在输入为空时停止。所以虽然

37
00:04:09,530 --> 00:04:13,939
there is still as input, let's say we have an array of characters that is our, that
仍然有作为输入的，假设我们有一个字符数组，它是我们的，也就是

38
00:04:13,939 --> 00:04:20,620
is our input and while the entry in that array is not null, let's do the following.
是我们的输入，当该数组中的条目不为空时，让我们执行以下操作。

39
00:04:20,620 --> 00:04:26,770
We're gonna update the state. At each step and what are we gonna update it to let's
我们会更新州政府的最新情况。在每一步，我们要对其进行哪些更新，让我们

40
00:04:26,770 --> 00:04:32,630
give this array a name. Let's call this array A. So, we're gonna look up in our
为此数组指定一个名称。我们称这个数组为A。所以，我们将在我们的

41
00:04:32,630 --> 00:04:37,169
transition relation A and what are we going to use? Well, we're gonna look up
过渡关系A，我们要用什么呢？好的，我们要往上看

42
00:04:37,169 --> 00:04:44,169
the current state, And we're going to look up the input. And in that entry I think,
当前状态，我们将查找输入。我认为在那个词条里，

43
00:04:47,020 --> 00:04:50,120
you know? Using the, the current state and the current input, we're gonna transition
你知道?使用、当前状态和当前输入，我们将转换

44
00:04:50,120 --> 00:04:54,710
to a new state and we also wanted to increment the input pointer. So we'll do
设置为新状态，并且我们还希望递增输入指针。所以我们就这么做

45
00:04:54,710 --> 00:05:01,710
that at the same time. And there is our loop that processes an input according to
在同一时间。还有我们的循环，它根据

46
00:05:04,440 --> 00:05:10,009
the transition table A. And as you can see this is a very compact, very efficient
转换表A，如您所见，这是一个非常紧凑、非常高效的

47
00:05:10,009 --> 00:05:17,009
process. Just really, just a little bit of index arithmetic and one two table look
进程。真的，只需要一点索引算法和一个两个表的查找

48
00:05:17,050 --> 00:05:22,520
ups, one for the input and one for the state transition table per character of
UPS，一个用于输入，另一个用于每个字符的状态转换表

49
00:05:22,520 --> 00:05:26,870
input. So that's really hard to imagine having a process that's much faster or
输入。所以这真的很难想象会有一个更快的过程，或者

50
00:05:26,870 --> 00:05:33,870
more compact than this. Now that was one strategy for implementing a deterministic
比这个更紧凑。这是实现确定性的一种策略

51
00:05:35,699 --> 00:05:40,880
finite automaton and you may have noticed that one disadvantage of that particular
有限自动机，你可能已经注意到它的一个缺点

52
00:05:40,880 --> 00:05:45,570
approach was that there were a lot of duplicate rows in the table. In fact all
方法是表中有很多重复的行。事实上，所有的

53
00:05:45,570 --> 00:05:52,570
the rows of the table were exactly the same and we could save some space by using
表中的行完全相同，我们可以使用以下命令节省一些空间

54
00:05:53,330 --> 00:05:58,940
a slightly different representation. So instead of having a 2-dimensional table,
略有不同的表现。所以不是有一个二维表，

55
00:05:58,940 --> 00:06:05,940
we can just have a 1-dimensional table and this table again. Would be one entry for
我们可以只有一个一维表，然后再有这个表。将是一个条目，用于

56
00:06:07,949 --> 00:06:14,949
each state so S, T, and U. And what this table would contain is a pointer to a
每个状态都是S、T和U，此表将包含一个指向

57
00:06:16,169 --> 00:06:22,789
vector of moves for that particular state. So, there will be a pointer here and it
该特定状态的运动矢量。所以，这里会有一个指针，它

58
00:06:22,789 --> 00:06:28,360
would point to another. Table, another one dimensional table that would say what we
会指向另一个。表格，另一个一维表格，它会告诉我们

59
00:06:28,360 --> 00:06:33,669
should do zero and what we should do on one. So in the case of S, we wanted to
应该做零，我们应该在一上做什么。所以在S的情况下，我们想要

60
00:06:33,669 --> 00:06:40,669
move to state T if it was a zero and to state U if it was a one. And now when we
如果是0，则移至状态T，如果是1，则移至状态U。现在当我们

61
00:06:40,960 --> 00:06:46,100
go to fill in the entry for T, we see we don't need to duplicate this row. We can
去填写T的条目，我们看到我们不需要复制此行。我们可以的

62
00:06:46,100 --> 00:06:50,949
actually just share this row and similarly for U. And so this table, this
实际上只共享此行，对U也是如此，所以这张表，这张

63
00:06:50,949 --> 00:06:54,919
representation is actually much more compact which just share the rows that are
表示实际上要紧凑得多，只是共享

64
00:06:54,919 --> 00:06:59,039
duplicated in the automaton. And it turns out that in the kinds of automata that we
在自动机中复制。事实证明，在自动机的种类中，我们

65
00:06:59,039 --> 00:07:04,139
look at for lexical analysis it's very, very common to have duplicated rows. And
查看词法分析，有重复行是非常、非常常见的。和

66
00:07:04,139 --> 00:07:08,660
so this can actually resolve the significant compaction of the table
因此，这实际上可以解决表的显著压缩问题

67
00:07:08,660 --> 00:07:13,389
particularly when you consider a number of possible states. Remember there could be.
尤其是当你考虑一些可能的状态时。记住可能会有。

68
00:07:13,389 --> 00:07:20,389
To the N - one states in a DFA. For an NFA with end states. And while the blow up is
到DFA中的N-1个状态。对于具有结束状态的NFA。当爆炸发生的时候

69
00:07:26,319 --> 00:07:32,150
often not the worst case it can be very substantial. So the two dimensional table
通常不是最坏的情况，它可以是非常可观的。所以二维表

70
00:07:32,150 --> 00:07:35,569
we had on the, in the previous slide could actually be quite, quite large and we
在上一张幻灯片中，我们拥有的实际上可能非常非常大，而且我们

71
00:07:35,569 --> 00:07:39,940
keep, we can sometimes have a much more compact representation by little tricks
保持，我们有时可以通过一些小技巧得到更紧凑的表示

72
00:07:39,940 --> 00:07:44,610
like this. Now in this advantage of this particular representation is this extra
像这样。在这个特殊表示的优势中，有一个额外的

73
00:07:44,610 --> 00:07:48,470
interaction, right here. I mean these pointers actually take time to the
互动，就在这里。我的意思是，这些指针实际上需要时间来

74
00:07:48,470 --> 00:07:52,759
reference and so now in our loop will be a little bit slower. We, we, we have to do
引用，所以现在在我们的循环中会稍微慢一点。我们，我们，我们必须要做的是

75
00:07:52,759 --> 00:07:56,669
table look up the reference. Pointer do another tab le look up and then we can
表格查找参考资料。指针再做一次制表符检查，然后我们就可以

76
00:07:56,669 --> 00:08:03,669
make the move. Finally, it's also possible that we might not want to convert to a DFA
行动起来。最后，我们也可能不想转换为DFA

77
00:08:05,080 --> 00:08:09,830
at all. It might be that the particular specification we gave is very expensive to
完全没有。可能是我们给出的特殊规格非常昂贵。

78
00:08:09,830 --> 00:08:15,580
turn into a DFA. The table has just become truly huge and we might be better off just
变成了DFA。桌子刚刚变得很大，我们可能会过得更好

79
00:08:15,580 --> 00:08:21,780
using the NFA directly. And so, one can imagine an implementation of an NFA as
直接使用NFA。因此，可以将NFA的实现想象为

80
00:08:21,780 --> 00:08:28,780
well. We can also implement that via a table. In this case, we would have to have
井。我们也可以通过表格来实现这一点。在这种情况下，我们必须有

81
00:08:28,849 --> 00:08:35,849
a row for each state in the NFA. And we won't do them all here. But we could have
NFA中的每个州都有一行。我们不会在这里把它们都做完。但我们本可以

82
00:08:37,760 --> 00:08:42,080
Rows for every state of the NFA and then, you know where we're going to go if the
NFA的每个州都有行，然后，你知道我们要去哪里，如果

83
00:08:42,080 --> 00:08:49,080
input is zero or if the input is one. And so in this case, And I almost forgot we
输入为零，或者如果输入为1。所以在这种情况下，我差点忘了我们

84
00:08:49,110 --> 00:08:52,890
would also need a transition in the most naive or the most straight forward
也需要一个最天真或最直截了当的过渡

85
00:08:52,890 --> 00:08:58,910
implementation of, where we would go if, if an epsilon. And, and now, remember
执行，我们会去哪里，如果，如果一个ε。还有，现在，记住

86
00:08:58,910 --> 00:09:02,950
because these are NFAs in general, this will be a set of states because we might
因为这些通常是NFA，所以这将是一组状态，因为我们可能

87
00:09:02,950 --> 00:09:07,440
have more than one epsilon transition or more than one transition on zero and one.
在0和1上有多个ε跃迁或多个跃迁。

88
00:09:07,440 --> 00:09:14,440
And so, in this case an epsilon A can go to B. So this would be the set of states B
在这种情况下，εA可以到达B，这将是状态B的集合

89
00:09:14,500 --> 00:09:21,500
and B can go To C or D. And C can only go to E and on one, alright. And D can go to
B可以转到C或D，而C只能转到E和1，好吧。而D可以转到

90
00:09:31,720 --> 00:09:38,610
F on and input of zero and so on. We fill in the rest of the table and this table is
F开并输入零，依此类推。我们填了这张表的睡觉，这张表是

91
00:09:38,610 --> 00:09:43,040
guaranteed to be relatively small because the number of states is limited by the
保证相对较小，因为状态数受

92
00:09:43,040 --> 00:09:49,250
number of states in the NFA and the size of the input alphabet. Once again, we
NFA中的状态数和输入字母表的大小。再一次，我们

93
00:09:49,250 --> 00:09:53,360
could do a sharing of common rows and, and other tricks like that to compress the
可以共享公共行和，以及其他类似的技巧来压缩

94
00:09:53,360 --> 00:10:00,360
table if we like. But now, the inner loop for simulating this automaton is gonna be
如果我们喜欢的话就坐在桌子上。但是现在，模拟这个自动机的内部循环将是

95
00:10:01,620 --> 00:10:06,100
much more expensive because we have to deal with sets of states rather than
要贵得多，因为我们必须处理多个州的事务，而不是

96
00:10:06,100 --> 00:10:13,100
single states. So in every point in time where we can be tracking a set of states
单一州。所以在我们可以跟踪一组状态的每一个时间点

97
00:10:13,450 --> 00:10:17,029
and when we're going to do a move, we have to look up for every state in the set
当我们要采取行动时，我们必须查找集合中的每个州

98
00:10:17,029 --> 00:10:22,000
where it can potentially go including things like the epsilon moves and carry
它可能去的地方，包括ε移动和携带的东西

99
00:10:22,000 --> 00:10:25,850
out all possible epsilon moves so we always have an accurate assessment of the
所有可能的epsilon动作，所以我们总是有一个准确的评估

100
00:10:25,850 --> 00:10:31,230
complete set of states if the NFA could reach. So while this sav es a lot of space
如果NFA可以达到的话，是一套完整的州。因此，虽然这节省了大量空间

101
00:10:31,230 --> 00:10:36,630
in terms of the tables, in terms of the size of the tables it can be much slower
就表而言，就表的大小而言，它可能要慢得多

102
00:10:36,630 --> 00:10:43,630
to execute than deterministic automaton. Summarize, a key idea in the
而不是确定性自动机。总结，这是

103
00:10:45,550 --> 00:10:50,500
implementation of lexical specifications is the conversion of nondeterministic
词汇规范的实现是不确定性的转换

104
00:10:50,500 --> 00:10:55,000
finite automaton to deterministic finite automaton. This is what takes a general
从有限自动机到确定性有限自动机。这就是一位将军所需要的

105
00:10:55,000 --> 00:10:59,310
high level specification use of regular expressions and confer to them to
高级规范使用正则表达式，并将其授予

106
00:10:59,310 --> 00:11:05,620
something as completely deterministic and only uses a few operations per input
完全确定性的东西，每个输入只使用几个操作

107
00:11:05,620 --> 00:11:12,620
character. Now, in practice, tools provide tradeoffs between speed and space. So, so
性格。现在，在实践中，工具提供了速度和空间之间的折衷。所以，所以

108
00:11:13,019 --> 00:11:20,019
DFA's are faster And less compact so the tables can be very large and, and at times
DFA速度更快，而且不那么紧凑，因此表可能非常大，而且有时

109
00:11:21,720 --> 00:11:28,720
that's a practical problem and NFAs are slower to, to implement but more concise.
这是一个实际问题，NFA的实现速度较慢，但更简洁。

110
00:11:32,290 --> 00:11:37,320
And the tools give you generally a series of options often in the form of
这些工具通常会为您提供一系列选项，通常是以下形式

111
00:11:37,320 --> 00:11:43,190
configuration files or command lines which is, that allow you to, to choose whether
配置文件或命令行，即允许您选择是否

112
00:11:43,190 --> 00:11:48,649
you want to be closer to a full DFA, something that's faster and perhaps bigger
您希望更接近于完整的DFA，即更快、可能更大的DFA

113
00:11:48,649 --> 00:11:53,230
or to a pure NFAs, something that's slower but consumes less space.
或者是纯NFA，一种速度更慢但占用空间更少的东西。

