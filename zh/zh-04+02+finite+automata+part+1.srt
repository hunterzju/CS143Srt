0
00:00:04,240 --> 00:00:07,879
Welcome back. In this video we're going to talk about finite automata
欢迎回来。在这段视频中，我们将谈论有限自动机

1
00:00:07,879 --> 00:00:11,920
which we'll see in future videos are a good implementation model for regular
我们将在未来的视频中看到，这是一个很好的常规实现模型

2
00:00:11,920 --> 00:00:18,920
expressions. So in the last few videos, we've been talking about regular
表情。在过去的几个视频中，我们一直在谈论常规

3
00:00:19,680 --> 00:00:23,400
expressions which we use as the specification language for lexical
我们用作词法规范语言的表达式

4
00:00:23,400 --> 00:00:27,939
analysis. And, in this video we're gonna start something new. We're gonna talking
分析。在这段视频中，我们将开始一些新的东西。我们要谈谈

5
00:00:27,939 --> 00:00:34,939
about Finite Automata which are the For a convenience as an implementation mechanism
关于作为一种实现机制的方便的有限自动机

6
00:00:35,540 --> 00:00:39,640
for regular expressions. And so regular expressions and finite automaton are very
用于正则表达式。所以正则表达式和有限自动机非常

7
00:00:39,640 --> 00:00:44,909
close related. It turns out that they can specify exactly the same languages called
关系密切。事实证明，它们可以指定完全相同的语言，称为

8
00:00:44,909 --> 00:00:49,019
the regular languages. We won't prove that in this course but we'll certainly make
常规语言。我们不会在本课程中证明这一点，但我们肯定会

9
00:00:49,019 --> 00:00:54,229
use of that fact. So, moving right along, What is a finite automaton? Well, here is
利用这一事实。接下来，什么是有限自动机？嗯，这就是

10
00:00:54,229 --> 00:00:59,729
a typical definition as you might see in a automaton theory textbook. Finite
一个典型的定义，就像你在自动机理论教科书中看到的那样。有限的

11
00:00:59,729 --> 00:01:03,580
automaton consists of an input alphabet. So, it's a set of characters that it can
自动机由一个输入字母组成。所以，它是一组字符，它可以

12
00:01:03,580 --> 00:01:10,580
read. It has this finite set of states. We should probably emphasize that. This is
朗读。它有这个有限的状态集。我们或许应该强调一下这一点。这是

13
00:01:10,619 --> 00:01:15,130
what makes it a finite automaton is that it has some set of states that it can be
它之所以成为有限自动机，是因为它有一组它可以成为的状态

14
00:01:15,130 --> 00:01:19,979
in. One of those states is special and it's designated as the start state. Some
在……里面。其中一个州是特殊的，它被指定为开始州。一些

15
00:01:19,979 --> 00:01:25,090
subset of the states are accepting states so these are the states that. But, well,
这些状态的子集是接受状态，因此这些状态是。但是，好吧，

16
00:01:25,090 --> 00:01:31,469
we'll just find that more in a minute but intuitively, if the automaton terminates,
我们会更直接地发现这一点，但直观地说，如果自动机终止了，

17
00:01:31,469 --> 00:01:34,619
after reading some input on one of these takes that it accepts the input.
在读取其中一个镜头上的一些输入后，它将接受该输入。

18
00:01:34,619 --> 00:01:39,039
Otherwise, it rejects the input and finally the automaton has some set of
否则，它会拒绝输入，最后自动机会有一些

19
00:01:39,039 --> 00:01:42,899
state transitions that is in one state, they can read some input and go to another
处于一种状态的状态转换，它们可以读取一些输入并转到另一种状态

20
00:01:42,899 --> 00:01:49,729
state. So let's look at that little more detail so a transition in a finite
州政府。那么让我们来看一下这个更多的细节，所以有限元数据中的一个转换

21
00:01:49,729 --> 00:01:54,069
automaton. If I'm in, in this case I've written out one particular transition
机器人。如果我进去了，在这种情况下，我写下了一个特殊的过渡

22
00:01:54,069 --> 00:01:59,560
here. We're in state one and we read the input A then, the automaton can move to
这里。我们处于状态1，我们读取输入A，然后，自动机可以移动到

23
00:01:59,560 --> 00:02:04,619
state two, okay. And there could be lots of different transitions for the automaton
第二个州，好的。自动机可能会有很多不同的转变

24
00:02:04,619 --> 00:02:08,910
from different states and different inputs and its read the following way. If we're
从不同的状态和不同的输入及其读取方式如下。如果我们

25
00:02:08,910 --> 00:02:15,910
in state one on input A , we would go to state two. And, if the automaton ends in
在输入A的状态1中，我们会转到状态2。如果自动机以

26
00:02:17,060 --> 00:02:20,620
an accepting state when it gets to the end of the input that is going to do what's
当它到达输入末尾时的接受状态，它将执行以下操作

27
00:02:20,620 --> 00:02:26,030
called accepting the string Meaning that it will say yes, That string was in the
调用接受字符串，表示它将回答“是”，则该字符串位于

28
00:02:26,030 --> 00:02:31,730
language of this machine. So intuitively the automaton starts in the start state and
此计算机的语言。因此，直观地说，自动机在启动状态下启动，

29
00:02:31,730 --> 00:02:37,330
it repeatedly reads inputs one input character at a time makes a transition. So
它重复读取输入，一次一个输入字符进行转换。所以

30
00:02:37,330 --> 00:02:41,060
it'll see what kind of transition it can make out of its current state based on
它将看到它可以根据以下条件对其当前状态进行哪种类型的转换

31
00:02:41,060 --> 00:02:45,820
that input to another state and if that's done ringing the input it's in one of the
该输入转到另一个状态，如果该输入已完成振铃，则它处于

32
00:02:45,820 --> 00:02:52,120
final states that it will accept. Otherwise is going to reject the input.
它将接受的最终状态。否则将拒绝输入。

33
00:02:52,120 --> 00:02:59,120
Now, one of the situations in which it rejects, well, if it terminates In a state
现在，它拒绝的一种情况是，如果它在一种状态下终止

34
00:03:00,450 --> 00:03:07,450
S, that's no one of the final or accepting states, okay? So that ends in any other
S，那不是最终的或接受的状态，好吗？所以它在任何其他地方都会结束

35
00:03:08,760 --> 00:03:13,150
state besides one of the accepting states and it's going to reject. If the machine
除了其中一个接受州之外的州，它将予以拒绝。如果机器

36
00:03:13,150 --> 00:03:20,150
gets stuck, Meaning it finds itself in a state and there's no transition of that
被卡住了，这意味着它发现自己处于一种状态，而不是这种状态的转换

37
00:03:20,480 --> 00:03:25,010
state on the input. So in particular, let's say that in some state as a news and
输入上的状态。所以特别是，让我们说，在某些州，作为一条新闻和

38
00:03:25,010 --> 00:03:29,360
the input is A, and there's no transition. There's no transition specified per state
输入是A，没有转换。没有为每个州指定转换

39
00:03:29,360 --> 00:03:33,890
as an input A so the machine can't move anywhere and it get stuck and that's also
作为输入A，所以机器不能移动，它卡住了，这也是

40
00:03:33,890 --> 00:03:39,210
a rejecting state. And so in these two situations, if, if you either get to the
被拒绝的状态。所以在这两种情况下，如果你到了

41
00:03:39,210 --> 00:03:44,080
end of the input and it's not in a final state or. If it never reaches the end of
输入结束，并且它不处于最终状态或。如果它永远不会到达

42
00:03:44,080 --> 00:03:47,860
the input because it can stuck and both of those cases it rejects the string. That
输入，因为它可能会卡住，并且这两种情况都会拒绝字符串。那

43
00:03:47,860 --> 00:03:54,860
string is not in the language of the finite automaton. Now there's an
字符串不是有限自动机的语言。现在有一个

44
00:03:55,600 --> 00:03:59,720
alternative notation for Finite Automata that I think is more intuitive for
有限自动机的另一种表示法，我认为它对

45
00:03:59,720 --> 00:04:05,130
examples and so we're going to emphasize that way of writing the mount. In this
示例，所以我们将强调这种方式来编写坐骑。在这里面

46
00:04:05,130 --> 00:04:10,870
notation a state is represented as a known graph which just draws a big circle. The
一个状态被表示为一个已知的图，它只画了一个大圆圈。这个

47
00:04:10,870 --> 00:04:17,530
start state is represented as a node that has an edge or an arrow into it with no
开始状态表示为带有边或箭头的节点，其中没有

48
00:04:17,529 --> 00:04:24,139
source. So, this is a transition into the node but no source node that it comes from
消息来源。因此，这是到节点的转换，但不是它所来自的源节点

49
00:04:24,139 --> 00:04:29,120
and that indicates the unique start state. An accepting state is drawn as a node wit
这表明了唯一的启动状态。将接受状态绘制为具有

50
00:04:29,120 --> 00:04:33,699
h just double circles like this. And finally a transition is drawn as an edge
就像这样画两个圆圈。最后，将过渡绘制为一条边

51
00:04:33,699 --> 00:04:38,819
between two nodes of the graph. So with this as the time in this state that I'm
在图形的两个节点之间。所以现在是我在这个状态的时候

52
00:04:38,819 --> 00:04:44,580
circling in blue and I read the input a well then I can move to this state at, at
在蓝色中圈圈，然后我读取输入，然后我可以移动到这个状态，在，

53
00:04:44,580 --> 00:04:51,580
the tail of the arrow. So now, let's do a simple example. Let's try to write up the
箭头的尾巴。现在，让我们来做一个简单的例子。让我们试着写下

54
00:04:53,229 --> 00:05:00,229
automaton that accepts only the single digit one. So all we need is start state.
只接受一位数的自动机。所以我们所需要的就是开始状态。

55
00:05:01,080 --> 00:05:07,249
And will probably want an accepting state as well and now the questions is what do
可能也想要一个接受状态，现在的问题是做什么

56
00:05:07,249 --> 00:05:10,560
we put in between the two? Well, there would be some kind of transition here and
我们把它放在这两个中间？嗯，这里会有某种形式的过渡，

57
00:05:10,560 --> 00:05:16,050
it's a good guess that we should take that transition if the machine reads the one.
这是一个很好的猜测，如果机器读取了1，我们就应该进行转换。

58
00:05:16,050 --> 00:05:21,319
Now let me take a moment here to talk about how the machine executes so let's
现在让我花一点时间来谈谈机器是如何执行的，所以让我们

59
00:05:21,319 --> 00:05:28,319
label these states. Let's call this state a and let's call this state b, okay. So
给这些州贴上标签。让我们称这个状态为a，让我们称这个状态为b，好的。所以

60
00:05:29,629 --> 00:05:35,889
the machine will have some input. Okay, and we can write that input out will be
这台机器会有一些输入。好的，我们可以把输入写成

61
00:05:35,889 --> 00:05:39,099
here. So let's just say, we have the single character one and it begins in some
这里。这么说吧，我们有一个单一的字符，它开始于一些

62
00:05:39,099 --> 00:05:43,779
state namely the start state. And so, one configuration of the machine is the state
状态，即开始状态。因此，机器的一种配置是状态

63
00:05:43,779 --> 00:05:50,779
that it is in And the input. And typically we would indicate where it is in the input
它在里面，输入。通常，我们会指出它在输入中的位置

64
00:05:51,729 --> 00:05:56,099
by just a pointers saying what position it is in the input. And, the important thing
只需一个指针就能说出它在输入中的位置。而且，重要的是

65
00:05:56,099 --> 00:06:01,969
to know about input in [inaudible] the input pointer always advances. So, when
要了解[听不见]中的输入情况，输入指针总是向前移动。那么，什么时候

66
00:06:01,969 --> 00:06:06,499
we, or it only advances so when we read a character input, the input pointer moves
我们或它只是前进，所以当我们读取字符输入时，输入指针会移动

67
00:06:06,499 --> 00:06:12,469
to the right and it never moves back. Alright, So from state a, we have a rule.
到了右边，它就再也不会向后移动了。好的，那么从A州来看，我们有一条规则。

68
00:06:12,469 --> 00:06:16,479
We can see that we're in state a. The next input character is a one and that allows
我们可以看到我们处于状态a。下一个输入字符是1，这允许

69
00:06:16,479 --> 00:06:22,870
us to take a transition to state b and so now where b in state b and where as our
我们要过渡到状态b，那么现在b在状态b中的什么位置，在哪里是我们的

70
00:06:22,870 --> 00:06:25,979
input point well it's beyond the end of the input indicating we are at the end of
输入点好的，它超出了输入的末尾，表明我们已经到了末尾

71
00:06:25,979 --> 00:06:32,789
the input. And so now this is. We are in an accepting state and we pass the end of
输入。所以现在就是这样。我们正处于接受状态，我们已经过了

72
00:06:32,789 --> 00:06:39,789
the input and so we accept. Okay? So let's, do another execution. So we start
输入，所以我们接受。好吧?所以，让我们再执行一次死刑。所以我们开始

73
00:06:42,059 --> 00:06:49,059
in state a and let's take as our input the string zero. Okay. And I'd like to draw
在状态a中，让我们把字符串0作为我们的输入。好吧。我想画一幅画

74
00:06:50,659 --> 00:06:54,599
the pointer. Actually I should have drawn it before the input so we'll al ways put
指针。实际上，我应该在输入之前画出来，所以我们总是会把它

75
00:06:54,599 --> 00:07:00,659
the pointer between two input elements. In this case it's a merely to the left of the
两个输入元素之间的指针。在本例中，它仅位于

76
00:07:00,659 --> 00:07:05,509
one we're about to read. So in this case we're about read zero so in state a. Our
一本我们即将读到的书。所以在这种情况下，我们的读数大约是零，所以在状态a。我们的

77
00:07:05,509 --> 00:07:10,759
input is zero. We look at our machine. We see that there is no transition on zero.
输入为零。我们看着我们的机器。我们看到在零上没有过渡。

78
00:07:10,759 --> 00:07:16,129
All right? And so the machine stays stuck. It doesn't make any move at all and this
好的?于是机器就卡住了。它一点动作都没有，而这个

79
00:07:16,129 --> 00:07:21,569
is our final configuration. And we could see that we're not at the end of the input
是我们的最终配置。我们可以看到，我们不是在输入的末尾

80
00:07:21,569 --> 00:07:28,569
and so this is a reject. Okay, so in this case the machine rejects that string as
所以这就是拒绝。好的，在这种情况下，机器拒绝该字符串为

81
00:07:29,860 --> 00:07:35,949
not being in the language of the machine. Let's do one more example. Let's say that
没有使用机器的语言。让我们再做一个例子。我们就这么说吧

82
00:07:35,949 --> 00:07:40,819
we're in state, well we're always beginning in state a and the start state,
我们处于状态，我们总是从状态a和开始状态开始，

83
00:07:40,819 --> 00:07:47,819
and let's say our input this time is the string ten, okay? And our input pointer is
假设我们这次的输入是字符串10，好吗？我们的输入指针是

84
00:07:47,839 --> 00:07:54,839
there. All right? So again we're in state a. The input is a one and so we'll move to
那里。好的?所以我们再一次处于状态a。输入是1，所以我们将转移到

85
00:07:55,520 --> 00:08:00,809
state b. And now the input doesn't change. Just the input point changes but I'll just
状态b，现在输入不变。只是输入点发生了变化，但我只是

86
00:08:00,809 --> 00:08:04,589
copy the input over to show the difference. Now the input pointer has
将输入复制过来以显示差异。现在输入指针已经

87
00:08:04,589 --> 00:08:10,389
advanced cuz we've read one character of input and now we're in another state. And
高级，因为我们已经读取了输入的一个字符，现在我们处于另一个状态。和

88
00:08:10,389 --> 00:08:17,080
now we can see that we're in state b. Our next input is zero and there is no
现在我们可以看到我们处于状态b。我们的下一个输入是零，没有

89
00:08:17,080 --> 00:08:23,150
transition on zero from state b and so even though we're in an accepting state, b
从状态b到0的转换，所以即使我们处于接受状态

90
00:08:23,150 --> 00:08:26,999
as a final state, it's one of the accept state and we haven't consumed the entire
作为最终状态，它是接受状态之一，我们没有消耗整个

91
00:08:26,999 --> 00:08:32,490
input. And so this, The machine also rejects this string so this is also a
输入。所以这个，机器也会拒绝这个字符串，所以这也是一个

92
00:08:32,490 --> 00:08:39,490
reject. And in general we can talk about the language. Of a finite automata that is
拒绝。一般说来，我们可以谈论语言。是一个有限自动机的集合，也就是

93
00:08:43,360 --> 00:08:50,360
equal to the set of...accepted strings. Okay? So the language of a finite
等于.接受的字符串集合。好吧?所以有限定词的语言

94
00:08:57,570 --> 00:09:00,320
automaton, when I'm talking about the language of a finite automaton, I mean the
自动机，当我谈论有限自动机的语言时，我的意思是

95
00:09:00,320 --> 00:09:06,959
set of strings that the automaton accepts. So now let's do a more complex example.
自动机接受的一组字符串。现在让我们来做一个更复杂的例子。

96
00:09:06,959 --> 00:09:11,779
Let's try to write out an automaton that accepts any number of one followed by a
让我们试着写出一个自动机，它接受任何数字的1，后跟一个

97
00:09:11,779 --> 00:09:18,779
single zero. So once again well need a start state and we'll also need a final
一个零。所以我们再一次需要一个开始状态，我们还需要一个决赛

98
00:09:19,250 --> 00:09:25,490
state and now let's start by thinking about what's the shortest string is that's
现在让我们先来考虑一下最短的字符串是什么

99
00:09:25,490 --> 00:09:30,690
in the language of this machine. So in this case, we know it has to end in a
用这台机器的语言。所以在这种情况下，我们知道它必须以

100
00:09:30,690 --> 00:09:35,630
singl e zero. So a zero definitely has to be, a zero transition has to be the last
单数为零。所以肯定必须是零，零转换必须是最后一个

101
00:09:35,630 --> 00:09:41,350
move and before that zero can come any number of what? In a particular there
移动，在那个零之前可以出现任意数量的什么？在那里的一个特殊情况下

102
00:09:41,350 --> 00:09:48,180
could be no 1's. So one transition in this machine is that from start state on input
可以是1。所以这台机器中的一个转换是从输入时的启动状态

103
00:09:48,180 --> 00:09:52,649
zero we can definitely go to the final state because the single string consisting
我们绝对可以进入最后的状态，因为单个字符串包含

104
00:09:52,649 --> 00:09:56,220
of a single zero isn't the language of this machine. And now the only question is
不是这台机器的语言。现在唯一的问题是

105
00:09:56,220 --> 00:10:01,310
how do we encode the fact that any number of 1's can proceed to zero? Well, there is
我们如何编码任意数量的1都可以归零这一事实呢？嗯，有一个

106
00:10:01,310 --> 00:10:07,569
an easy way to do that. We can just add a [inaudible] by the start state. And take
要做到这一点很简单。我们只需在开始状态旁添加[听不见]即可。然后拿走

107
00:10:07,569 --> 00:10:11,190
that transition if we read at one. And what does this mean? This means that we'll
如果我们在一点读的话就是过渡。这意味着什么呢？这意味着我们将

108
00:10:11,190 --> 00:10:14,519
stay in the state, state as longer are we're reading 1's and as soon as we read
停留在状态中，状态越长，我们读1的时间越长，一旦我们读到

109
00:10:14,519 --> 00:10:18,639
zero, we'll move to the final state because that has to be the end of the
0，我们将移动到最终状态，因为那必须是

110
00:10:18,639 --> 00:10:25,139
string if the machine is going to accept it. So let's do a couple of examples to
如果计算机要接受它，则为字符串。那么让我们举几个例子来说明

111
00:10:25,139 --> 00:10:29,440
convince ourselves that this works. Let me label this state?s again. So this is state
说服自己这是可行的。让我再给这个州贴上标签。所以这就是州政府

112
00:10:29,440 --> 00:10:36,440
a, and that's stat b. So Let's write out here states and input. So we'll begin in
这就是统计数据b，所以我们在这里写出状态和输入。所以我们要开始了

113
00:10:41,670 --> 00:10:48,670
state a and let's take as input 110, okay. So let's do an accepting case first. All
声明a，让我们将其作为输入110，好的。所以让我们先做一个受理案例。全

114
00:10:50,579 --> 00:10:55,690
right, So our input pointer begins to the left of the first character. So, we're in
向右，所以我们的输入指针开始于第一个字符的左侧。所以，我们加入了

115
00:10:55,690 --> 00:10:59,540
state a in start state. We're reading a one and that says we should take a
状态A处于开始状态。我们在读一本书，上面说我们应该

116
00:10:59,540 --> 00:11:05,230
transition that puts us back in state a. And so, we advance the input pointer. And
让我们回到状态a的转换，所以我们前进输入指针。和

117
00:11:05,230 --> 00:11:09,920
now we consume the first one and, and again we're in state a and the next input
现在我们消费第一个，然后再一次处于状态a，下一个输入

118
00:11:09,920 --> 00:11:16,110
is a one so we'll make another transition to state a. And the input cleaner will
是1，所以我们将再次转换到状态a。输入清理器将

119
00:11:16,110 --> 00:11:21,980
advance. So now we're in state a and the next input is a zero and so we'll take the
前进。现在我们处于状态a，下一个输入是零，所以我们将

120
00:11:21,980 --> 00:11:27,709
transition to b and now in this configuration, so the input pointer has
转换为b，现在在此配置中，因此输入指针具有

121
00:11:27,709 --> 00:11:32,759
reached the end of the input we're in an accepting state and so the machine
到达输入的末尾时，我们处于接受状态，因此机器

122
00:11:32,759 --> 00:11:39,759
accepts. 110 is in the language of this machine. So now let's do an example where
接受。110是这台机器的语言。现在让我们来做一个例子，其中

123
00:11:41,060 --> 00:11:47,829
we will reject the input. And what configuration do we begin in and again a
我们将拒绝输入。我们从什么配置开始，一次又一次地

124
00:11:47,829 --> 00:11:52,480
configuration for a finite automaton that just means you know a point in the
有限自动机的配置，这意味着您知道

125
00:11:52,480 --> 00:11:58,550
execution it alwa ys consist of a state and a position of the, the input pointer.
它的执行还包括输入指针的状态和位置。

126
00:11:58,550 --> 00:12:03,949
So our initial state is a and now let's just choose the string. I don't know,
所以我们的初始状态是a，现在让我们选择字符串。我不知道,

127
00:12:03,949 --> 00:12:10,949
let's take 100 and let's confirm that this is not in the language of the machine. All
让我们取100，让我们确认这不是机器的语言。全

128
00:12:11,310 --> 00:12:16,819
right, So we begin in state a and our input pointer is there. Now we read a one
好的，我们从状态a开始，我们的输入指针在那里。现在我们读一首“一”

129
00:12:16,819 --> 00:12:21,350
and that means, well, you know. So it's from state a transition of one. We stay in
这意味着，嗯，你知道的。所以这是从州到州的一个转变。我们呆在家里

130
00:12:21,350 --> 00:12:27,209
state a and the input pointer advances. And now we see a zero. So from state a and
状态A并且输入指针前进。现在我们看到的是零。所以从a州和

131
00:12:27,209 --> 00:12:34,209
input zero, we make a transition to state b. And now the input point is here so now,
输入0，我们转换到状态b，现在输入点在这里，

132
00:12:35,449 --> 00:12:41,029
we're in state b and we have an input of zero but there is no transition the b and
我们处于状态b，输入为0，但是b和b之间没有转换

133
00:12:41,029 --> 00:12:45,829
zero, there are no transitions out of b at all and so the machine gets stuck, it
零，没有从b转出，所以机器卡住了，它

134
00:12:45,829 --> 00:12:49,019
can't get to the en of the input and again, even though we're in an accepting
无法再一次到达输入的EN，即使我们正在接受

135
00:12:49,019 --> 00:12:54,329
state we haven't read the entire input yet and so that means the machine will reject.
声明我们还没有读完整个输入，所以这意味着机器会拒绝。

136
00:12:54,329 --> 00:12:58,480
And so, 100 is not in the language of this machine.
因此，100不是这台机器的语言。

