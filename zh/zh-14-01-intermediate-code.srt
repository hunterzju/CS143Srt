0
00:00:04,210 --> 00:00:07,480
In this video I'm going to give a very brief introduction to Intermediate Code
在这段视频中，我将非常简要地介绍中间代码

1
00:00:07,480 --> 00:00:14,480
and its use in compilers. So the first question to address is, what is
以及它在编译器中的使用。所以第一个要解决的问题是，什么是

2
00:00:15,730 --> 00:00:20,210
Intermediate Code or an Intermediate Language? And as the name suggests, an
中间代码还是中间语言？顾名思义，一个

3
00:00:20,210 --> 00:00:24,430
Intermediate Language is just that, it's a language that's intermediate between the
中间语言就是这样，它是介于两种语言之间的一种语言

4
00:00:24,430 --> 00:00:29,860
source language and the target language. So, keep in mind what a compiler does. So
源语言和目标语言。因此，请记住编译器的作用。所以

5
00:00:29,860 --> 00:00:36,350
a compiler takes a program written in some source language. And, it provides a
编译器接受用某种源语言编写的程序。而且，它还提供了一个

6
00:00:36,350 --> 00:00:43,350
translation of that program into some target language And so in this class, for
将程序翻译成某种目标语言，因此在这个类中，

7
00:00:43,739 --> 00:00:48,379
example, where often our source language is cool and our target language is mixed
例如，我们的源语言通常很酷，而我们的目标语言是混合的

8
00:00:48,379 --> 00:00:54,109
assembly code. Now, an Intermediate Language actually lives in between these
汇编代码。现在，一种中间语言实际上存在于这两种语言之间

9
00:00:54,109 --> 00:00:58,600
two and a compiler that uses an Intermediate Language will first translate
两个和使用中间语言的编译器将首先翻译

10
00:00:58,600 --> 00:01:02,969
its source language into the Intermediate Language and then later translate the
将其源语言转换为中间语言，然后再将

11
00:01:02,969 --> 00:01:08,299
intermediate the code in the Intermediate Language into the target language. And you
将中间语言的代码转换为目标语言。而你

12
00:01:08,299 --> 00:01:14,030
might wonder, well why make life so difficult? Why when, why do something in
你可能会想，为什么要让生活变得如此艰难呢？为什么什么时候，为什么要在

13
00:01:14,030 --> 00:01:20,060
two steps if you can do in one step? And it turns out that for many purposes this
如果你能在一步内完成两步的话？事实证明，出于很多目的，这个

14
00:01:20,060 --> 00:01:25,829
intermediate level here is actually quite useful precisely because it provides an
这里的中间级别实际上非常有用，因为它提供了一个

15
00:01:25,829 --> 00:01:30,790
intermediate level of abstraction. So, in particular, the intermediate level may
中间抽象级别。因此，具体地说，中间级别可以

16
00:01:30,790 --> 00:01:37,689
have more details in it than the source language. So for example, if we want to
比源语言有更多的细节。例如，如果我们想要

17
00:01:37,689 --> 00:01:43,170
optimize register usage you know, a source language like Cool has no notion of
优化寄存器使用您知道，像Cool这样的源语言没有

18
00:01:43,170 --> 00:01:47,799
registers at the source level, and so there's no way to even express the kinds
寄存器在源代码级别，因此甚至无法表示类型

19
00:01:47,799 --> 00:01:51,420
of optimizations you might want to do with registers. So an Intermediate Language
您可能想要对寄存器进行的优化。所以一种中间语言

20
00:01:51,420 --> 00:01:55,869
that exposes that at that amount of detail, at least have registers in it will
这表明，在如此详细的情况下，至少在其中有寄存器将

21
00:01:55,869 --> 00:02:01,820
allow you to talk about and, and write algorithms that could try to improve the
允许您讨论和，并编写算法来尝试改进

22
00:02:01,820 --> 00:02:06,009
use of registers in the program. On the other hand, the Intermediate Language
程序中寄存器的使用。另一方面，中间语言

23
00:02:06,009 --> 00:02:10,979
which will also have fewer details than the target. And so it might be for
它的细节也会比目标的少。所以可能是因为

24
00:02:10,979 --> 00:02:14,890
example, if the Intermediate Language is a little bit above the level of the parti
例如，如果中间语言略高于部件级别

25
00:02:14,890 --> 00:02:18,940
cular instruction set of a particular machine, and therefore it's easier to
特定机器的循环指令集，因此更容易

26
00:02:18,940 --> 00:02:23,330
retarget that, that intermediate level of code to lots of different kinds of
将中间代码级别重定目标为许多不同类型

27
00:02:23,330 --> 00:02:27,920
machines. Precisely because doesn't have all the grubby details in a, of a
机器。正是因为没有把所有肮脏的细节都放在一个，一个

28
00:02:27,920 --> 00:02:32,650
particular machine. And, experience has shown, that this is actually a pretty good
特别的机器。而且，经验表明，这实际上是一个相当好的

29
00:02:32,650 --> 00:02:37,300
idea to have Intermediate Language. And, almost all compilers have an Intermediate
拥有中级语言的想法。而且，几乎所有的编译器都有一个中间

30
00:02:37,300 --> 00:02:40,610
Language. I, In fact, in their implementation and some compilers have
语言。事实上，我在它们的实现中和一些编译器已经

31
00:02:40,610 --> 00:02:45,420
more than one. Some compilers actually translate through an entire the series of
不止一个。一些编译器实际上将整个系列的

32
00:02:45,420 --> 00:02:49,590
Intermediate Languages between the source and target language. Now we're only going
源语言和目标语言之间的中间语言。现在我们只去

33
00:02:49,590 --> 00:02:56,010
to consider one Intermediate Language for the rest of this course. The kind of
考虑使用一种中级语言作为本课程的“睡觉”。就是那种

34
00:02:56,010 --> 00:02:59,600
Intermediate Language which we're going to look at is going to be a high level
我们将要看到的中级语言将是一个高级语言

35
00:02:59,600 --> 00:03:04,100
assembly. And so, as I suggested on the previous slide, this language is going to
集合。因此，正如我在上一张幻灯片中所建议的，这种语言将

36
00:03:04,100 --> 00:03:07,980
use register names but it will have an unlimited number, so we can use any number
使用寄存器名称，但它的数量不受限制，因此我们可以使用任何数字

37
00:03:07,980 --> 00:03:13,950
of registers that we like. We're not bound to 32 or 64 registers. The control
我们喜欢的寄存器。我们不受32或64个寄存器的限制。该控件

38
00:03:13,950 --> 00:03:17,450
structures will look a lot like assembly language. In particular, there will be
结构看起来很像汇编语言。特别是，将会有

39
00:03:17,450 --> 00:03:24,130
explicit jumps and labels on instructions. And the language will also have op codes
指令上的显式跳转和标签。并且该语言还将具有操作码

40
00:03:24,130 --> 00:03:27,630
in it so it'll look like assembly language level op codes. But some of these op codes
这样看起来就像汇编语言级别的操作码。但是这些操作码中的一些

41
00:03:27,630 --> 00:03:32,510
will be higher level. So for example, we might have an op code called Push. And
会有更高的水平。例如，我们可能有一个名为PUSH的操作码。和

42
00:03:32,510 --> 00:03:37,260
Push would end up translating into several concrete assembly language instructions
Push最终会翻译成几条具体的汇编语言指令

43
00:03:37,260 --> 00:03:43,510
for a particular target machine. In the intermediate code that we'll be looking
用于特定的目标计算机。在我们将要查看的中间代码中

44
00:03:43,510 --> 00:03:48,180
at, every instruction will have one of two forms. It will either be a binary
在，每个指令将有两种形式中的一种。它将是一个二进制

45
00:03:48,180 --> 00:03:53,930
operation, or it will be a unary operation. And always the arguments on the
操作，否则将是一元操作。而且总是关于

46
00:03:53,930 --> 00:03:58,700
right hand side, in this case the y and the z, will be either registers or
右侧(在本例中为y和z)将是寄存器或

47
00:03:58,700 --> 00:04:04,200
constants. They could also be immediate values. And this is a very, very common
常量。它们也可能是直接的价值。这是一种非常非常普遍的

48
00:04:04,200 --> 00:04:09,290
form of Intermediate Code, so widely used, and so widely used it actually has a name.
中间代码的形式，如此广泛的使用，如此广泛的使用，它实际上是有一个名字的。

49
00:04:09,290 --> 00:04:16,290
It's called Three Address Code because every instruction has at most three
它被称为三个地址码，因为每条指令最多有三个

50
00:04:17,279 --> 00:04:21,139
addresses in it. Two arguments, at most two arguments and then a destination. Now,
地址在里面。两个参数，最多两个参数，然后是目的地。现在,

51
00:04:21,139 --> 00:04:28,139
to see that this code is actually low level notice that you know, higher level
要看到这段代码实际上是低级别的，请注意，更高级别

52
00:04:30,800 --> 00:04:35,129
expressions that involve multiple operations will have to be translated into
涉及多个操作的表达式必须转换为

53
00:04:35,129 --> 00:04:40,139
a sequence of instructions that do only one operation at a time. So, for example,
一次只执行一个操作的指令序列。所以，举个例子，

54
00:04:40,139 --> 00:04:46,900
if I have the expression, x = sorry, x + y z, and let me put in parens here to show
如果我有这样的表达式，x=抱歉，x+yz，让我在这里加上括号来表示

55
00:04:46,900 --> 00:04:51,139
the association. So the times binds more tightly than the plus, we're going to have
协会。所以时间比正数更紧密地联系在一起，我们将会有

56
00:04:51,139 --> 00:04:55,620
to, this can't be written directly in an intermediate , language of this form.
所以，这不能直接用这种形式的中级语言来写。

57
00:04:55,620 --> 00:04:58,289
Instead, we would have to write it something like the following. We have to
取而代之的是，我们必须将其写成如下所示。我们必须得

58
00:04:58,289 --> 00:05:04,689
first compute y z and assign that to a new register or a temporary or you know, a
首先计算y z，并将其分配给新寄存器或临时寄存器，或者您知道的，a

59
00:05:04,689 --> 00:05:11,249
new register t1 to hold the intermediate value. And then we would have to use t1 to
保存中间值的新寄存器T1。然后我们必须使用T1来

60
00:05:11,249 --> 00:05:15,120
compute x + t1, which of course is the value of the entire expression and that
计算x+t1，这当然是整个表达式的值，

61
00:05:15,120 --> 00:05:20,530
would end up getting stored in another register. I noticed that one effect of
最终会被存储在另一个寄存器中。我注意到一个效果是

62
00:05:20,530 --> 00:05:25,599
forcing you to use only one operation at a time. You see, you do one primitive
迫使您一次只能使用一个操作。你看，你做一个原始的

63
00:05:25,599 --> 00:05:29,650
operation at time and then the result of that has to be restored in a register. One
操作，然后其结果必须在寄存器中恢复。一

64
00:05:29,650 --> 00:05:34,560
effect of that is to give every subexpression of the program a name. So,
这样做的效果是给程序的每个子表达式一个名称。所以,

65
00:05:34,560 --> 00:05:41,009
if I look back at this expression here, I see you know, like y z is anonymous.
如果我回过头来看这个表达式，你知道，就像yz是匿名的。

66
00:05:41,009 --> 00:05:47,270
That in this expression x + y 'lt;i>z the expression y 'lt;/i> z itself doesn't have a
在这个表达式x+y‘lt；i>z中，表达式y’lt；/i>z本身没有

67
00:05:47,270 --> 00:05:52,090
name. And by rewriting it like this, I actually name that intermediate result. So
名字。通过这样重写，我实际上给中间结果命名了。所以

68
00:05:52,090 --> 00:05:59,090
again just to summarize this point, one consequence of having to write out
再次总结一下这一点，不得不写下

69
00:05:59,270 --> 00:06:04,430
compound expressions as a sequence of instructions that do a single operation in
复合表达式作为一系列指令，在

70
00:06:04,430 --> 00:06:11,430
time is that every intermediate value will be given its own name. Generating
时间是，每个中间值都将被赋予自己的名称。正在生成

71
00:06:12,009 --> 00:06:16,749
Intermediate Code is very similar to generating assembly code and we're not
中间代码非常类似于生成汇编代码，而我们不是

72
00:06:16,749 --> 00:06:19,879
going to go into this in any detail because it is so similar. But I will
我将详细介绍这一点，因为它们是如此相似。但我会的

73
00:06:19,879 --> 00:06:25,240
sketch it for you, you know, briefly. The main difference between generating
给你画个草图，你知道的，很简短。生成和生成之间的主要区别是

74
00:06:25,240 --> 00:06:30,379
assembly code and generating intermediate code is that we can use any number of
汇编代码和生成中间代码是我们可以使用任意数量的

75
00:06:30,379 --> 00:06:37,379
registers in the Intermediate Language to hold intermediate results. To generate
中间语言中的寄存器以保存中间结果。生成

76
00:06:38,419 --> 00:06:41,990
intermediate code, we could write a function called IGEN for Intermediate Code
中间代码，我们可以为中间代码编写一个名为iGen的函数

77
00:06:41,990 --> 00:06:44,999
Generation that takes two arguments. It takes the expression for which we're
接受两个参数的世代。它采用了我们要表达的表达式

78
00:06:44,999 --> 00:06:50,090
generating code and it takes the register into which the results of that expression
生成代码，并将该表达式的结果放入其中的寄存器

79
00:06:50,090 --> 00:06:54,479
should be stored. And to give you just one example, and this is the only example that
应该储存起来。我只给你们举一个例子，这是唯一一个

80
00:06:54,479 --> 00:07:00,020
I'll do. Let's take a look at generating intermediate code for a+ expressions. I
我会做的。让我们看看如何为+表达式生成中间代码。我

81
00:07:00,020 --> 00:07:05,159
wanna generate code for e1 + e2 and I want the results of that to be stored in the
我想为e1+e2生成代码，并且希望结果存储在

82
00:07:05,159 --> 00:07:09,349
register t, okay? So the first thing I'm going to do is I'm going to generate code
登记一下，好吗？所以我要做的第一件事就是生成代码

83
00:07:09,349 --> 00:07:12,789
for the subexpressions and I need some place to store the results of the sub
对于子表达式，我需要一些地方来存储子表达式的结果

84
00:07:12,789 --> 00:07:17,529
expressions so I'm just going to make up new register names for those results. So
表达式，所以我要为这些结果编造新的寄存器名称。所以

85
00:07:17,529 --> 00:07:21,849
I'll generate code for e1 and store that in some register, t1 and I'll generate
我将为E1生成代码，并将其存储在某个寄存器T1中，然后我将生成

86
00:07:21,849 --> 00:07:26,680
code for e2 and I'll store the results of that in some register t2. And then, we can
e2的代码，我会将结果存储在某个寄存器t2中。然后，我们就可以

87
00:07:26,680 --> 00:07:33,610
just compute the sum. So t = t1 + t2 and notice that this is a Three Address
只要计算一下和就行了。所以t=t1+t2，请注意这是一个三个地址

88
00:07:33,610 --> 00:07:38,189
Instruction. So we're sticking to the rules here and only using three Address
指示。所以我们坚持这里的规则，只用了三个地址

89
00:07:38,189 --> 00:07:45,189
Instructions In our Intermediate Code Generator. And also notice that because we
我们的中间代码生成器中的说明。还要注意的是，因为我们

90
00:07:45,710 --> 00:07:49,839
have an unlimited number of registers, this actually leads to very simple code
有无限数量的寄存器，这实际上导致了非常简单的代码

91
00:07:49,839 --> 00:07:53,330
generation of intermediate code. In fact, it's even a little bit simpler than
中间代码的生成。事实上，它甚至比

92
00:07:53,330 --> 00:07:57,719
generating code for a stack machine. Recall that, in a stack machine, we had to
为堆叠机生成代码。回想一下，在堆叠机中，我们必须

93
00:07:57,719 --> 00:08:02,800
save the intermediate results here of e1 on the stack. And that involved, you know,
将E1的中间结果保存在堆栈上。这涉及到，你知道，

94
00:08:02,800 --> 00:08:07,479
more than one instruction to actually push the result and adjust the stack pointer
实际推送结果并调整堆栈指针的多条指令

95
00:08:07,479 --> 00:08:14,479
and things like that. And here we can just save it in a register, and, and then just
诸如此类的事情。在这里，我们可以把它保存在一个寄存器里，然后，然后

96
00:08:14,669 --> 00:08:21,389
use that register name later on. So, that is actually all I have to say about
稍后使用该寄存器名称。所以，这就是我要说的全部

97
00:08:21,389 --> 00:08:26,360
Intermediate Code for this course. You should be able to use Intermediate Code at
本课程的中间代码。您应该能够在以下位置使用中间代码

98
00:08:26,360 --> 00:08:30,309
the level in which we are going to be using it in, in lectures. The, in the
我们将在讲座中使用它的水平。那个，在

99
00:08:30,309 --> 00:08:34,380
future videos we'll actually be looking at Intermediate Code quite a bit and using it
在接下来的视频中，我们实际上会更多地了解中间代码并使用它

100
00:08:34,380 --> 00:08:39,070
especially to express certain kinds of optimizations. You should also be able to
特别是表达某种优化。您还应该能够

101
00:08:39,070 --> 00:08:43,940
write simple Intermediate Code programs and you should be able to write algorithms
编写简单的中间代码程序，您应该能够编写算法

102
00:08:43,940 --> 00:08:47,720
that work on Intermediate Code. But I'm not going to expect you to know how to
从事中间代码方面的工作。但我不会指望你知道怎么

103
00:08:47,720 --> 00:08:51,960
generate Intermediate Code because we're not going to discuss it any further. And
生成中间代码，因为我们不会进一步讨论它。和

104
00:08:51,960 --> 00:08:55,010
quite frankly, it doesn't introduce any new any idea. That's really just a
坦率地说，它没有引入任何新的想法。那真的只是一个

105
00:08:55,010 --> 00:09:01,010
variation on the cogeneration ideas that we've already discussed in quite a bit of detail.
我们已经详细讨论过的热电联产想法的变体。

