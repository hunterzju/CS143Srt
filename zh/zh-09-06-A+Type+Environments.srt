0
00:00:02,790 --> 00:00:06,260
In this video, we're gonna continue our development of Cool type checking with a
在这段视频中，我们将继续开发Cool类型检查

1
00:00:06,260 --> 00:00:13,260
discussion of type environments. Let's begin by doing some more type rules. So
关于文字环境的讨论。让我们从更多的类型规则开始。所以

2
00:00:14,340 --> 00:00:19,570
here's one for the constant false. So it's provable that the constant false has the
这里有一个是针对常量False的。所以可以证明常量False具有

3
00:00:19,570 --> 00:00:23,720
type [inaudible] and that's not surprising. If I have a string literal S,
输入[听不见]，这并不令人惊讶。如果我有一个字符串文字S，

4
00:00:23,720 --> 00:00:27,700
then it's provable that, that has type string. And that's also not very
那么这是可以证明的，它有字符串类型。而且那也不是很

5
00:00:27,700 --> 00:00:34,700
surprising. The expression new T produces an object of type T. And the type rule for
令人惊讶。表达式new T生成类型T的对象，类型规则为

6
00:00:35,890 --> 00:00:41,270
that is very straightforward. New T has type T. And we're just going to ignore
这是非常直截了当的。新T的类型是T，我们只是打算忽略

7
00:00:41,270 --> 00:00:45,140
self type for now. As I mentioned in an earlier video, we'll deal with self type
暂时自己打字。正如我在前面的视频中提到的，我们将处理Self类型

8
00:00:45,140 --> 00:00:51,920
later in a video all on its own. Here are a couple of more rules. If it's provable
稍后在一段视频中，这一切都是单独进行的。这里有几条更多的规则。如果这是可以证明的

9
00:00:51,920 --> 00:00:57,500
that an expression e has type bool then an e Boolean complement of e not e also has
表达式e具有bool类型，则e的e布尔补也具有

10
00:00:57,500 --> 00:01:03,590
type bool. And finally perhaps our most complex rule so far, the rule for a while
键入bool。最后可能是我们目前为止最复杂的规则，暂时的规则

11
00:01:03,590 --> 00:01:07,430
loop, and we call that the e-1 here is the predicate of the loop, this is what
循环，我们称这里的e-1为循环的谓词，这就是

12
00:01:07,430 --> 00:01:12,060
determines if we keep executing the loop or not, and e2 is the body of the loop.
确定是否继续执行循环，e2是循环体。

13
00:01:12,060 --> 00:01:16,640
And so type one is required to have type bool. It needs to be provable that e one
所以类型1需要有类型bool。它需要是可证明的，那就是

14
00:01:16,640 --> 00:01:20,810
had type bool, and we allow e two, the body of the loop, to have an arbitrary
类型为bool，我们允许循环体e 2具有任意

15
00:01:20,810 --> 00:01:25,520
type. It can have any type t. It has to have some type, so it has to be type able
键入。它可以有任何类型t。它必须有某种类型，所以它必须是可类型的

16
00:01:25,520 --> 00:01:30,979
under some. Rules, but we don't care what the type is because the type of the entire
在一些下面。规则，但是我们不关心类型是什么，因为整个

17
00:01:30,979 --> 00:01:35,220
expression is just object. We don't actually return the, this expression
表达式只是对象。我们实际上并没有返回这个表达式

18
00:01:35,220 --> 00:01:38,450
doesn't return an interesting value, doesn't produce an interesting value, and
不返回感兴趣的值，不产生感兴趣的值，并且

19
00:01:38,450 --> 00:01:42,119
to discourage people from trying to rely on it, we just type the whole thing as
为了不鼓励人们尝试依赖它，我们只需将整个代码键入为

20
00:01:42,119 --> 00:01:45,450
object. And this is a little bit of a design decision. Now we could have
对象。这有点像是一个设计决定。现在我们可以

21
00:01:45,450 --> 00:01:50,500
designed a language, for example, where the type of a while loop is, was type t.
例如，设计了一种语言，其中WHILE循环的类型是t。

22
00:01:50,500 --> 00:01:56,860
And that you would get the last value of the loop that was that was executed but
并且您将获得执行的循环的最后一个值，但是

23
00:01:56,860 --> 00:02:02,119
the problems is that if E one the protocol loop is false and reaches the loop the
问题是，如果E为1，则协议环路为假，并到达环路

24
00:02:02,119 --> 00:02:07,090
first time Then you never evaluate e two, and no value is produced, and in that case
第一次，你永远不会计算e 2，也不会产生任何值，在这种情况下

25
00:02:07,090 --> 00:02:11,810
you would get a, a void value. Which if so mebody tried to dereference, it would
你会得到一个，一个无效值。如果是这样的话我想取消引用，它会

26
00:02:11,810 --> 00:02:16,359
result in a run time error. That's so to discourage programmers from lying On the
导致运行时错误。这样做是为了阻止程序员躺在

27
00:02:16,359 --> 00:02:23,200
loop, producing a meaningful value. We could just type it, as object. So far,
循环，生成有意义的值。我们可以直接把它打成宾语。到目前为止,

28
00:02:23,200 --> 00:02:26,819
it's been pretty straight forward to define reasonable type rules for every
为每个对象定义合理的类型规则非常简单

29
00:02:26,819 --> 00:02:31,019
construct that we've looked at. But now we actually come to a problem. Let's say we
我们已经看过的结构。但现在我们实际上遇到了一个问题。比方说我们

30
00:02:31,019 --> 00:02:34,879
have an expression which consists just of a single variable name, and that's a
我有一个表达式，它只由一个变量名组成，这是一个

31
00:02:34,879 --> 00:02:39,779
perfectly valid, cool expression, and the question is, what is the type of that
非常有效，很酷的表达，问题是，这是什么类型的

32
00:02:39,779 --> 00:02:46,189
variable, call it X And as you can see. When we're just looking at X by itself we
变量，将其命名为X，如您所见。当我们只看X本身的时候，我们

33
00:02:46,189 --> 00:02:51,919
don't have enough information to give X a type. This local structural rule does not
没有足够的信息为X指定类型。此本地结构规则不

34
00:02:51,919 --> 00:02:57,400
carry any information about the type of X And stepping back one level, inference
携带有关X类型的任何信息，并后退一级，推断

35
00:02:57,400 --> 00:03:01,499
rules have the property that all the information needs to be local. Everything
规则的属性是所有信息都需要是本地的。所有的一切

36
00:03:01,499 --> 00:03:07,669
we need to know. To carry out the function of the rule has to be present in the rule
我们需要知道。执行规则的功能必须出现在规则中

37
00:03:07,669 --> 00:03:10,999
itself. There are no external data structures. There's nothing we're passing
它本身。没有外部数据结构。我们没有路过任何东西

38
00:03:10,999 --> 00:03:16,180
around here that's on the side. Everything has to be encoded in this rule and, so far
在这附近，那个在边上。所有内容都必须按照此规则进行编码，到目前为止

39
00:03:16,180 --> 00:03:23,180
at least, we just don't know Enough to say what the type of a variable should be. So
至少，我们知道的还不够多，不知道变量的类型应该是什么。所以

40
00:03:23,790 --> 00:03:27,829
the solution to this problem is just to put more information in the rules, and
这个问题的解决方案就是在规则中加入更多的信息，并且

41
00:03:27,829 --> 00:03:33,199
that's what we're going to do, so a type environment gives types for free
这就是我们要做的，所以类型环境免费提供类型

42
00:03:33,199 --> 00:03:38,169
variables. So what is a free variable, a variable is free in an expression if it is
变量。那么，什么是自由变量，如果一个变量在表达式中是自由的，那么它就是自由的

43
00:03:38,169 --> 00:03:45,169
not defined within that expression. So for example, in the expression X, X is free.
未在该表达式中定义。例如，在表达式X中，X是自由的。

44
00:03:47,529 --> 00:03:52,919
In the expression x plus y (x+y), well, here this expression uses both x and y,
在表达式x+y(x+y)中，这里这个表达式既使用x又使用y，

45
00:03:52,919 --> 00:03:58,529
and there's no definition of either x or y in that expression, so x and y are free
在这个表达式中没有x或y的定义，所以x和y是自由的

46
00:03:58,529 --> 00:04:05,529
And that expression. If I have, let Y... So I'm declaring a variable Y in X + Y.
还有那个表情。如果我有，让你..。所以我在X+Y中声明一个变量。

47
00:04:09,919 --> 00:04:15,870
Well what's free in this expression, well this expression uses X and Y but the use
这个表达式的自由之处在于，这个表达式使用了X和Y，但是使用

48
00:04:15,870 --> 00:04:20,510
of Y is governed by a definition of Y that occurs within the expression itself. So we
OF Y由表达式本身内出现的Y定义控制。所以我们

49
00:04:20,510 --> 00:04:27,470
say here that Y is bound, Y is a bound variable in this expression but X is still
这里假设Y是绑定的，Y是此表达式中的绑定变量，但X仍然是

50
00:04:27,470 --> 00:04:33,510
free, so only X is free in that expression. And the ide a here is, that if
自由，所以在该表达式中只有X是自由的。这里的问题是，如果

51
00:04:33,510 --> 00:04:37,840
I have an expression with three variables, and you want me to type check it, you have
我有一个有三个变量的表达式，您想让我键入check it，您需要

52
00:04:37,840 --> 00:04:42,600
to tell me what the types of those variables are. So I can type check X if
告诉我这些变量的类型。这样我就可以输入check X if

53
00:04:42,600 --> 00:04:47,730
you tell me what the type of X is. I can type check X plus Y if you tell me the
你告诉我X是什么类型的。我可以输入Check X加Y，如果你告诉我

54
00:04:47,730 --> 00:04:52,240
types of X and Y. And I can type check this expression, this line expression, if
X和Y的类型，我可以键入Check这个表达式，这行表达式，如果

55
00:04:52,240 --> 00:04:55,960
you tell me the type of its one free variable X, the type of Y. We will be
你告诉我它的一个自由变量X的类型，Y的类型。我们将成为

56
00:04:55,960 --> 00:05:01,150
given a declaration by the let, but we still have to tell me what the type X is.
给出了LET的声明，但我们还是要告诉我X类型是什么。

57
00:05:01,150 --> 00:05:04,160
So the free variables are just those variables where you have to give me the
所以自由变量就是那些你必须给我

58
00:05:04,160 --> 00:05:09,330
information and then I can carry out the type checking. The type environment
信息，然后我就可以进行类型检查。类型环境

59
00:05:09,330 --> 00:05:13,870
encodes this information so a type environment is a function from object
对此信息进行编码，以便类型环境是Object的函数

60
00:05:13,870 --> 00:05:20,870
identifiers from variable names to types So let O be a type environment. One of
标识符从变量名到类型，所以让O表示类型环境。其中之一

61
00:05:21,060 --> 00:05:26,350
these functions from object identifier names types. And now we're going to extend
这些函数来自对象标识符名称类型。现在我们要把

62
00:05:26,350 --> 00:05:30,930
the kinds of logical statements that we prove to look like this. And the way that
我们证明的各种逻辑陈述看起来是这样的。而通过这种方式

63
00:05:30,930 --> 00:05:34,680
this going to be read is that under the assumptions that variables have the types
我们要理解的是，在假设变量具有以下类型的情况下

64
00:05:34,680 --> 00:05:39,300
given by O. So the assumptions go over here on the left side of the turnstile.
O给出的，所以假设在旋转栅门的左边。

65
00:05:39,300 --> 00:05:43,050
These are the assumptions that we're making about the free variables in E. So
这些是我们对E.so中的自由变量所做的假设

66
00:05:43,050 --> 00:05:48,990
the assumption that, excuse me, three variables. Have the types given by o is
打扰一下，假设有三个变量。具有由o给出的类型是

67
00:05:48,990 --> 00:05:55,620
provable, that's this turn style here, that the expression e has type t. And, so
可以证明，这就是这里的转弯风格，表达式e的类型是t，所以

68
00:05:55,620 --> 00:06:02,170
this notation very nicely, separates what we're assuming. This is input to our,
这个符号很好地分隔了我们的假设。这是对我们的投入，

69
00:06:02,170 --> 00:06:05,950
process of figuring out what the type is from what we're proving. So if you tell me
从我们正在证明的东西中找出类型的过程。所以如果你告诉我

70
00:06:05,950 --> 00:06:12,950
the types of the free variables as given by o, then I can tell you, the type e. The
o给出的自由变量的类型，那么我可以告诉你，e类型。

71
00:06:15,230 --> 00:06:19,870
type environment has to be added to all the rules that we've gone through so far.
到目前为止，我们已经讨论过的所有规则中都必须添加类型环境。

72
00:06:19,870 --> 00:06:24,790
So for example, for intergal literals if I have some set of assumptions of all the
例如，对于整数字面，如果我有一组假设

73
00:06:24,790 --> 00:06:28,910
types of variables, that doesn't really change, it doesn't, in fact it doesn't
变量的类型，这不会真的改变，不会，事实上不会

74
00:06:28,910 --> 00:06:32,800
change, what the type is an intergal literal. Any intergal literal will still
变，什么类型是整数文字。任何整数字面都不会改变

75
00:06:32,800 --> 00:06:37,120
have type int. And so in this case, for this particular kind of expression, I we
具有类型int。所以在这种情况下，对于这种特殊的表达，我我们

76
00:06:37,120 --> 00:06:43,180
don't use any of our assumptio ns about the types of variables. Now, it's a little
不要使用我们关于变量类型的任何假设。现在，这有点

77
00:06:43,180 --> 00:06:47,400
bit different with the case of sum expressions. So if I have the expression E
与SUM表达式的情况略有不同。所以如果我有表达式E

78
00:06:47,400 --> 00:06:52,389
one plus E two, and I have some assumptions, zero, about the types of
一加E2，我有一些假设，零，关于这些类型

79
00:06:52,389 --> 00:06:58,320
variables, well, then I want to prove that E one has type int, and I'm gonna do that
变量，然后我想证明E 1有int类型，我会这么做

80
00:06:58,320 --> 00:07:03,840
using the types of the variables given by zero, so E one might contain free
使用由零给出的变量类型，因此E 1可能包含FREE

81
00:07:03,840 --> 00:07:06,200
variables and I'll need to look in zero to figure out what the types of those
变量，我需要在零中查找，才能找出这些变量的类型

82
00:07:06,200 --> 00:07:11,180
variables are. And similarly for E two, I will type E two under the same set of
变量是。类似地，对于E 2，我将在相同的集合下键入E 2

83
00:07:11,180 --> 00:07:16,580
assumptions. And if E1 has type int under the assumptions O and E2 has type int
假设。如果在假设下E1具有INT类型，则O和E2具有INT类型

84
00:07:16,580 --> 00:07:21,110
under the assumptions O. Well, then I can conclude that E1 plus E2 has type int
在假设0的情况下，那么我可以得出结论，E1加E2的类型是int

85
00:07:21,110 --> 00:07:28,110
under the same set of assumptions O. And we can also write new rules, so now our
在同样的假设下，我们也可以写出新的规则，所以现在我们

86
00:07:28,340 --> 00:07:34,330
big problem with free variables becomes a very easy problem. If I want to know what
自由变量的大问题变成了一个非常简单的问题。如果我想知道

87
00:07:34,330 --> 00:07:39,620
the type of X is, and there's a missing O here, if I want to know what the type of X
X的类型是，这里有一个漏掉的O，如果我想知道X的类型是什么

88
00:07:39,620 --> 00:07:44,300
is, I simply look it up in my object environment. So under the assumption that
就是，我只需在我的对象环境中查找它。所以在假设

89
00:07:44,300 --> 00:07:49,560
the variables have the types given by O, what is the type of x? Well, I look up in
变量有O给出的类型，x的类型是什么？嗯，我抬头看

90
00:07:49,560 --> 00:07:56,560
O what the type of X is assumed to be, and I then can prove that X has that type T.
假设X的类型是什么，然后我就可以证明X有这个类型。

91
00:07:58,350 --> 00:08:02,290
So now let's take a look at a rule that actually does something interesting with
现在让我们来看一条规则，它实际上做了一些有趣的事情

92
00:08:02,290 --> 00:08:07,520
the variables from the point of view of the environments. So here is a [inaudible]
从环境的角度来看的变量。所以这里是[听不见的]

93
00:08:07,520 --> 00:08:10,900
expression. And let's remind ourselves what this does. This is a [inaudible]
表达式。让我们提醒自己这是做什么用的。这是[听不见]

94
00:08:10,900 --> 00:08:16,169
expression that has no initialization. So it says that X is going to be a new
没有初始化的表达式。所以它说X将是一个新的

95
00:08:16,169 --> 00:08:20,540
variable. It's going to have type T0, and that variable is going to be visible in
变量。它将具有类型T0，该变量将在

96
00:08:20,540 --> 00:08:24,930
the sub expression E1. And so, now, how am I going to type check that? Well, I'm
子表达式E1。那么，现在，我要如何输入检查呢？嗯，我是

97
00:08:24,930 --> 00:08:29,669
going to type check E1 in some kind of environment. And this is a new notation
要在某种环境中键入check E1。这是一种新的记号

98
00:08:29,669 --> 00:08:36,120
here, so let me define what it means. So remember O is a function, it maps a,
在这里，让我来定义一下它的意思。记住O是一个函数，它映射a，

99
00:08:36,120 --> 00:08:43,120
variable names to types and OT/X this notation here is also a function. And what
类型和OT/X的变量名这里的符号也是一个函数。还有什么

100
00:08:43,639 --> 00:08:48,600
this is, is the function O modified at the single point X to return T. So in
这就是，函数O在单点X处被修改为返回T。所以在

101
00:08:48,600 --> 00:08:53,680
particular a, this function, this whole thing here is one function, this wh ole
特别是一个，这个功能，这里的整个就是一个功能，这个

102
00:08:53,680 --> 00:08:59,699
thing I'm underlining here is a function, that applied to X is Returns t So that
我在这里下划线的是一个应用于X的函数，它返回t，因此

103
00:08:59,699 --> 00:09:04,540
says that this sort of assumptions says that x has type t and for any other
表示这种假设表示x具有类型t，而对于任何其他类型

104
00:09:04,540 --> 00:09:11,540
variable. So I apply it to some other variable y, where x is different from y.
变量。所以我把它应用于其他一些变量，其中x不同于y。

105
00:09:12,850 --> 00:09:19,110
Well then, I just get whatever type y has in [inaudible]. Okay? So what this rule
好吧，那么，我只得到[听不见]中的任何一种类型的y。好吧?那么这条规则是什么呢？

106
00:09:19,110 --> 00:09:25,319
then says is that I'm going to type check E1 in the same environment O, except that
然后说我将在相同的环境O中键入check E1，除了

107
00:09:25,319 --> 00:09:30,089
at point X, it's going to have the type T0. So we're gonna change just the type of
在点X，它的类型是T0。所以我们要改变的只是一种

108
00:09:30,089 --> 00:09:34,550
X that have type T0, because that's the type of the new identifier that's bound at
类型为T0的X，因为这是绑定在的新标识符的类型

109
00:09:34,550 --> 00:09:37,490
E1. And all the other types will be the same. And using those assumptions, I'll
E1。而所有其他类型都将是相同的。利用这些假设，我将

110
00:09:37,490 --> 00:09:42,660
try to prove that E1 has some type. I will get a type for E1. And then that will be
试着证明E1有某种类型。我去买个E1的型号。然后就会是

111
00:09:42,660 --> 00:09:49,660
the type of the entire let expression. Now notice something about the type
整个let表达式的类型。现在请注意有关该类型的一些信息

112
00:09:49,730 --> 00:09:55,569
environment. What this says is that before we type check E1, we need to modify Our
环境。这就是说，在我们键入check E1之前，我们需要修改我们的

113
00:09:55,569 --> 00:10:00,689
set of assumption. Modify our type environment to include a new assumption
一组假设。修改我们的类型环境以包含新的假设

114
00:10:00,689 --> 00:10:05,790
about x, then we type check e one, and then of course when we leave, type
关于x，然后我们键入check e one，当然，当我们离开时，键入

115
00:10:05,790 --> 00:10:10,100
checking e one, we're going to remove that assumption about x, that new assumption,
检查一下e，我们要去掉关于x的那个假设，这个新的假设，

116
00:10:10,100 --> 00:10:15,449
because outside of the let, we just have the original set of assumptions, though.
因为在LET之外，我们只有一组原始的假设。

117
00:10:15,449 --> 00:10:20,220
And so, I hope that, that, terminology and that description reminds you of something
所以，我希望，术语和描述会让你想起一些事情

118
00:10:20,220 --> 00:10:24,290
that we talked about earlier, because this type environment is really implemented by
这一点，因为这个类型环境实际上是由

119
00:10:24,290 --> 00:10:30,559
the simple table. So, in our rules, The type environment that carries around the
简单的桌子。因此，在我们的规则中，携带

120
00:10:30,559 --> 00:10:34,829
information that will be stored or is typically stored in the symbol table of a
将存储或通常存储在的符号表中的信息

121
00:10:34,829 --> 00:10:35,189
compiler.
编译器。

