0
00:00:04,630 --> 00:00:09,630
Hello, in this and the next few videos I'm going to be giving a overview of COOL the
您好，在这段视频和接下来的几个视频中，我将给出一个很酷的概述

1
00:00:09,630 --> 00:00:16,630
programming language in which you'll be writing a compiler. Cool is the Classroom
您将用来编写编译器的编程语言。教室里很酷

2
00:00:18,349 --> 00:00:25,040
Object Oriented Language and the acronym of course, is COOL. And the unique design
当然，面向对象语言和缩写是很酷的。和独特的设计

3
00:00:25,040 --> 00:00:29,860
requirement for COOL is that the compiler has to be able to be written in a
Cool的要求是编译器必须能够用

4
00:00:29,860 --> 00:00:33,480
relatively short period of time. We only have one quarter, or in some cases, a
时间相对较短。我们只有一个季度，或者在某些情况下，

5
00:00:33,480 --> 00:00:40,480
semester for students to write the compilers. And so COOL has to be
学期供学生编写编译器。所以必须要很酷

6
00:00:40,850 --> 00:00:46,800
implementable quickly. And actually since it's used primarily for teaching
可快速实施。实际上，因为它主要是用来教学的

7
00:00:46,800 --> 00:00:52,700
compilers, the number of COOL compilers in the world vastly exceeds, the number of
编译器，世界上最酷的编译器的数量远远超过

8
00:00:52,700 --> 00:00:57,340
COOL programs. So, there many, many more compilers have been written, thousands of
很酷的节目。因此，已经编写了许许多多的编译器，数以千计

9
00:00:57,340 --> 00:01:01,450
compilers, maybe tens of thousands of compilers have been written for COOL, but
编译器，也许数以万计的编译器是为炫酷而编写的，但是

10
00:01:01,450 --> 00:01:05,970
probably only some dozens, or hundreds COOL programs. And so, it's probably the
可能只有几十个，或者几百个很酷的程序。所以，这很可能是

11
00:01:05,970 --> 00:01:10,229
only language, in existence for which this is true, That, that, the number of
只有一种存在的语言，对它来说是真的，那，那，数量

12
00:01:10,229 --> 00:01:15,200
compilers actually exceeds the number of programs, but it does Tell you about the
编译器实际上超过了程序的数量，但它确实告诉您

13
00:01:15,200 --> 00:01:19,439
main design requirement. It's much more important in COOL that the compiler be
主要设计要求。在Cool中，更重要的是编译器

14
00:01:19,439 --> 00:01:24,139
easy to write then that it be easy to write programs in. And so there are some
容易编写，那么编写程序就容易了。所以这里有一些

15
00:01:24,139 --> 00:01:29,340
quirks in the language, Things that have been done specifically to make it easier
语言中的怪癖，特别是为了让它变得更容易而做的事情

16
00:01:29,340 --> 00:01:35,450
to implement where that wouldn't take away from the, the teaching value of the, of
在不会剥夺，的，的教学价值的情况下，

17
00:01:35,450 --> 00:01:39,030
the language. But that would make it inconvenient to use the language on a
语言。但是这会使在

18
00:01:39,030 --> 00:01:45,630
day-to-day basis as a working programmer. So, what is in the language? Well it's,
作为一名工作的程序员进行日常工作。那么，语言里有什么呢？嗯，这是，

19
00:01:45,630 --> 00:01:49,159
we've tried to design it so that it will give you a taste of modern notions of
我们试着设计它，这样你就能领略到现代观念的滋味。

20
00:01:49,159 --> 00:01:53,759
extraction static typing reuse through inheritance, automatic memory management.
提取静电打字复用，通过继承，自动内存管理。

21
00:01:53,759 --> 00:01:57,679
And there's actually a few more things that we'll talk about when we come to
实际上，当我们谈到这一点时，我们还会谈到更多的事情

22
00:01:57,679 --> 00:02:02,420
them. But many things are left out. We're not gonna be able to put everything in the
他们。但是很多东西都被遗漏了。我们不可能把所有东西都放到

23
00:02:02,420 --> 00:02:05,849
language and have it be implementable quickly. We'll be able to cover some
语言，并使其能够快速实现。我们将能够覆盖一些

24
00:02:05,849 --> 00:02:09,789
things in lectures, but unfortunately, there'll even be some interesting language
但不幸的是，甚至会有一些有趣的语言

25
00:02:09,788 --> 00:02:16,789
ideas that we won't be able to get to in this class. So the course project is to
我们在这节课上学不到的想法。所以课程项目是

26
00:02:17,280 --> 00:02:22,160
build a complete compiler. And specifically you're going to compile COOL
构建一个完整的编译器。具体地说，你要编译酷

27
00:02:22,160 --> 00:02:27,810
into MIPS assembly language. So MIPS is a real instruction set, It was for a machine
转换成MIPS汇编语言。所以MIPS是一个真正的指令集，它是为一台机器准备的

28
00:02:27,810 --> 00:02:33,200
that was designed in the 1980's. And there is a simulator for MIPS that runs on just
它是在20世纪80年代设计的。而且有一个MIPS模拟器，它只运行在

29
00:02:33,200 --> 00:02:36,860
about any kind of hardware. And so this makes the, the whole project very
关于任何一种硬件。所以这使得整个项目非常的

30
00:02:36,860 --> 00:02:42,300
portable, We can run your compiler, or you can generate MIPS assembly language and
可移植，我们可以运行您的编译器，或者您可以生成MIPS汇编语言和

31
00:02:42,300 --> 00:02:45,650
then that MIPS assembly language can be simulated on just about whatever kind of
那么MIPS汇编语言几乎可以在任何类型的

32
00:02:45,650 --> 00:02:50,740
machine you have access to. The project is broken up into five assignments. First
你有权使用的机器。这个项目被分成五个作业。第一

33
00:02:50,740 --> 00:02:54,840
you're gonna write a COOL program. And that program itself will be an interpreter
你要写一个很酷的程序。而该程序本身将是一个解释器

34
00:02:54,840 --> 00:02:58,080
to give you a little bit of experience with writing a simple interpreter. And
给您一点编写简单解释器的经验。和

35
00:02:58,080 --> 00:03:03,040
then the compiler itself will consist of the four the phases that we discussed
然后编译器本身将由我们讨论的四个阶段组成

36
00:03:03,040 --> 00:03:07,610
lexical analysis, parsing, semantic analysis and code generation. And all of
词法分析、解析、语义分析和代码生成。以及所有的

37
00:03:07,610 --> 00:03:12,620
these phases, I should emphasize are [inaudible] compatible. Meaning that we
我要强调的是，这些阶段是[听不见的]兼容的。这意味着我们

38
00:03:12,620 --> 00:03:16,320
have separate implementations, separate reference implementations of each of
有单独的实现，每个都有单独的引用实现

39
00:03:16,320 --> 00:03:20,620
these. And so for example, when you are working on semantic analysis, you will be
这些。举个例子，当你在做语义分析时，你会

40
00:03:20,620 --> 00:03:25,500
able to take the lexical analysis, parsing, and code generation components
能够使用词法分析、解析和代码生成组件

41
00:03:25,500 --> 00:03:31,790
from the reference compiler and plug your semantic analysis into that. Framework
并将您的语义分析插入其中。框架

42
00:03:31,790 --> 00:03:36,510
and, and test it against the reference components. And so this way if you have
并对照参考组件对其进行测试。这样一来，如果你有

43
00:03:36,510 --> 00:03:40,560
trouble with one component or aren't sure that your components is working very well
一个组件出现故障或不确定您的组件是否工作正常

44
00:03:40,560 --> 00:03:44,080
you won't have a problem in working on a different component because you'll be able
使用不同的组件不会有问题，因为您可以

45
00:03:44,080 --> 00:03:50,090
to test that independently. And finally there's no required optimization
来独立测试这一点。最后，不需要进行必要的优化

46
00:03:50,090 --> 00:03:54,730
assignment, But we do have some suggestions for optimizations that you can
任务，但我们确实有一些优化建议，您可以

47
00:03:54,730 --> 00:04:00,100
do. And many people have written optimizations for COOL. And so this is an
做。而且很多人已经为酷编写了优化。所以这是一个

48
00:04:00,100 --> 00:04:05,819
optional assignment if you're interested in learning something about program
如果您有兴趣学习一些有关程序的知识，请选择作业

49
00:04:05,819 --> 00:04:12,819
optimization. So, let's write the simplest possible COOL program. And the first thing
优化。所以，让我们写一个尽可能简单的酷程序。第一件事就是

50
00:04:17,029 --> 00:04:22,440
to know is that COOL source files, and in the extension dot CL for COOL, and you can
要知道是酷源文件，并在扩展名中点CL为酷，可以

51
00:04:22,440 --> 00:04:28,670
use whatever editor you like to write your programs. I happen to use Emacs, you can
使用您喜欢的任何编辑器来编写程序。我碰巧用的是Emacs，你可以

52
00:04:28,670 --> 00:04:34,600
use some other editor if you like. And every COOL program has to have a class
如果您愿意，可以使用其他编辑器。而且每个很酷的程序都必须有一个类

53
00:04:34,600 --> 00:04:40,750
called main. And let's talk about that business in a second. So a class
叫做Main。我们待会再谈这件事。所以一堂课

54
00:04:40,750 --> 00:04:44,790
declaration in COOL begins with the key word, class, Followed by the name of the
Cool中的声明以关键字class开头，后跟

55
00:04:44,790 --> 00:04:50,930
class, So in this case, main, Followed by a pair of curly braces And inside the
类，因此在本例中为main，后跟一对大括号，并在

56
00:04:50,930 --> 00:04:56,180
curly braces is where all the stuff that belongs to the class goes, And every class
大括号是属于类的所有内容的位置，每个类

57
00:04:56,180 --> 00:05:00,970
declaration must be terminated by a semi-colon. So a program consists of a
声明必须以分号结束。因此，一个程序由一个

58
00:05:00,970 --> 00:05:06,460
list of class declarations. Each class declaration terminated by a semi-colon. So
类声明列表。每个类声明都以分号结尾。所以

59
00:05:06,460 --> 00:05:11,000
that's the structure of a class. And now we need this class to actually do
这就是班级的结构。现在我们需要这个类来实际做

60
00:05:11,000 --> 00:05:16,680
something so we're going to have a method in this class, and let's call the method
所以我们在这个类中会有一个方法，让我们调用该方法

61
00:05:16,680 --> 00:05:23,200
main. In fact the main method of the main class must always exist. This is the
主干道。事实上，Main类的Main方法必须始终存在。这是

62
00:05:23,200 --> 00:05:27,660
method that's run to start the program and furthermore this method must take no
方法来启动程序，而且此方法必须不带

63
00:05:27,660 --> 00:05:32,980
arguments. So the empty argument list for the main method is always empty. And let's
争论。因此，Main方法的空参数列表始终为空。让我们

64
00:05:32,980 --> 00:05:39,900
say the main method its body always goes in a pair of curly braces. So the main
说主要的方法，它的主体总是放在一对花括号里。所以主要的

65
00:05:39,900 --> 00:05:45,750
method always goes inside curly braces. And a class consists of a list of such
方法始终放在大括号内。而一个类由这样的列表组成

66
00:05:45,750 --> 00:05:49,370
declarations. And again, those declarations must all be separated by
声明。同样，这些声明都必须用

67
00:05:49,370 --> 00:05:53,740
semicolons. So in, or terminated, excuse me, by semicolons. So in this case, we
分号。所以，请原谅，用分号来表示，或以分号结尾。所以在这种情况下，我们

68
00:05:53,740 --> 00:05:59,010
only have one method in the class. But still has to have its semi-colon and now
类中只有一个方法。但还是要有分号，现在

69
00:05:59,010 --> 00:06:02,030
we can say what we want the method actually do so this is the place for the
我们可以说出我们想要的，方法实际上是这样做的，所以这是

70
00:06:02,030 --> 00:06:05,889
code for the method goes and let's just have the simplest possible method the one
该方法的代码是这样的，我们只使用可能的最简单的方法，即

71
00:06:05,889 --> 00:06:12,889
that just event evaluates to the number one. Okay, so [inaudible] an expression
那个公正的事件被评为第一名。好的，所以[听不见]一个表情

72
00:06:12,919 --> 00:06:18,060
language, which means that wherever a piece of code can go, you can put an
语言，这意味着在一段代码可以到达的任何地方，都可以将一个

73
00:06:18,060 --> 00:06:22,400
arbitrary expression, any expression can go there there's no explicit return
任意表达式，任何表达式都可以到那里，没有显式返回

74
00:06:22,400 --> 00:06:27,470
statement for a method. It's just a value of the method body is the value of the
方法的语句。它只是方法体的一个值，即

75
00:06:27,470 --> 00:06:30,810
methods. So in this case we just put the number one in there, and that will be the
方法。在这种情况下，我们只需将数字1放在那里，这将是

76
00:06:30,810 --> 00:06:37,000
value of this method when we run it. So let's save that. And now we can try
此方法在运行时的值。所以我们还是省省吧。现在我们可以试着

77
00:06:37,000 --> 00:06:43,250
compiling this simple program, so how do we compile the compiler is called a COOL c
编译这个简单的程序，那么我们如何编译编译器被称为很酷的c

78
00:06:43,250 --> 00:06:50,040
for the COOL compiler and you just give the COOL compiler a list of COOL source
对于Cool编译器，您只需给Cool编译器一个Cool源代码列表

79
00:06:50,040 --> 00:06:55,880
files. So in this case there's just one file 1.CL hit enter and ooh we got a
文件。在本例中，只有一个文件1.CL按Enter键，哦，我们得到了一个

80
00:06:55,880 --> 00:07:02,680
syntax error so we have to come back and fix that and the error said at or near the
语法错误，因此我们必须回来修复该错误以及在

81
00:07:02,680 --> 00:07:09,130
open curly brace on line three there's a mistake. And I know what the mistake is,
打开三号线的花括号，肯定是弄错了。我知道错在哪里，

82
00:07:09,130 --> 00:07:12,570
because I'm a competent COOL programmer, at least somewhat competent COOL
因为我是一个能干的酷程序员，至少有点能干的酷

83
00:07:12,570 --> 00:07:17,460
programmer. Cool methods must declare their return type. So we need to put a
程序员。Cool方法必须声明它们的返回类型。所以我们需要把一个

84
00:07:17,460 --> 00:07:21,560
type here. And the syntax for the declaration is to put a colon after the
在此键入。声明的语法是在

85
00:07:21,560 --> 00:07:24,889
name of the method and the argument list, and then the name of a type. And since
方法和参数列表的名称，然后是类型的名称。既然

86
00:07:24,889 --> 00:07:30,340
we're returning the number one for this program for sorry, for this method we
我们返回此程序的第一个数字表示抱歉，对于此方法，我们

87
00:07:30,340 --> 00:07:37,340
might as well say that the main method is going to return an integer, So save that,
不妨说Main方法将返回一个整数，所以保存它，

88
00:07:37,860 --> 00:07:43,740
Go back to our compilation window and let's compile the program again. And this
返回到我们的编译窗口，让我们重新编译程序。还有这个

89
00:07:43,740 --> 00:07:48,680
time it compiles successfully. And now if we look in our directory we see that there
它编译成功的时间。现在如果我们查看我们的目录，我们会发现

90
00:07:48,680 --> 00:07:55,680
is a new file called 1.s. That's the assembly code for the program one. And now
是一个名为1.s的新文件。这是程序一的汇编代码。而现在

91
00:07:56,360 --> 00:08:03,360
we could try to run this code. And the, The, the Mitch simulator is called spin,
我们可以试着运行这段代码。这个米奇模拟器叫Spin，

92
00:08:04,919 --> 00:08:11,240
and it just takes a, assembly file to, to simulate, And so we just give it one
它只需要一个汇编文件来模拟，所以我们只给它一个

93
00:08:11,240 --> 00:08:15,889
[inaudible] hit enter and it will run. A whole bunch of stuff is printed out. But
[听不见]按Enter，它就会运行。一大堆东西都被打印出来了。但

94
00:08:15,889 --> 00:08:21,290
as you can see, it says part way down that the COOL program successfully executed, so
正如你所看到的，它说在下面的一部分，很酷的程序成功地执行了，所以

95
00:08:21,290 --> 00:08:24,660
that's good, and then afterwards there are some statistics and things like number of
这很好，然后有一些统计数据，比如

96
00:08:24,660 --> 00:08:29,419
instructions executed, a number of loads and stores, a number of branches, those
执行的指令、加载和存储的数量、分支的数量等

97
00:08:29,419 --> 00:08:32,519
things would be interesting if we're worried about performance if we were to
如果我们担心性能的话，事情会很有趣，如果我们

98
00:08:32,519 --> 00:08:37,399
say working on the optimization of the compiled code, but we're not doing that
比方说致力于编译代码的优化，但我们不会这样做

99
00:08:37,399 --> 00:08:43,120
right now. We're just running programs. And we can see if this program works. So
现在就来。我们只是在运行程序。我们可以看看这个程序是否有效。所以

100
00:08:43,120 --> 00:08:45,520
the program ran. It terminated successfully. But it didn't actually
程序运行了。它已成功终止。但它实际上并没有

101
00:08:45,520 --> 00:08:52,480
produce any output. And that's because we didn't ask it to produce any output, If we
产生任何输出。这是因为我们没有要求它生产任何产品，如果我们

102
00:08:52,480 --> 00:08:59,230
want to have output. We have to go back and modify the program again. So, so what
想要有输出。我们必须回去重新修改程序。所以，那又怎么样

103
00:08:59,230 --> 00:09:02,170
this program does currently, is that it just returns its value but that, but
这个程序目前所做的是，它只返回它的值，但是

104
00:09:02,170 --> 00:09:05,740
nothing is done with that value. It's not printed out or anything like that. If you
用这个值什么也做不了。它不是打印出来的，或者类似的东西。如果你

105
00:09:05,740 --> 00:09:10,270
wanted to have something printed out in a COOL program, you have to do that
想要在很酷的程序中打印出一些东西，你必须这么做

106
00:09:10,270 --> 00:09:16,230
explicitly. So there's a special class built in, a primitive class called IO. And
明确地说。所以内置了一个特殊的类，一个名为IO的原始类。和

107
00:09:16,230 --> 00:09:23,230
we can declare, what's called a attribute of this class, it will be a IO attribute
我们可以声明，这个类的一个属性，它将是一个IO属性

108
00:09:23,640 --> 00:09:30,640
and it will be called I, okay and I will be a object that we use to do IO. So now
它将被称为I，好的，我将是我们用来做IO的一个对象。所以现在

109
00:09:30,760 --> 00:09:37,760
in our, main method, Here we could add a call to out-string, I dot out-string is
在我们的main方法中，我们可以在这里添加对out-string的调用，我点出字符串是

110
00:09:41,260 --> 00:09:47,020
how we invoke a method. Okay so out-string is a method of the IO class so we use I to
我们如何调用方法。好的，out-string是IO类的一个方法，所以我们使用i

111
00:09:47,020 --> 00:09:51,380
invoke that method and then we can pass it a string that we want printed out on the
调用该方法，然后我们可以向它传递一个字符串，我们希望将该字符串打印到

112
00:09:51,380 --> 00:09:58,380
screen. So for example we could say hello world. Okay, And now, we have to decide
屏幕。例如，我们可以说hello world。好的，现在，我们必须决定

113
00:10:05,500 --> 00:10:10,020
what to do, with our, with our number one there. And let me show you one more
怎么办，我们的，我们的头号在那里。让我再给你们看一个

114
00:10:10,020 --> 00:10:13,730
feature of COOL. Let's leave the one there, and let's make it part of a
酷炫的特点。让我们把那个留在那里，让我们把它变成

115
00:10:13,730 --> 00:10:17,790
statement block. So a statement block consists of a sequence of expressions
挡路声明。因此，挡路语句由一系列表达式组成

116
00:10:17,790 --> 00:10:21,930
separated by semicolons. And you can have any number of expressions, and the
用分号隔开的。您可以有任意数量的表达式，并且

117
00:10:21,930 --> 00:10:26,709
semantics of a statement block or an expression block is to just evaluate the
挡路语句或表达式挡路的语义是只计算

118
00:10:26,709 --> 00:10:30,640
expressions in order. And the value of the block is the value of the last expression.
表达式按顺序排列。而挡路的价值就是最后一个表达式的价值。

119
00:10:30,640 --> 00:10:35,750
But now, a statement or an expression block has to be included in its own set of
但现在，挡路的声明或表达必须包含在它自己的

120
00:10:35,750 --> 00:10:41,740
curly braces. Okay, so that now is a valid COOL program so let me just read this for
花括号。好的，现在这是一个有效的很酷的程序，让我读一下这个

121
00:10:41,740 --> 00:10:48,740
you so the body of the program is a block of expressions. The first one, executes. A
你看，节目的主体是一个挡路的表情。第一个，执行。一个

122
00:10:51,300 --> 00:10:55,440
out string call to the object I, which is going to print hello world for us. And
输出字符串调用对象i，它将为我们输出hello world。和

123
00:10:55,440 --> 00:11:00,680
then the second one evaluates to one, which is the value of the entire of the
然后，第二个求值结果为1，这是

124
00:11:00,680 --> 00:11:05,940
entire method. Okay, actually I should say it's the value of the block, okay, and
整个方法。好的，其实我应该说这是挡路的价值，好的，而且

125
00:11:05,940 --> 00:11:11,310
then because the block is the body of the method the value of the block becomes the
因为挡路是方法的主体，所以挡路的价值就变成了

126
00:11:11,310 --> 00:11:15,870
value of the entire method, So one will be returned from this method call. So let's
值，因此此方法调用将返回一个。所以让我们

127
00:11:15,870 --> 00:11:22,870
save this. Go back over here and let's compile this again. So, Looks like I
省省吧。回到这里，让我们再编译一遍。所以，看起来我

128
00:11:25,610 --> 00:11:32,610
failed to save it. Let's compile this and we see we have a syntax error. And so it
保存失败。让我们编译这段代码，我们会发现有一个语法错误。就这样，它

129
00:11:37,890 --> 00:11:44,890
says on line four, we have a syntax error at or near our closing curly brace. And
在第四行，我们在右花括号或其附近有一个语法错误。和

130
00:11:46,080 --> 00:11:53,080
the problem here is that a statement block, or expression block consists of a
这里的问题是，挡路语句或表达式挡路由

131
00:11:54,370 --> 00:11:57,800
series or a sequence of expressions terminated by semi-colons, and we forgot
以分号结尾的一系列或一系列表达式，但我们忘记了

132
00:11:57,800 --> 00:12:04,170
to terminate the last expression in the sequence by its semi-colon, So we have to
以分号结束序列中的最后一个表达式，因此我们必须

133
00:12:04,170 --> 00:12:10,470
add that. And now we should be able to compile this, and lo and behold it
再加上那个。现在我们应该可以编译这个了，看看它

134
00:12:10,470 --> 00:12:17,470
compiles correctly, and then we can run it. And now we see, oh we got another
编译正确，然后我们就可以运行它了。现在我们看到了，哦，我们又有了一个

135
00:12:18,920 --> 00:12:24,990
mistake. So we have an, when the program ran it complained that we have a
弄错了。所以我们有一个，当程序运行的时候它抱怨说我们有一个

136
00:12:24,990 --> 00:12:31,350
dispatched void. So that on line four, our dispatch was to an object that didn't
派遣无效。所以在第四行，我们的调度对象不是

137
00:12:31,350 --> 00:12:37,120
exist. And, you can see the dispatch call right here to I, and it doesn't exist,
存在。而且，你可以看到调度电话就在这里打给我，但它并不存在，

138
00:12:37,120 --> 00:12:43,149
because, in fact, we forgot to allocate an object for I. So here we declare I to be
因为，事实上，我们忘了为I分配一个对象，所以我们在这里声明I为

139
00:12:43,149 --> 00:12:48,399
of type IO, but that doesn't actually create any objects. That just says that it
类型IO，但这实际上不会创建任何对象。这就说明了这一点

140
00:12:48,399 --> 00:12:53,670
creates a variable name I but I doesn't actually have a value. So if you want I to
创建一个变量名i，但我实际上没有值。所以如果你想让我

141
00:12:53,670 --> 00:12:57,450
actually have a value, we have to initialize it to something. So we can
实际上有一个值，我们必须将其初始化为某个值。这样我们就可以

142
00:12:57,450 --> 00:13:03,529
initialize it to a new IO object. And new here, is the way you allocate new objects
将其初始化为新的IO对象。这里的新功能是分配新对象的方式

143
00:13:03,529 --> 00:13:07,269
in COOL and new always take a type argument so in this case were creating a
在COOL和NEW中，始终接受类型参数，因此在本例中我们创建了

144
00:13:07,269 --> 00:13:13,610
new object in type IO and were assigning it To this object i. And notice here that
类型IO中的新对象，并将其分配给此对象i。请注意，

145
00:13:13,610 --> 00:13:18,330
I is a, is a, is what would be called a field name in Java. It's what we call an
I is a，is a，在Java中被称为字段名。这就是我们所说的

146
00:13:18,330 --> 00:13:25,000
attribute in COOL. So, so these are the data el, the data elements of the, of the
属性设置为COOL。所以，这些是数据el，，的数据元素

147
00:13:25,000 --> 00:13:30,339
class. And so the class can have both of names of things that are so, attributes or
班级。因此，该类可以同时具有属性或属性这两个事物的名称

148
00:13:30,339 --> 00:13:37,339
fields that hold values as well as methods that can perform computation. [sound]
保存值的字段以及可以执行计算的方法。[声音]

149
00:13:38,110 --> 00:13:45,110
Let's save this and switch back. And now we'll compile this again. So and it still
我们先把这个保存起来，然后再换回去。现在我们再编译一遍。所以它仍然

150
00:13:48,300 --> 00:13:54,200
compiles. And now we can run it. And now it runs, and low and behold, as you can
编译。现在我们可以运行它了。现在它跑起来了，低低地看着，就像你所能看到的那样

151
00:13:54,200 --> 00:13:59,760
see down there third line from the, the top, it prints out hello world. And that
看看下面第三行，从上面开始，它打印出hello world。那就是

152
00:13:59,760 --> 00:14:05,980
looks a little bit ugly because the, the successful execution message is on the
看起来有点难看，因为成功执行的消息在

153
00:14:05,980 --> 00:14:12,980
same line as our hello world message. So let's fix that. Let's come back over here.
和我们的问候世界信息一样。所以让我们来解决这个问题。我们回到这里来吧。

154
00:14:13,410 --> 00:14:17,510
And in our string here we can add a new line. Okay at the end of the string, so
在我们的字符串中，我们可以添加新的一行。好的，在字符串的末尾，所以

155
00:14:17,510 --> 00:14:23,399
backslash N is how you write a new line character in the string. Save that, come
反斜杠N是在字符串中写换行符的方式。省省吧，来吧

156
00:14:23,399 --> 00:14:30,079
back over here let's compile. So if you don't know Unix bang will repeat the
回到这里，让我们编译一下。所以如果你不知道unix bang会重复

157
00:14:30,079 --> 00:14:34,550
previous expression the previous command that began with the same prefix that you
上一个表达式以与您相同的前缀开头的上一个命令

158
00:14:34,550 --> 00:14:38,630
type after the bang. So I want to run the last command that began with C which is to
在砰的一声之后键入。所以我想运行最后一个以C开始的命令，即

159
00:14:38,630 --> 00:14:43,220
compile and then I want to run the last command that began with S which is to run
编译，然后我想运行最后一个以S开头的命令，该命令将运行

160
00:14:43,220 --> 00:14:50,220
spin. And now we can see there it is all nice hello world is on a line by itself.
旋转。现在我们可以看到，一切都很美好，你好，世界本身就在一条线上。

161
00:14:51,870 --> 00:14:57,600
Let's continue now, let's [sound] clear all this out [sound]. So let me just show
现在让我们继续，让我们[声音]把这一切都弄清楚。所以让我来展示一下

162
00:14:57,600 --> 00:15:02,610
you a few variations on the same program. What I'm going to do here is just rewrite
你可以看到同一节目的几个变种。我在这里要做的就是重写

163
00:15:02,610 --> 00:15:06,110
it in a couple of different ways. So I just illustrate a couple of features of
有几种不同的方式。因此，我只说明了以下几个功能

164
00:15:06,110 --> 00:15:10,420
COOL and get you more familiar with the syntax, and also just show some
很酷，让您更熟悉语法，还可以展示一些

165
00:15:10,420 --> 00:15:17,420
alternative ways to do the same thing. So you know this, this. A block here of, of
用不同的方式来做同样的事情。所以你知道这个，这个。一份挡路的，一份

166
00:15:18,140 --> 00:15:24,110
expressions is kind of a clumsy way to, to implement the Hello World program. So
表达式是实现Hello World程序的一种笨拙的方式。所以

167
00:15:24,110 --> 00:15:29,149
let's get rid of that. Let's get rid of the, the block. Let's get rid of the one
我们把它扔掉吧。我们把这个挡路去掉吧。我们把那个扔掉吧

168
00:15:29,149 --> 00:15:36,110
here at the end. Okay, let's just make the statement body a single expression again,
就在这里的尽头。好的，让我们再把语句体变成一个单独的表达式，

169
00:15:36,110 --> 00:15:41,839
and, and now the problem we're going to have is that the types won't match. But
现在我们面临的问题是类型不匹配。但

170
00:15:41,839 --> 00:15:47,450
just to illustrate that, let me show it to you so let's do COOL C of one dot CL, and
为了说明这一点，让我展示给你们看，所以让我们来做一个点CL的冷C，还有

171
00:15:47,450 --> 00:15:51,120
you'll see here that in complains that the inferred return type of the IO of the
您将在此处看到，在投诉中推断的

172
00:15:51,120 --> 00:15:55,769
method main does not conform to the declared return type INT. So coming back
方法Main不符合声明的返回类型int。所以回来的时候

173
00:15:55,769 --> 00:16:02,769
over here, the, to the program, The, the compiler figured out that this expression,
在这里，这个，给这个程序，这个，这个编译器算出来这个表达式，

174
00:16:03,839 --> 00:16:09,570
I dot out string, yields an object of type IO. So it returns the i object as the
我划掉字符串，生成IO类型的对象。因此它将I对象作为

175
00:16:09,570 --> 00:16:13,970
results evaluating this expression. And that does not match the type it. And so
计算此表达式的结果。这与它的类型不符。因此，

176
00:16:13,970 --> 00:16:17,240
naturally, the compiler says, hey, something's wrong with the types. Well,
自然，编译器会说，嘿，类型有问题。井,

177
00:16:17,240 --> 00:16:21,200
that's easily repaired. We can just change the return type or the main method to say
那很容易修好。我们只需更改返回类型或Main方法即可

178
00:16:21,200 --> 00:16:27,680
it returns something of type IO. So let's go back over here and see if that now
它返回IO类型的内容。所以让我们回到这里，看看现在

179
00:16:27,680 --> 00:16:34,680
works. So, we compile the program. And then we run spin on the output, and yes,
很管用。所以，我们编译了这个程序。然后我们对输出运行Spin，是的，

180
00:16:36,800 --> 00:16:41,610
everything still works as expected. Now, We don't have to be so specific about the
一切仍按预期进行。现在，我们不需要这么具体地

181
00:16:41,610 --> 00:16:46,480
type over here, since we're not actually using the result of the method body for
在这里键入，因为我们实际上没有将方法体的结果用于

182
00:16:46,480 --> 00:16:51,550
anything. I mean, the program just exits once it prints the string. We could have
什么都行。我的意思是，一旦打印出字符串，程序就会退出。我们本可以

183
00:16:51,550 --> 00:16:55,670
allowed ourselves more flexibility here. We could've just declared the result type
允许我们在这里有更大的灵活性。我们可以只声明结果类型

184
00:16:55,670 --> 00:17:01,579
of main to be of type Object. So Object is the root of the class hierarchy in COOL.
Main的类型为Object。因此，对象是COOL中类层次结构的根。

185
00:17:01,579 --> 00:17:07,120
Every other class is a subclass of Object. So let's come back over h, let's save this
每隔一个类就是Object的子类。所以让我们回到h，让我们留着这个

186
00:17:07,119 --> 00:17:14,120
first. And then we can come back over to our compilation window. We can compile it.
第一。然后我们可以回到编译窗口。我们可以编译它。

187
00:17:14,390 --> 00:17:21,390
And we can run it and it still works. So now another thing we can do if we want, is
我们可以运行它，它仍然有效。现在，如果我们愿意，我们可以做的另一件事是

188
00:17:22,540 --> 00:17:29,530
we could observe. Here that this attribute that we declare, this field I isn't really
我们可以观察。在这里，我们声明的这个属性，这个字段我实际上不是

189
00:17:29,530 --> 00:17:36,500
necessary. Here we, we allocate, you know we have a special name I when the main
这是必要的。在这里我们，我们分配，你知道我们有一个特别的名字，我主要的时候

190
00:17:36,500 --> 00:17:42,460
object is constructed to run the program, a new [inaudible] object is allocated to I
对象来运行程序，则会将一个新的[听不见]对象分配给i

191
00:17:42,460 --> 00:17:46,410
and then that gets used in the main method. We can actually just do all of
然后在main方法中使用它。我们实际上可以做所有的

192
00:17:46,410 --> 00:17:51,660
that inside the main method itself by just allocating a new [inaudible] object right
在main方法本身内部，只需分配一个新的[听不见的]对象权限

193
00:17:51,660 --> 00:17:58,660
here and then calling out string on that object. Alright, So this should also work.
在这里，然后调用对象上字符串。好的，这应该也行得通。

194
00:18:01,230 --> 00:18:08,230
And let's check it out. So it compiles. And lo and behold, it rots. Alright, So
让我们来看看这个。所以它会编译。看哪，它腐烂了。好的，那么

195
00:18:12,290 --> 00:18:15,520
coming back over here let's illustrate one more, or a couple more things that we
回到这里，让我们再来说明一件事，或者几件事，我们

196
00:18:15,520 --> 00:18:22,520
could do. So, we could also say that [inaudible] inherits From IO. So we have
可以的。所以我们也可以说[听不见]是从IO继承过来的。所以我们有

197
00:18:23,620 --> 00:18:28,620
to have the IO functionality somewhere in order to call the out string method. So we
在某个地方拥有IO功能，以便调用输出字符串方法。所以我们

198
00:18:28,620 --> 00:18:31,799
have been doing that by creating a separate object of type IO. But now we can
我一直在通过创建一个单独的IO类型的对象来做到这一点。但现在我们可以

199
00:18:31,799 --> 00:18:36,030
say well just the main object is itself. And something that has all the
可以说，主要的客体就是它本身。一些东西拥有所有的

200
00:18:36,030 --> 00:18:41,470
capabilities of IO by inheriting from IO. And if you've seen any [inaudible]
通过继承IO来实现IO的功能。如果你看到任何[听不见]

201
00:18:41,470 --> 00:18:45,900
language before this will be a familiar concept. So main here gets all the
在此之前的语言将是一个熟悉的概念。所以这里的Main得到了所有

202
00:18:45,900 --> 00:18:50,230
attributes and methods of IO, in addition to whatever attributes and methods of its
IO的属性和方法，以及其

203
00:18:50,230 --> 00:18:57,230
own that it will have. And now Instead of, of having to allocate a new IO object in
承认它将会拥有。现在，不必在中分配新的IO对象

204
00:18:57,330 --> 00:19:02,419
order to call out string, we can just invoke it on self, Which is the name of
为了调出字符串，我们可以只在self上调用它，它是

205
00:19:02,419 --> 00:19:07,390
the current object when the main method runs In other languages self is called
Main方法在其他语言中运行时的当前对象Self被调用

206
00:19:07,390 --> 00:19:14,390
this. Okay, and so let's we saved it, so let's go over and compile this. So it
这。好的，我们把它保存起来，然后再编译一下。就是这样

207
00:19:14,929 --> 00:19:21,929
compiles, it compiles and, and it runs, right? So last example here, we don't have
编译，编译，然后运行，对吗？所以这里的最后一个例子，我们没有

208
00:19:24,690 --> 00:19:31,280
to name self actually in this dispatch. There's a feature that allows us to call a
在这篇报道中提到了赛尔夫的名字。有一项功能允许我们调用

209
00:19:31,280 --> 00:19:35,260
method without explicitly naming the object on which it's dispatched and
方法，而不显式命名它被调度到的对象，并且

210
00:19:35,260 --> 00:19:40,440
defaults to self, so if no object is named in a dispatch then it's just a dispatched
缺省为self，因此如果在调度中没有命名对象，则它只是一个调度的

211
00:19:40,440 --> 00:19:47,440
self. So this should also work. [sound], And indeed it does. So that concludes our
赛尔夫。所以这也应该行得通。[声音]，确实是这样。所以我们的节目到此结束

212
00:19:50,290 --> 00:19:54,100
first example. In the next couple of videos we'll look at some more complex
第一个例子。在接下来的几个视频中，我们将看到一些更复杂的内容

213
00:19:54,100 --> 00:19:55,580
examples of COOL programming.
很酷的编程示例。

