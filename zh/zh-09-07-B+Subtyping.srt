0
00:00:01,319 --> 00:00:04,590
Now we can give a type-checking role for if-then-else. So
现在，我们可以为If-Then-Else指定类型检查角色。所以

1
00:00:04,590 --> 00:00:08,210
the first thing to know is about if-then-else expressions is that they do not
关于If-Then-Else表达式，首先要知道的是它们不

2
00:00:08,210 --> 00:00:11,959
affect the environment, and if-then-else neither introduces nor removes
影响环境，并且If-Then-Else既不会引入也不会移除

3
00:00:11,959 --> 00:00:16,420
any variables from the environment, so all the sub-expressions are
任何来自环境的变量，所以所有子表达式都是

4
00:00:16,420 --> 00:00:21,740
typed in the same environment as the entire expression. Now, the predicate of the
在与整个表达式相同的环境中键入。现在，

5
00:00:21,740 --> 00:00:25,509
FNL30, well that should have type [inaudible]. Because that's our decision whether
FNL30，好的，应该是[听不见]类型。因为这是我们的决定

6
00:00:25,509 --> 00:00:28,480
we're going to take the true branch or the false branch, But then the two
我们将选择真分支或假分支，但是这两个分支

7
00:00:28,480 --> 00:00:33,570
branches can have different types. E1 just has to have some type T1, and E2 just
分支可以有不同的类型。E1只需要有某种类型T1，而E2只需要

8
00:00:33,570 --> 00:00:37,780
has to have some type T2. So notice again what this is sayi ng. This is just saying
必须有某种T2类型。再次注意这是什么意思。这只是一种说法

9
00:00:37,780 --> 00:00:41,649
that E1 and E2 do have a type check. They have to be type correct but we don't care
E1和E2确实有类型检查。它们的类型必须是正确的，但我们不在乎

10
00:00:41,649 --> 00:00:45,039
what the type is. The type can be anything. And then the type of the entire
是什么类型的。类型可以是任何类型。然后是整个系统的类型

11
00:00:45,039 --> 00:00:49,809
expression is just going to be the least upper bound of T1 and T2. Because that's going
表达式将是T1和T2的最小上界。因为那将会是

12
00:00:49,809 --> 00:00:54,469
to be the best Estimate we can give to the final type of the expression given
是我们能给出的表达式的最后一种类型的最佳估计值

13
00:00:54,469 --> 00:00:59,320
that the truth branch might return T one something of type T one. And the false branch
真理分支可能返回类型为T的东西。和假树枝

14
00:00:59,320 --> 00:01:06,320
might return something of type T two. The rule for case expression is the most
可能会返回类型为T-2的内容。CASE表达式的规则最多

15
00:01:06,890 --> 00:01:13,250
complex one we've seen so far. But really it's a glorified if then L's. And it's
到目前为止我们见过的复杂的一个。但实际上，这是一个美化的IF THEN L‘s。而且它是

16
00:01:13,250 --> 00:01:17,030
relatively easy to understand if we just pull it apart. So, so let's begin by
如果我们把它拆开，相对容易理解。那么，那么让我们从

17
00:01:17,030 --> 00:01:22,390
reminding ourselves of what case does. First of all it looks at E0. It evaluates
提醒我们自己案件的作用。首先，它看一下E0。它会评估

18
00:01:22,390 --> 00:01:29,040
E0 and then it looks at the runtime type of E0. So, so it takes the dynamic class of
然后查看E0的运行时类型。所以，它把动态类

19
00:01:29,040 --> 00:01:33,720
E0 and then it looks at the first branch. >> Let's do that. >> And what is it
E0，然后查看第一个分支。>>我们就这么做吧。>>那是什么呢？

20
00:01:33,720 --> 00:01:37,520
going to do? It's going to compare the type of these [inaudible] at run time to the
要做什么？它将在运行时将这些[听不见]的类型与

21
00:01:37,520 --> 00:01:44,409
type t one, and if t one is super type. Of the run time type of E O And in fact,
类型t 1，如果t 1是超级类型。E O的运行时类型，事实上，

22
00:01:44,409 --> 00:01:47,759
it is the smallest of all the possible branches. It's the smallest super
它是所有可能的分支机构中最小的。这是最小的超级

23
00:01:47,759 --> 00:01:52,100
type of all the possible branches. Then it's going to pick this branch. It's going
所有可能分支的类型。然后它就会摘下这根树枝。它要走了

24
00:01:52,100 --> 00:01:58,039
to bind X1 to the value. It's going to give it the type T1. So combine X1 to the
将X1绑定到值。它会赋予它T1类型。因此，将X1与

25
00:01:58,039 --> 00:02:04,090
value of E O. It's going to retype it as. Type T one and it's going to evaluate E one.
E的值，它将重新键入为。键入T 1，它将计算E 1。

26
00:02:04,090 --> 00:02:08,899
So you can see in one sense it's a, it's a glorified if then else, we're just
所以你可以看到，从某种意义上说，这是一种美化，如果不是这样的话，我们只是

27
00:02:08,899 --> 00:02:14,020
picking the best matching branch, the one that, whose type, declared type, is, most
选择最匹配的分支，即其类型(声明的类型)为最多的分支

28
00:02:14,020 --> 00:02:18,050
closely matches the runtime type of E zero. And then we're going to execute that
与EZERO的运行时类型非常匹配。然后我们要执行

29
00:02:18,050 --> 00:02:23,820
branch with the variable that's named in that branch bound to the type of E zero. So
分支中命名的变量绑定到EZERO类型的分支。所以

30
00:02:23,820 --> 00:02:28,220
let's see how the typing works out. So first we type check E0 and we can some type
让我们看看打字结果如何。所以首先我们输入check E0，然后我们可以输入

31
00:02:28,220 --> 00:02:35,220
T0, and now what's going to happen well if we select. The branch, The first branch,
现在，如果我们选择，会发生什么呢？分支，第一个分支，

32
00:02:35,800 --> 00:02:39,660
Well, then, we're going to take the environment and we're going to extend
那么，我们要把环境问题扩展到

33
00:02:39,660 --> 00:02:44,640
it with the new variable x one which is going to have type t one. And so we only take
它有一个新的变量x，它的类型是t。所以我们只需要

34
00:02:44,640 --> 00:02:50,120
this branch, remember, if the runtime type of e zero matches t one, most closely
请记住，如果e0的运行时类型与t最接近，则此分支

35
00:02:50,120 --> 00:02:53,870
among all the branches, but if we do take it, then we're going to execute, execute e
在所有的分支中，但是如果我们取它，那么我们将执行，执行e

36
00:02:53,870 --> 00:02:59,950
one in this environment and we'll get back something of some type, t one prime, and similarly
在这种环境中，我们会得到某种类型的东西，这是一个质数，类似的

37
00:02:59,950 --> 00:03:04,100
for all the other branches until finally the last branch, which is exactly
对于所有其他分支，直到最后一个分支，这恰好是

38
00:03:04,100 --> 00:03:08,760
the same as the first one, just with the letter n replacing the number one. And so
与第一个相同，只是用字母n代替了数字1。因此，

39
00:03:08,760 --> 00:03:13,620
since we don't know which brain to match at one time, it could be any of the branches
因为我们不知道同时匹配哪个大脑，所以可能是任何一个分支

40
00:03:13,620 --> 00:03:17,650
that actually executes and therefore the type of the entire expression
它实际执行，因此整个表达式的类型

41
00:03:17,650 --> 00:03:23,120
is just going to be least upper bound over all of the types a, of the various
将是所有类型a的最小上界，不同类型的

42
00:03:23,120 --> 00:03:26,510
branches, and here I've just extendedly super bound from a binding area
分支，这里我刚刚从一个绑定区域扩展了超级绑定

43
00:03:26,510 --> 00:03:30,420
of the operation a, to an in area operation a, that should be clear enough,
操作a，到区域操作a中的操作，这应该是足够清楚的，

44
00:03:30,420 --> 00:03:33,410
we're just going to take the least upper bound to all of these types.
我们只取所有这些类型的最小上界。

