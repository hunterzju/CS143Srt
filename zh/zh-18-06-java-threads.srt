0
00:00:03,820 --> 00:00:06,870
In this video, we're gonna talk a little bit about concurrency in programming
在这段视频中，我们将稍微讨论一下编程中的并发性

1
00:00:06,870 --> 00:00:13,870
languages and in particular, Java's use of threads. Java has concurrency built in
语言，特别是Java对线程的使用。Java具有内置的并发性

2
00:00:16,129 --> 00:00:21,810
through threads and I'm not going to explain what a thread is from first
通过线程，我不会先解释线程是什么

3
00:00:21,810 --> 00:00:25,590
principles in this video. So I'm going to assume a little bit of background but
这段视频中的原则。所以我要假设一点背景，但是

4
00:00:25,590 --> 00:00:30,679
we'll say a few words here about what threads are. So a thread is like its own
在这里，我们将简单介绍一下线程是什么。所以一条线就像它自己的线一样

5
00:00:30,679 --> 00:00:34,670
program. It has its own program counter, meaning, it has an instruction that it's
程序。它有自己的程序计数器，也就是说，它有一条指令

6
00:00:34,670 --> 00:00:39,510
executing and it has its own set of local variables and activation records. And a
执行，并且它有自己的一组局部变量和激活记录。和一个

7
00:00:39,510 --> 00:00:44,280
Java program, or any program written in any language with threads may have
Java程序或用任何语言编写的任何带有线程的程序都可能具有

8
00:00:44,280 --> 00:00:49,250
multiple threads at the same time. So, abstractly, we can think of threads as
同时使用多个线程。因此，抽象地说，我们可以将线程视为

9
00:00:49,250 --> 00:00:53,920
being a series of exec, of, of statements that are executed. Each, one of these
是被执行的语句的一系列EXEC、OF、OF。每一个，这些中的一个

10
00:00:53,920 --> 00:00:59,649
threads again, has its own set of local variables. But the threads may refer to
线程也有自己的一组局部变量。但是这些线程可能会引用

11
00:00:59,649 --> 00:01:04,720
common data in the heap. So they could refer to the same heap data structures.
堆中的公共数据。因此它们可以引用相同的堆数据结构。

12
00:01:04,720 --> 00:01:09,290
And, each thread is executing a particular instruction, so let's say that the threads
而且，每个线程都在执行一条特定的指令，所以让我们假设这些线程

13
00:01:09,290 --> 00:01:15,280
are all, here we have three threads, one, two, and three. And they're each at some
都齐了，这里有三条线，一条、二条和三条。他们每个人都在某种程度上

14
00:01:15,280 --> 00:01:22,280
instruction or some, statement in the program. And then there is a scheduler and
程序中的指令或某些语句。然后有一个调度器，

15
00:01:23,159 --> 00:01:30,159
at each step of execution, the scheduler will pick one thread to execute. And it'll
在执行的每个步骤中，调度程序都会选择一个线程来执行。然后它就会

16
00:01:32,280 --> 00:01:38,729
execute one statement. And this is conceptual. Meaning, this isn't exactly
执行一条语句。这是概念性的。意思是，这并不完全是

17
00:01:38,729 --> 00:01:44,530
the way it's usually implemented. And then it will repeat this loop. So it'll pick a
它通常的实现方式。然后它会重复这个循环。所以它会选择一个

18
00:01:44,530 --> 00:01:47,240
thread, it'll execute one statement of that thread and it'll just keep doing that
线程，它会执行该线程的一条语句，并且会一直这样做

19
00:01:47,240 --> 00:01:50,689
over and over again. So we might for example, the schedule might pick thread
一遍又一遍。因此我们可能，例如，日程安排可能会选择线程

20
00:01:50,689 --> 00:01:55,810
one and execute this first statement. And then it might pick thread two and execute
1并执行这第一条语句。然后它可能会选择线程2并执行

21
00:01:55,810 --> 00:01:59,439
this statement, and then it might pick thread three and execute that statement.
该语句，然后它可能选择线程3并执行该语句。

22
00:01:59,439 --> 00:02:02,549
And then it might decide well to execute another statement of thread two, and then
然后它可能会很好地决定执行线程2的另一条语句，然后

23
00:02:02,549 --> 00:02:06,369
it might execute several statements of thread one. And then it might come back
它可能执行线程1的几个语句。然后它可能会回来

24
00:02:06,369 --> 00:02:09,940
and execute a couple statements of thread three, and then thread two might get to go
并执行线程3的几个语句，然后线程2可能开始

25
00:02:09,940 --> 00:02:16,940
again for a while, and so on. All right, so, the threads execute in some order. And
再来一段时间，以此类推。好的，所以，线程按一定的顺序执行。和

26
00:02:18,210 --> 00:02:22,520
it's non-deterministic at each step of execution which thread will execute, how
它在执行的每一步都是不确定的，哪个线程将执行，如何执行

27
00:02:22,520 --> 00:02:28,300
many of its instructions will be executed. And, and thus the threads may inter-lead,
它的许多指令将被执行。并且因此线程可以相互引导，

28
00:02:28,300 --> 00:02:33,040
the instructions in the threads may inter-lead in a relatively or, in fact,
线程中的指令可以在相对或事实上，

29
00:02:33,040 --> 00:02:38,910
completely arbitrary order. Alright? Now, coming back to how this is done in Java,
完全武断的顺序。好吗？现在，回到Java是如何做到这一点的，

30
00:02:38,910 --> 00:02:43,000
thread objects in Java all have class threads. So there's a special class that
Java中的Thread对象都有类线程。所以有一个特殊的班级

31
00:02:43,000 --> 00:02:47,200
you have to inherit from in order to be a thread. And what you get, when you inherit
你必须继承才能成为一条线。当你继承的时候，你会得到什么

32
00:02:47,200 --> 00:02:52,120
from the thread class is, you will have start and stop methods for beginning and
在Thread类中，您将拥有开始和停止的Start和Stop方法

33
00:02:52,120 --> 00:02:57,730
ending the thread. Alright? And there's some other special properties of threads.
结束线程。好吗？还有一些线程的其他特殊性质。

34
00:02:57,730 --> 00:03:04,730
And in particular, one thing that threads can do is to synchronize on objects. So,
特别值得一提的是，线程可以做的一件事就是在对象上使用同步。所以,

35
00:03:05,040 --> 00:03:11,670
a, a, a thread can, acquire a lock on an object through the synchronized construct.
线程可以通过同步构造获得对象上的锁。

36
00:03:11,670 --> 00:03:18,670
And so if I say synchronized xe in Java, what that means is, that the program will
因此，如果我在Java中说同步Xe，这意味着程序将

37
00:03:19,420 --> 00:03:26,420
acquire a lock on x before it executes e. So the procedure here will be to lock x,
在x执行e之前获取它的锁。所以这里的过程将是锁定x，

38
00:03:26,840 --> 00:03:33,840
then evaluate e, and then unlock x, alright? So it's a structured
然后计算e，然后解锁x，好吗？所以这是一个结构化的

39
00:03:34,920 --> 00:03:40,920
synchronization construct. And within, while it is executing the expression e, it
同步构造。在内部，当它执行表达式e时，它

40
00:03:40,920 --> 00:03:47,560
will hold a lock on x. And this is the primary way, really almost the only way in
将锁定x。这是主要的途径，几乎是唯一进入的途径

41
00:03:47,560 --> 00:03:53,540
Java, to get synchronization between, multiple threads. So this is how we, one
Java，以获得多个线程之间的同步。所以这就是我们，一个

42
00:03:53,540 --> 00:03:58,920
can control the set of interleavings because while one thread is executing,
可以控制交织集合，因为当一个线程正在执行时，

43
00:03:58,920 --> 00:04:03,970
this particular block of code, no other thread can execute this block of code and
这种特殊的挡路代码，没有其他线程可以执行这种挡路代码

44
00:04:03,970 --> 00:04:09,480
also hold a lock on the same object x. Now could, two threads could execute this same
还可以在同一对象x上持有锁。现在可以，两个线程可以执行相同的操作

45
00:04:09,480 --> 00:04:13,320
syntactic construct if they were locking, if, if their local variables actually
语法构造，如果它们是锁定的，如果，如果它们的局部变量实际上

46
00:04:13,320 --> 00:04:17,430
referred to different objects. But they're guaranteed not to interfere with each
指的是不同的对象。但他们保证不会干扰每一个人

47
00:04:17,430 --> 00:04:23,090
other, not to interweave, if they tried to lock the same object x, alright? Now
其他的，不是交织的，如果他们试图锁定相同的物体x，好吗？现在

48
00:04:23,090 --> 00:04:27,820
there's one shorthand in Java which is used more commonly than this form, the
在Java中有一种速记，它比这种形式更常用，那就是

49
00:04:27,820 --> 00:04:31,570
synchronized construct. And as the synchronization can be put on methods. We
同步构造。并且由于同步可以放在方法上。我们

50
00:04:31,570 --> 00:04:38,570
can say, synchronized f, where this is a method definition. Alright? An d what this
可以说是同步的f，其中这是一个方法定义。好吗？这是什么？

51
00:04:40,930 --> 00:04:45,780
means is that, when this method is called, that this object will be locked. So here,
意味着当调用此方法时，此对象将被锁定。所以在这里，

52
00:04:45,780 --> 00:04:49,030
the object that's going to be locked is implicit. And when synchronized is
要锁定的对象是隐式的。而当同步时，

53
00:04:49,030 --> 00:04:53,680
attached to a method name, or a method declaration, that always means that this
附加到方法名称或方法声明，这始终意味着这

54
00:04:53,680 --> 00:05:00,150
parameter will be the synchronized or locked object. Let's take a look at the
参数将是同步或锁定的对象。我们来看一下

55
00:05:00,150 --> 00:05:04,150
simple example and think about what happens if we have two methods, one of
简单的示例，并考虑如果我们有两个方法，其中一个是

56
00:05:04,150 --> 00:05:08,460
which calls the method two of the class simple and one of which calls the method
它调用方法两个类Simple，其中一个调用该方法

57
00:05:08,460 --> 00:05:15,460
fro. So let's take a look at that, let's say we have thread one and thread two. And
前排。让我们来看看这一点，假设我们有线程1和线程2。和

58
00:05:15,510 --> 00:05:21,100
now, thread one is going to invoke the method two and thread two is going to
现在，线程1将调用方法2，线程2将调用

59
00:05:21,100 --> 00:05:26,280
invoke the method fro. All right? So one possibility here, let's say that, that two
调用的方法。好的?所以这里有一种可能性，比方说，那两个

60
00:05:26,280 --> 00:05:31,150
gets to run all the way to completion before fro executes anything. So then
在fro执行任何操作之前一直运行到完成。那么，那么

61
00:05:31,150 --> 00:05:38,070
we'll have a = three and b = four, okay? And then fro will run and it will print
我们会有a=3和b=4，好吗？然后，fro将运行并打印

62
00:05:38,070 --> 00:05:45,070
out the string a = three, b = four. Okay? So that's a relatively simple straight
出字符串a=3，b=4。好吧?所以这是一条相对简单的直线

63
00:05:49,330 --> 00:05:56,250
forward case. You know another possibility is that thread two gets to run before
前述案例。你知道另一种可能性是线程2在运行之前

64
00:05:56,250 --> 00:05:59,730
thread one ever does anything. So thread two executes all of it's instructions
线上的人曾经做过任何事。所以线程2执行它的所有指令

65
00:05:59,730 --> 00:06:04,870
before thread one executes anything at all. In which case what will be printed.
在线程1执行任何东西之前。在这种情况下，将打印什么。

66
00:06:04,870 --> 00:06:11,870
Well, the fro will print out a = one, b = two, alright? And two will then run, and
嗯，FRO会打印出a=1，b=2，好吗？然后两个人会跑起来，然后

67
00:06:14,770 --> 00:06:21,150
it will set after this executes. So, after this, after fro finishes executing, it
它将在此执行后设置。所以在这之后，在fro执行完之后，它

68
00:06:21,150 --> 00:06:25,660
will then set a = three and b = four. That's another possibility and both of
然后设置a=3和b=4。这是另一种可能性，而且

69
00:06:25,660 --> 00:06:29,120
those are fine, alright? But then there are some other odd possibilities, and
这些都很好，好吗？但是还有其他一些奇怪的可能性，而且

70
00:06:29,120 --> 00:06:33,460
let's take a look at one of those. What happens if the thread is actually enter
让我们来看看其中的一个。如果线程实际进入会发生什么情况

71
00:06:33,460 --> 00:06:39,570
leave in a non-trivial way. So let's consider the following possibilities.
以一种不平凡的方式离开。因此，让我们考虑以下可能性。

72
00:06:39,570 --> 00:06:46,260
Let's say that two executes these assignment, a = three. And now fro
假设两个人执行这些赋值，a=3。现在是前前后后

73
00:06:46,260 --> 00:06:53,260
executes the first part of the print. So, it does the read of a and starts building
执行打印的第一部分。因此，它读取a并开始构建

74
00:06:53,770 --> 00:07:00,770
up this output string, okay? So, it's going to print out here, a = three,
把这个输出字符串向上，好吗？所以，它将打印在这里，a=3，

75
00:07:02,940 --> 00:07:08,870
alright? And then, now lets say that fro actually goes ahead and gets to run some
好吗？然后，现在让我们假设fro实际上运行了一些

76
00:07:08,870 --> 00:07:13,340
more and also goes ahead and prints out the rest of this. Okay? So, actually does
更多的，还在继续打印出这个的睡觉。好吧?所以，实际上是这样的

77
00:07:13,340 --> 00:07:20,340
the second read of b so the n it will print b = two. All right? And then one
第二次读取b，所以n将打印b=2。好的?然后再来一个

78
00:07:23,280 --> 00:07:30,090
will run, the rest of the way through, excuse me, b = four. And so here we got an
要跑的话，睡觉一路过去，打扰一下，b=4。所以我们这里有一个

79
00:07:30,090 --> 00:07:34,110
output that doesn't seem quite right. Here we got, we were able to see an
产出看起来不太对劲。在这里，我们可以看到一个

80
00:07:34,110 --> 00:07:41,110
intermediate state where thread one had only executed partially. And so, what came
线程1仅部分执行的中间状态。那么，后来发生了什么呢？

81
00:07:42,010 --> 00:07:48,919
out over here, in fro show you know, just a partial update of the variables a and b.
在这里，在fro show中，只更新了变量a和b的一部分。

82
00:07:48,919 --> 00:07:53,270
So one had been written but not the other. And if we didn't want to do that, if we
所以一个已经写好了，而另一个没有。如果我们不想这么做，如果我们

83
00:07:53,270 --> 00:07:58,360
thought this was wrong, we would have to use synchronization in order to control
虽然这是错误的，但我们将不得不使用同步来控制

84
00:07:58,360 --> 00:08:02,199
that. So, let's take a look then at using synchronization to try to prevent this
那。那么，让我们看一下如何使用同步来尝试防止这种情况

85
00:08:02,199 --> 00:08:07,419
from happening. And I'll tell you right upfront that this piece of code or this
避免发生。我要直截了当地告诉你，这段代码或者这段

86
00:08:07,419 --> 00:08:11,610
attempt is incorrect and actually it doesn't solve the problem at all. But it
尝试是不正确的，实际上根本解决不了问题。但是它

87
00:08:11,610 --> 00:08:16,550
also illustrates probably the most common thread programming error that Java
还说明了Java可能最常见的线程编程错误

88
00:08:16,550 --> 00:08:20,990
programmers make. And lots of people, including professional programmers make
程序员制造。很多人，包括专业程序员

89
00:08:20,990 --> 00:08:26,300
this mistake and lots of production Java programs have this particular mistake in
这个错误和许多生产Java程序在

90
00:08:26,300 --> 00:08:31,070
them. So it's a very instructive example, I think. So let's take a look here. Let's
他们。所以我认为这是一个非常有启发性的例子。那么让我们来看看这里。我们走吧

91
00:08:31,070 --> 00:08:36,500
assume we have the, the two threads again. The thread is going to call two and the
假设我们又有了，这两条线。线程将调用Two，而

92
00:08:36,500 --> 00:08:40,710
thread is going to call fro. And let's say that, in our heap, there is only one
线程将调用FRO。假设在我们的堆中只有一个

93
00:08:40,710 --> 00:08:46,630
object simple, and let's just call it s. So this is globally, in the entire heap
对象简单，我们就称它为s。所以这是全局的，在整个堆中

94
00:08:46,630 --> 00:08:53,310
just one object, s, of the simple class. Alright? So what is, let's say that thread
只有一个简单类的对象%s。好吗？那么，让我们假设这条线索

95
00:08:53,310 --> 00:08:58,460
one is going to go first, alright, and the first that it's going to do, because it's,
一个要先走，好的，第一个要做的，因为它是，

96
00:08:58,460 --> 00:09:02,490
synchronized method, is it's going to lock the this parameter of the call since
同步方法，它是否会锁定调用的this参数，因为

97
00:09:02,490 --> 00:09:07,310
there's only one simple, only one, object of the simple class that has to be the
简单类中只有一个简单的、只有一个对象必须是

98
00:09:07,310 --> 00:09:11,820
object s, so it's going to lock s. Alright, now we'll prevent any other
对象%s，所以它将锁定%s。好的，现在我们将阻止任何其他

99
00:09:11,820 --> 00:09:18,820
thread from acquiring the lock on s while, while thread one holds that lock. So then,
线程1持有该锁时，线程不能获取%s While上的锁。那么，那么，

100
00:09:18,900 --> 00:09:23,490
thread one can go ahead and execute the statement a = three. And now though, we
线程1可以继续执行语句a=3。但现在，我们

101
00:09:23,490 --> 00:09:27,810
could have interruption and thread two can get to run. And notice here that thread
可能会有中断，线程2可以开始运行。注意这根线

102
00:09:27,810 --> 00:09:34,360
two doesn't check the lock. It goes ahead execute this code over here. In the f ro
二号不能检查锁。它继续在这里执行这段代码。在f中

103
00:09:34,360 --> 00:09:38,750
method but that's not synchronized, there is no synchronize keyword there. And so
方法，但这不是同步的，那里没有同步关键字。因此，

104
00:09:38,750 --> 00:09:45,040
just the fact that somebody else holds the lock on a simple object doesn't prevent
仅仅是其他人持有简单对象的锁这一事实并不能阻止

105
00:09:45,040 --> 00:09:51,510
another method from accessing the fields or the data of that object if that other
访问该对象的字段或数据的另一种方法，如果另一种

106
00:09:51,510 --> 00:09:56,150
method doesn't itself check the lock. So if the other method is not synchronized,
方法本身不检查锁。因此，如果另一种方法不同步，

107
00:09:56,150 --> 00:10:02,960
it will just go ahead and, and, and, and execute ignoring the fact that another
它将继续并执行，而忽略另一个事实

108
00:10:02,960 --> 00:10:07,760
thread holds the lock on the object. So, in this case, this will just, this can
线程持有对象上的锁。所以，在这种情况下，这个就是，这个可以

109
00:10:07,760 --> 00:10:14,750
just run to completion. And we'll print out, a = three, b = two. Okay? So we only
只要完成就行了。我们会打印出来，a=3，b=2。好吧?所以我们只有

110
00:10:14,750 --> 00:10:21,750
see one of the two updates. And, and then the scheduler can come back in. Let's the
请参阅两个更新之一。然后，然后调度员就可以回来了。让我们一起来

111
00:10:24,330 --> 00:10:31,330
other thread run and it would run to completion and unlock the object at the
其他线程运行，它将运行到完成，并在

112
00:10:32,110 --> 00:10:36,290
end. And you could see here that this particular attempted fix has achieved
结束。你可以在这里看到，这种特殊的尝试修复已经实现了

113
00:10:36,290 --> 00:10:42,300
nothing. Actually all the possible inter leavings of the two methods that were,
没什么。实际上，这两种方法的所有可能的交错，

114
00:10:42,300 --> 00:10:46,600
that existed without any synchronization still exist if only one of the two methods
如果这两种方法中只有一种方法存在，则在没有任何同步的情况下仍然存在

115
00:10:46,600 --> 00:10:51,830
is synchronized. And the reason this error is common is because frequently people
是同步的。这个错误之所以常见，是因为人们经常

116
00:10:51,830 --> 00:10:57,649
think well, I, you know if reads are okay I can always read from things in parallel
好好想一想，我，你知道，如果阅读可以的话，我总是可以并行阅读的

117
00:10:57,649 --> 00:11:01,390
and that won't cause any problems because I'm not altering any data. It's my writes
这不会造成任何问题，因为我没有更改任何数据。这是我写的

118
00:11:01,390 --> 00:11:06,440
that have to be synchronized, so if I'm going to write to fields of objects well
它们必须是同步的，所以如果我要很好地写入对象的字段

119
00:11:06,440 --> 00:11:11,510
that needs to be coordinated with other methods because writes are dangerous but
这需要与其他方法协调，因为写入是危险的，但是

120
00:11:11,510 --> 00:11:16,140
reads somehow don't interfere. And the point here is that if, having only one
阅读不知何故不会干扰你。这里的重点是，如果只有一个

121
00:11:16,140 --> 00:11:22,120
method, or only having one half of the accesses to the, of two accesses to shared
方法，或者对共享的两个访问中只有一半的访问。

122
00:11:22,120 --> 00:11:28,820
data be synchronized doesn't help because synchronization only works if everybody is
要同步的数据没有帮助，因为只有当每个人都同步时，同步才会起作用

123
00:11:28,820 --> 00:11:33,680
checking the lock. So both the reader and the writer need to check the lock in order
正在检查锁。因此读取器和写入器都需要按顺序检查锁

124
00:11:33,680 --> 00:11:37,880
to restrict the set of possible interleavings of these two methods. So,
以限制这两种方法的可能交织的集合。所以,

125
00:11:37,880 --> 00:11:40,720
what would be a correct way to do it? Well, is just to put the synchronized
做这件事的正确方法是什么？嗯，就是把同步的

126
00:11:40,720 --> 00:11:46,380
keyword on both methods. And now. It's not possible to have the interleaving we saw
两种方法上的关键字。现在呢。我们看到的交错是不可能的

127
00:11:46,380 --> 00:11:52,420
before it's not just only two possible outputs. One, there are only two possible
在此之前，它不仅仅是两种可能的输出。第一，只有两种可能

128
00:11:52,420 --> 00:11:59,410
strings that could be p rinted. One is that a = one and b = two. So, in this
可以打印的字符串。一个是a=1，b=2。所以，在这件事上

129
00:11:59,410 --> 00:12:06,410
case, the fro method executes before the two method, so that's fro before two,
在这种情况下，fro方法在两个方法之前执行，所以在两个方法之前是fro，

130
00:12:06,640 --> 00:12:13,640
okay? I mean, all of fro before all of the two method. And the other possibility is a
好吧?我是说，在这两种方法之前都是这样。另一种可能性是

131
00:12:13,950 --> 00:12:20,950
= three, b = four, alright? And that would be the two method executing in its
=三，b=四，好吗？这将是在其

132
00:12:22,339 --> 00:12:26,779
entirety before the fro method. And those become the only two possible
在fro方法之前是整体。这就成了仅有的两种可能

133
00:12:26,779 --> 00:12:32,860
inter-leavings when both methods here are synchronized. I'm going to conclude this
此处的两个方法同步时的交错。我要得出这样的结论

134
00:12:32,860 --> 00:12:37,910
video by making a couple of other comments on Java's threads. So, one property we
通过在Java的线程上做一些其他的评论来播放视频。所以，我们有一处房产

135
00:12:37,910 --> 00:12:42,790
would like, is that even if there is no synchronization, a variable should only
我想说的是，即使没有同步，变量也应该只

136
00:12:42,790 --> 00:12:46,980
hold values that were actually written by some threads. So, what do I mean by that?
保存某些线程实际写入的值。那么，我这么说是什么意思呢？

137
00:12:46,980 --> 00:12:52,110
Let's say that we have two assignments. This is in thread one, where we're
假设我们有两个作业。这是线程一，我们在这里

138
00:12:52,110 --> 00:12:58,440
assigning a the value of 3.14, then in thread two, we're assigning a the value
赋值为3.14，然后在线程2中，我们为赋值

139
00:12:58,440 --> 00:13:02,880
2.78. And so after these assignments are done, after they've executed in some
2.78。所以在这些任务完成之后，在他们执行了一些

140
00:13:02,880 --> 00:13:09,350
order, what do we expect? Well, we expect that a ends up being equal either to 3.14
秩序，我们还能期待什么？我们预计a最终会等于3.14

141
00:13:09,350 --> 00:13:16,339
or 2.78, alright? Now what we don't want is for a to wind up being some other
或者2.78，好吗？现在我们不想看到的是一个人最终变成了另一个人

142
00:13:16,339 --> 00:13:22,959
value, okay? I mean what if a turned out to be 3.78 for example, okay? This would
价值，好吗？我的意思是，如果a结果是3.78怎么办，好吗？这将会

143
00:13:22,959 --> 00:13:29,959
be bad, we don't want this, right? Because this value, 3.78, was never written by
做坏人，我们不想这样，对吧？因为这个值3.78从来不是由

144
00:13:30,320 --> 00:13:35,950
either thread. Okay, this value was somehow manufactured. And I've chose 3.78,
任一条线都行。好的，这个值是以某种方式制造出来的。我选择了3.78，

145
00:13:35,950 --> 00:13:39,600
to kind of indicate what could potentially go wrong. If we somehow wound up with a
某种程度上表明可能会出什么问题。如果我们以某种方式以一种

146
00:13:39,600 --> 00:13:45,890
mix of the bits or the, the pieces of the number from thread one and thread two. If
把线一和线二的数字碎片混合在一起。如果

147
00:13:45,890 --> 00:13:50,550
they were re-combined in some strange way, then we could create a number, that was
它们以某种奇怪的方式重新组合，然后我们就可以创造一个数字，那就是

148
00:13:50,550 --> 00:13:55,860
assigned to a that didn't exist in either thread. Okay, it was never actually
分配给在两个线程中都不存在的。好吧，实际上从来都不是

149
00:13:55,860 --> 00:14:01,820
written in either thread. Now, Java does guarantee that the rights of values are
写在任一线程中。现在，Java确实保证了值的权利是

150
00:14:01,820 --> 00:14:05,790
atomic. Meaning that if I write to a value, if I sign a primitive type to
原子弹。这意味着如果我写入值，如果我给基元类型签名

151
00:14:05,790 --> 00:14:08,800
something, that is going to happen atomically and won't be interfered with by
一些事情，它将自动发生，不会被

152
00:14:08,800 --> 00:14:14,269
another assignment to the same memory location except for floating point
对同一内存位置(浮点除外)的另一赋值

153
00:14:14,269 --> 00:14:20,330
doubles. So this does not hold writes to doubles or not necessarily atomic. Now,
双人间。因此，这不包含对Double的写入，也不一定是原子写入。现在,

154
00:14:20,330 --> 00:14:25,850
why would that be? Well, a double is a floating point number, but it consumes
为什么会这样呢？嗯，双精度数是一个浮点数，但是它消耗

155
00:14:25,850 --> 00:14:31,180
twice the memory. That's why it's called a double, it consumes two words. Okay, and
是记忆的两倍。这就是为什么它被称为双字，它消耗两个单词。好的，还有

156
00:14:31,180 --> 00:14:35,209
what that means is that if a here is a double, so let's assume that a is a
这意味着，如果这里的a是双精度的，那么让我们假设a是一个

157
00:14:35,209 --> 00:14:40,970
double. That means that this write of 3.14 actually translates into two machine
双倍。这意味着3.14写入实际上转换为两台机器

158
00:14:40,970 --> 00:14:47,910
instructions. We have to write the high part of a equals something and then the
说明书。我们必须写出a的高位部分等于某个值，然后

159
00:14:47,910 --> 00:14:54,350
lower part of a. So, the two machine instructions to write both of the words
a的下半部分。所以，两个机器指令来写这两个词

160
00:14:54,350 --> 00:14:57,740
that represent a after writing the high half and the low half. Okay because there
这表示在写完上半部分和下半部分之后。好的，因为在那里

161
00:14:57,740 --> 00:15:03,480
isn't a, a primitive double word write on most machines. And the same thing would
不是大多数机器上原始的双字书写。同样的事情也会发生

162
00:15:03,480 --> 00:15:07,370
happen in thread two. This would get broken up into two assignments to the two
发生在线程2中。这将被分解成两个分配给两个人的任务

163
00:15:07,370 --> 00:15:10,740
halves of a. And then, just from what we discussed before, you can see that these
然后，从我们之前讨论的内容可以看出，这些

164
00:15:10,740 --> 00:15:15,450
could interleave in some way and you might wind up with the unfortunate situation
可能会以某种方式交织在一起，最终你可能会陷入不幸的境地

165
00:15:15,450 --> 00:15:21,029
that the high half of the representation of a is written by thread one, and the low
A表示的上半部分由线程1写入，而下半部分由线程1写入

166
00:15:21,029 --> 00:15:25,560
half is written by thread two, and then you can get a number like this, like you
一半是由线程2写的，然后你可以得到一个像这样的数字，就像你一样

167
00:15:25,560 --> 00:15:30,980
know, something not exactly 3.78, but some mix of the bits from the write in thread
确切地说，不是3.78，而是写入线程中的一些位的混合

168
00:15:30,980 --> 00:15:35,140
one and the write at thread two, and you would create what's called an out of thin
线程1和线程2处的写入，您将创建所谓的超薄

169
00:15:35,140 --> 00:15:42,140
air value. Okay, and clearly out of thin air values are bad. Okay, you do not want
空气值。好吧，很明显，无中生有的价值观是不好的。好的，你不会想要

170
00:15:44,860 --> 00:15:49,420
those. And, and Java guarantees, again, that the rights of almost all the
那些。而且，Java再次保证，几乎所有

171
00:15:49,420 --> 00:15:52,240
primitive data types are going to be atomic so you can't get out of thin air
原始数据类型将是原子的，因此您不能凭空获得

172
00:15:52,240 --> 00:15:57,950
values. But for performance reasons, this is not the case for doubles. All right.
价值。但出于性能原因，双打情况并非如此。好的。

173
00:15:57,950 --> 00:16:02,329
So, so, so, for fro as a, what it says in the manual is that as a concession, the
所以，作为一个，手册上说的是，作为一种让步，

174
00:16:02,329 --> 00:16:09,329
current hardware, they do not require that rights to doubles be atomic unless you the
当前的硬件，它们不需要双精度的权限是原子的，除非您的

175
00:16:10,110 --> 00:16:15,839
programmer go and mark the type as volatile. So you have to declare doubles
程序员前往并将该类型标记为易失性。所以你必须申报双人

176
00:16:15,839 --> 00:16:20,610
to be volatile, and if you do that, then they're guaranteed to be atomic writes.
易失性，如果这样做，那么它们肯定是原子写入。

177
00:16:20,610 --> 00:16:25,660
Okay, so if you were writing Java programs using Java threads, and you were
好的，如果您正在使用Java线程编写Java程序，并且您

178
00:16:25,660 --> 00:16:31,290
programming threads that read and write doubles concurrently, then you need to be
编程并发读取和写入双倍数据的线程，那么您需要

179
00:16:31,290 --> 00:16:35,550
careful to declare those double types volatil e, at least currently, and this
至少在当前，要小心地声明这两种类型，并且这

180
00:16:35,550 --> 00:16:38,899
may change in the future, and I'm sure they'd like to change it. But currently
未来可能会改变，我相信他们也想改变。但目前

181
00:16:38,899 --> 00:16:42,640
you have to declare the doubles volatile to guarantee that the writes will be
您必须声明DOUBLE是易失性的，以保证写入将是

182
00:16:42,640 --> 00:16:48,790
atomic. More generally, or actually somewhat separately, this is actually a
原子弹。更笼统地说，或者实际上有些不同，这实际上是一个

183
00:16:48,790 --> 00:16:52,360
separate point here, Java concurrency semantics are actually kind of hard to
另外一点，Java并发语义实际上很难

184
00:16:52,360 --> 00:16:58,600
understand in detail. And this, this issue around, out of thin air values, is, is one
详细了解。而这个，这个围绕着的这个问题，凭空而来的价值，就是，

185
00:16:58,600 --> 00:17:05,600
aspect of this. There are several other aspects, of it. And, and, and this is
这件事的一个方面。它还有其他几个方面。还有，还有，这是

186
00:17:05,980 --> 00:17:09,959
really not Java's fault. It turns out the concurrency semantics are hard and
真的不是Java的错。事实证明，并发语义很难实现，而且

187
00:17:09,959 --> 00:17:15,029
actually, this is kind of at the frontier of research. We don't really understand
实际上，这是一种研究的前沿。我们不太明白

188
00:17:15,029 --> 00:17:21,730
exactly what we want or what the right thing is to do, to specify the behavior of
确切地说我们想要什么，或者什么是正确的事情要做，来具体说明

189
00:17:21,730 --> 00:17:26,149
languages, in concurrent settings. And, that's not to say that we don't understand
语言，在并发设置中。而且，这并不是说我们不理解

190
00:17:26,148 --> 00:17:30,809
anything. We do have some languages in perfectly, concurrency semantics but in a
什么都行。我们确实有一些语言在完美的并发语义中，但是在

191
00:17:30,809 --> 00:17:35,519
language, flow in language, feature is Java, there are a number of things that
语言，在语言中流动，功能是Java，有很多东西

192
00:17:35,519 --> 00:17:41,139
are not completely clear how they should be implemented on certain machines. So
并不完全清楚它们应该如何在某些机器上实现。所以

193
00:17:41,139 --> 00:17:45,609
this has been a huge amount of work done on this problems specifically for Java and
这是专门针对Java和Java在这个问题上所做的大量工作

194
00:17:45,609 --> 00:17:50,580
actually java was the first mainstream language to have first class threads in it
实际上，java是第一种拥有一级线程的主流语言。

195
00:17:50,580 --> 00:17:55,039
and then try to integrate that with all other language features that all other
然后尝试将其与所有其他语言功能集成

196
00:17:55,039 --> 00:17:58,970
modern languages features that we like. It was so surprising actually that we have
现代语言是我们喜欢的特色。事实上，我们有这么多令人惊讶的

197
00:17:58,970 --> 00:18:03,539
run into some trouble understanding how they are supposed to work in all
在理解他们应该如何工作时遇到了一些麻烦

198
00:18:03,539 --> 00:18:10,169
situations. So this is one area of Java that I would say still under debate. And
情况。所以这是Java的一个领域，我想说它仍然在争论中。和

199
00:18:10,169 --> 00:18:13,350
while for them, while I figure out straight forward things with threads
而对他们来说，当我用线程直接解决问题时

200
00:18:13,350 --> 00:18:18,269
everything will work fine. If you are doing, there are some areas of the
一切都会很好的。如果您正在执行此操作，则

201
00:18:18,269 --> 00:18:22,809
language where if you try to use them with threads, you can get into a little bit of
这是一种语言，如果您尝试将它们与线程一起使用，您可以了解一些

202
00:18:22,809 --> 00:18:28,220
trouble. Alright, so it surely pays to try to understand. Java concurrency and the
麻烦。好的，所以试着去理解当然是值得的。Java并发性和

203
00:18:28,220 --> 00:18:31,480
threads if you're writing significant concurrency Java programs
线程(如果您正在编写重要的并发Java程序

