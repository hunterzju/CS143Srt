0
00:00:03,840 --> 00:00:07,180
In this video, we're going to being our discussions of run time structures with
在这段视频中，我们将讨论运行时结构

1
00:00:07,180 --> 00:00:14,180
the notion of procedure activations. Before we begin the discussion of
程序激活的概念。在我们开始讨论……之前

2
00:00:15,070 --> 00:00:19,869
activations, it's worth being explicit that we have two overall goals in code
激活，值得明确的是，我们在代码中有两个总体目标

3
00:00:19,869 --> 00:00:24,560
generation. One needs to be correct to generate code that actually faithfully
一代人。生成的代码必须是正确的，这样才能真实地生成

4
00:00:24,560 --> 00:00:29,000
implements the programmer's program And the second is to be efficient that, that
实现程序员的程序，第二是要高效，那就是

5
00:00:29,000 --> 00:00:34,750
code should made good use of resources and in particular we often care that it run
代码应该很好地利用资源，尤其是我们通常关心它是否运行

6
00:00:34,750 --> 00:00:40,530
quickly And is very easy to solve These problems in isolation. If all we care
快速且非常容易孤立地解决这些问题。如果我们都在乎

7
00:00:40,530 --> 00:00:45,640
about is correctness, it's not a hard problem to generate Code that is very
关于正确性，生成非常简单的代码并不是一个困难的问题

8
00:00:45,640 --> 00:00:51,329
simple but also very slow and correctly implements the program. If all we care
简单，但也非常慢，正确地实现了程序。如果我们都在乎

9
00:00:51,329 --> 00:00:54,110
about is speed, we don't care about getting the right answer, the problem is
关于速度，我们不在乎得到正确的答案，问题是

10
00:00:54,110 --> 00:00:59,510
even easier. I can generate extremely fast programs that generate the wrong answer
更简单了。我可以生成速度极快的程序，而这些程序会生成错误的答案

11
00:00:59,510 --> 00:01:05,059
for any problem that you carry to me And so really all the complications in code
对于您带给我的任何问题，以及代码中的所有复杂问题

12
00:01:05,059 --> 00:01:11,229
generation arise from trying to solve These two problems simultaneously And,
产生于试图同时解决这两个问题，

13
00:01:11,229 --> 00:01:15,499
what has grown up over time is fairly elaborate framework for how a code
随着时间的推移，发展起来的是一个相当精细的框架，用于说明代码如何

14
00:01:15,499 --> 00:01:19,060
generator and the run, and the corresponding run time structures should
生成器和运行，以及相应的运行时结构应

15
00:01:19,060 --> 00:01:24,799
be done to achieve both of these goals, okay? And the first step in talking about
去实现这两个目标，好吗？而谈论这一问题的第一步

16
00:01:24,799 --> 00:01:30,279
that is to talk about activations. We're going to make two assumptions about the
那就是说激活。我们要对这个问题做两个假设

17
00:01:30,279 --> 00:01:34,520
kinds of programming languages for which we're generating code. The first
我们正在为其生成代码的各种编程语言。第一个

18
00:01:34,520 --> 00:01:39,409
assumption is that execution is sequential. Given that we execute the
假设执行是按顺序进行的。假设我们执行

19
00:01:39,409 --> 00:01:43,679
statement, the next statement that will be executed is easy to predict. In fact, it's
语句，则很容易预测将执行的下一条语句。事实上，这是

20
00:01:43,679 --> 00:01:47,520
just a function of the statement that we just executed. So, controls is going to
只是我们刚刚执行的语句的函数。因此，控制系统将会

21
00:01:47,520 --> 00:01:52,359
move from one point in a program to another in some well defined order. The
以某种明确定义的顺序从程序中的一个点移动到另一个点。这个

22
00:01:52,359 --> 00:01:56,139
second assumption is the one that procedure is called controllable always
第二个假设是程序总是可控的。

23
00:01:56,139 --> 00:02:02,009
return to the point immediately after the call. That is if I execute a procedure f,
呼叫结束后立即返回该点。也就是说，如果我执行过程f，

24
00:02:02,009 --> 00:02:06,380
once f is done executing, control will always return to the statement that
一旦f执行完毕，控制将始终返回到

25
00:02:06,380 --> 00:02:12,099
followed Point where f was call And there are certainly programming languages and
跟随调用f的Point，肯定有编程语言和

26
00:02:12,099 --> 00:02:15,959
programming lan guage features that violate this assumption. So the most
对违反此假设的语言规范特征进行编程。所以最多的

27
00:02:15,959 --> 00:02:21,290
important class of programming language is it violate assumption one are ones that
重要的一类编程语言是否违反了假设一

28
00:02:21,290 --> 00:02:26,099
have concurrency. So the concurring program just because I execute one
具有并发性。所以并发程序仅仅因为我执行了一个

29
00:02:26,099 --> 00:02:30,959
statement there is no easy way to predict what the next statement is to execute it
语句中，没有简单的方法来预测要执行它的下一条语句是什么。

30
00:02:30,959 --> 00:02:37,959
because it might be in a completely different thread. And for assumption too
因为它可能在一个完全不同的线程中。对于假设也是如此

31
00:02:38,989 --> 00:02:45,989
Advanced control constructs things like exceptions And Calls [cough]. If you
高级控制构造异常和调用(咳嗽)之类的东西。如果你

32
00:02:46,849 --> 00:02:51,730
happen to know what call cc is, it's not important if you don't. These kinds of
碰巧知道什么叫抄送，如果你不知道也不重要。这些类型的

33
00:02:51,730 --> 00:02:57,500
constructs that affect the flow of control in fairly dramatic ways can violate
以相当戏剧性的方式影响控制流的构造可能会违反

34
00:02:57,500 --> 00:03:01,829
assumption to. So in particular, if you're familiar with catch and throw style
假设。尤其是，如果你熟悉接球和投掷的风格

35
00:03:01,829 --> 00:03:07,620
exceptions in Java and C++, when we throw an exception that exception might escape
Java和C++中的异常，当我们抛出异常时，该异常可能会转义

36
00:03:07,620 --> 00:03:11,760
from multiple procedures before it is caught and so there's no guarantee when
在它被捕获之前来自多个程序，所以不能保证什么时候

37
00:03:11,760 --> 00:03:16,099
you call a procedure if that procedure can throw an exception that, that it control
如果过程可以抛出它控制的异常，则调用该过程

38
00:03:16,099 --> 00:03:20,650
whatever return to the point immediately after the procedure call. Now, we're gonna
在过程调用之后立即返回到该点的任何内容。现在，我们要

39
00:03:20,650 --> 00:03:26,950
keep these assumptions for the rest of the class. We may later on in future videos
把这些假设留给班上的睡觉吧。我们稍后可能会在未来的视频中

40
00:03:26,950 --> 00:03:33,659
briefly discuss how we would accommodate some of these more advanced features if
简要讨论我们将如何适应这些更高级的功能，如果

41
00:03:33,659 --> 00:03:40,659
the, the material that we're going to cover. Is basic to all implementation and
我们要讲的材料。是所有实施的基础，并且

42
00:03:42,319 --> 00:03:47,150
even languages have concurrency and exception build upon the ideas that we're
即使是语言也有并发和异常，它们都是建立在这样的思想之上的，那就是我们正在

43
00:03:47,150 --> 00:03:54,150
going to discuss here. So first the definition When we invoke the procedure p.
我要在这里讨论一下。首先是我们调用过程p时的定义。

44
00:03:54,340 --> 00:04:00,969
We're going to say that is an activation of the procedure p and the life time of an
我们会说这是程序p的激活和一个

45
00:04:00,969 --> 00:04:06,700
activation of p is gonna be all the steps are involved executing the procedure p and
激活p将是所有步骤都涉及到执行过程p和

46
00:04:06,700 --> 00:04:12,090
including all the steps in the procedures that p calls so it's going to be all the
包括p调用的过程中的所有步骤，所以这将是所有

47
00:04:12,090 --> 00:04:13,469
steps in the procedures that p calls. So it's going to be all the statements that
p调用的过程中的步骤。所以这将会是所有的陈述

48
00:04:13,469 --> 00:04:18,000
are executed between the moment that p is called and the moment that p returns
在调用p的时刻到p返回的时刻之间执行

49
00:04:18,000 --> 00:04:25,000
including all the functions and procedures that p itself calls. We could define an
包括p本身调用的所有函数和过程。我们可以定义一个

50
00:04:27,250 --> 00:04:32,699
analogous notion of the lifetime of a variable. So the lifetime of a variable x
变量寿命的类似概念。所以变量x的寿命

51
00:04:32,699 --> 00:04:37,310
is gonna be the portion of the execution in which x is defined, That means that
将是执行中定义x的部分，这意味着

52
00:04:37,310 --> 00:04:41,979
it's all the step of execution from the time that x is first created until the
这是从x第一次创建到

53
00:04:41,979 --> 00:04:47,650
time when x is destroyed or deal located and just note here that life time is a
x被破坏或被定位的时间，这里只需注意生命时间是

54
00:04:47,650 --> 00:04:52,750
dynamic concept so this is that implies to the executing program. We're talking about
动态概念，所以这对正在执行的程序来说是隐含的。我们在谈论的是

55
00:04:52,750 --> 00:04:56,979
the time when the variable first comes into existence until the moment in time
变量第一次出现的时间，直到该时刻为止

56
00:04:56,979 --> 00:05:02,310
when it goes out of existence And scope on the other hand is a static concept that go
另一方面，当它走出存在和范围的时候，是一个静电的概念

57
00:05:02,310 --> 00:05:07,479
prefers to that portion of the program text in which the variable is visible.
首选程序文本中变量可见的部分。

58
00:05:07,479 --> 00:05:12,720
Okay, so this is a very different idea from the life time of the variable and
好的，这是一个非常不同的概念，与变量的生存期不同，

59
00:05:12,720 --> 00:05:18,150
again. It's very important to keep these two times, what happens at runtime and
再来一次。保持这两个时间是非常重要的，在运行时和

60
00:05:18,150 --> 00:05:22,199
what happens in compiler time or what is associated with the static properties of
编译时会发生什么，或者与的静电属性关联的是什么

61
00:05:22,199 --> 00:05:28,849
the program distinct in your mind. From the assumptions that we gave a couple of
这个节目在你脑海中清晰可见。根据我们给出的几个假设

62
00:05:28,849 --> 00:05:33,449
slides ago we can make a simple observation and that is when a procedure P
幻灯片之前，我们可以做一个简单的观察，那就是当一个程序P

63
00:05:33,449 --> 00:05:40,449
calls the procedure Q. Then Q is going to return before P returns. And what that
调用过程Q，然后Q将在P返回之前返回。那又是什么呢？

64
00:05:41,580 --> 00:05:46,289
means is that the lifetime of procedures are going to be properly nested and
意味着过程的生存期将被适当地嵌套，并且

65
00:05:46,289 --> 00:05:50,660
furthermore, that means that we can illustrate or represent activation
此外，这意味着我们可以说明或表示激活

66
00:05:50,660 --> 00:05:57,660
lifetimes as a tree. Let's illustrate activation with a simple example. So
一生如一棵树。让我们用一个简单的例子来说明激活。所以

67
00:05:58,530 --> 00:06:03,220
here's a little cool program and as usual, it will begin running by executing the
下面是一个很酷的小程序，像往常一样，它将通过执行

68
00:06:03,220 --> 00:06:07,710
main method in the main class. So the first activation and the root for our
Main类中的Main方法。所以我们的第一个激活和根

69
00:06:07,710 --> 00:06:14,710
activation tree for this program is the method main. And. Main is going to call
此程序的激活树是Main方法。和。Main要打电话给你

70
00:06:16,370 --> 00:06:23,039
the method g and so g's lifetime, the set of instructions were g exist where a
方法g和g的生命周期，指令集是g，其中a

71
00:06:23,039 --> 00:06:27,259
period of time of the execution where g existed is gonna be properly contain
在g存在的地方执行的时间段将被适当地包含

72
00:06:27,259 --> 00:06:31,710
within the execution of this call to main. And so we can illustrate that by making g
在此Main调用的执行过程中。所以我们可以通过制作g来说明这一点。

73
00:06:31,710 --> 00:06:35,949
a child of main. So this indicates that effect of g is a direct child of main
美因河畔的一个孩子。因此，这表明g的效果是main的直接子效果。

74
00:06:35,949 --> 00:06:41,870
indicates that main calls g and also the g's lifetime is properly contained within
指示main调用g以及g的生存期正确包含在

75
00:06:41,870 --> 00:06:48,870
the lifetime of main. After g returns main will call f and so f will also. The, a
Main的生命周期。在g返回后，main将调用f，因此f也将调用。这个，一个

76
00:06:51,270 --> 00:06:58,270
child of, of main And then F as itself is going to call G again And so, it's gonna
Main的子级，然后F本身将再次调用G，所以它将

77
00:06:59,000 --> 00:07:06,000
have another activation of G And so G Will also be a child of f. And this tree that
有G的另一个激活，因此G也将是f的子树。这棵树

78
00:07:06,620 --> 00:07:11,080
is actually the complete tree for this particular example illustrates the number
实际上是此特定示例的完整树，说明了数字

79
00:07:11,080 --> 00:07:15,050
of things. First of all as we already said it shows the containment of life time. So
所有的东西。首先，正如我们已经说过的，它显示了生命时间的限制。所以

80
00:07:15,050 --> 00:07:19,770
again for example g's life time is contained with a name but it also shows
同样，例如，g的寿命包含一个名称，但它还显示

81
00:07:19,770 --> 00:07:24,470
some other interesting lifetime relationships. For example, the life time
其他一些有趣的终生恋情。例如，生命周期

82
00:07:24,470 --> 00:07:28,970
of this activation of g and the life time of that activation of f are completely
g的激活和f的激活的寿命完全是

83
00:07:28,970 --> 00:07:33,610
distinct because their siblings in the tree, their lifetimes do no overlap at
因为它们在树上的兄弟姐妹是不同的，所以它们的生命周期在

84
00:07:33,610 --> 00:07:38,610
all. And another thing to notice here is that there can be multiple occurrences of
全。这里需要注意的另一件事是，可以多次出现

85
00:07:38,610 --> 00:07:43,550
the same method in the activation tree. So every time the method is called that is a
激活树中的相同方法。因此，每次调用该方法时，都是一个

86
00:07:43,550 --> 00:07:49,280
separate activation so in this particular activation tree there are two activations
分开激活，因此在此特定激活树中有两个激活

87
00:07:49,280 --> 00:07:55,389
of g. So, here's a somewhat more complicated example the involves a
所以，这里有一个稍微复杂的例子，它涉及一个

88
00:07:55,389 --> 00:08:00,590
recursive function. Let's begin here at the, at the first call. So The call to
递归函数。让我们从这里开始，从第一个电话开始。因此，对

89
00:08:00,590 --> 00:08:07,590
main And all main does is call F with the argument three. So, there is an activation
Main和所有Main所做的都是使用参数3调用F。所以，有一种激活

90
00:08:08,919 --> 00:08:15,919
of F from Main. And then what does f do, well f asks if it's argument is zero, and
来自Main的F。然后f做什么呢，好吧，f问它的参数是否为0，

91
00:08:16,319 --> 00:08:20,840
if it is that calls g, while the initial argument is three so that's not going to
如果是，则调用g，而初始参数是3，所以不会

92
00:08:20,840 --> 00:08:26,430
be true on the first call to f. In otherwise, it calls f with the argument
在第一次调用f时为true。否则，它将使用以下参数调用f

93
00:08:26,430 --> 00:08:32,150
minus one. So, I was making note over here on the side about what the argument is
减一。所以，我在边上记下了争论是什么

94
00:08:32,150 --> 00:08:37,650
because we need to keep track of that. So f is called with three clearly that is not
因为我们需要跟踪这一点。所以调用f时有三个显然不是

95
00:08:37,650 --> 00:08:43,830
zero, and so then f is going to be called again with the argument two, that will
0，然后用参数2再次调用f，这将是

96
00:08:43,830 --> 00:08:50,820
results in f being called yet another time with the argument one and finally, f will
导致使用参数1再次调用f，最后，f将

97
00:08:50,820 --> 00:08:57,820
be called. With the argument zero, Which will then result in a call to G, And so
被召唤。参数为0，这将导致对G的调用，因此

98
00:09:02,110 --> 00:09:08,190
this is the activation tree for this particular program, And again notice that
这是此特定程序的激活树，请再次注意

99
00:09:08,190 --> 00:09:12,460
there is gonna be multiple activation of the procedure on the same run of the
在同一运行中将有多个过程激活

100
00:09:12,460 --> 00:09:17,440
program. It just indicates that the same procedure can be called multiple times and
程序。它只是表明同一过程可以被多次调用，并且

101
00:09:17,440 --> 00:09:22,760
also note that the recursive procedure will result in nesting of activations of
还要注意，递归过程将导致嵌套激活

102
00:09:22,760 --> 00:09:26,850
the same function within itself, And so when f calls i tself and so the life time
在其内部有相同的函数，所以当f调用i时，也就是生命周期

103
00:09:26,850 --> 00:09:30,980
say of the second call to f is properly contained within the life time with the
假设对f的第二次调用正确地包含在生存期内，

104
00:09:30,980 --> 00:09:32,000
fist call to f.
第一次呼叫f。

