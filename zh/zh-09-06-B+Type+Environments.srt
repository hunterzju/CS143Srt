0
00:00:01,770 --> 00:00:05,680
To summarize this video, The type environment gives types to the free
综上所述，文字环境将类型提供给免费的

1
00:00:05,680 --> 00:00:09,770
identifiers in the current scope. And this is very important, because it doesn't even
当前作用域中的标识符。这一点非常重要，因为它甚至不会

2
00:00:09,770 --> 00:00:13,500
really makes sense to talk about type checking an expression, unless we have
谈论表达式的类型检查真的很有意义，除非我们有

3
00:00:13,500 --> 00:00:17,940
some information for the types of the free identifiers. And the type environment is
有关空闲标识符的类型的一些信息。类型环境为

4
00:00:17,940 --> 00:00:22,070
just a way of formalizing that, of giving a name to some set of assumptions about
只是将其正式化的一种方式，给一些假设取名

5
00:00:22,070 --> 00:00:26,760
what the types of those free identifiers are. Notice that the type environment is
这些空闲标识符的类型是什么。请注意，类型环境为

6
00:00:26,760 --> 00:00:30,450
passed down the abstract syntax tree from the root towards the leaves. That is, as
从根到叶向下传递抽象语法树。也就是说，作为

7
00:00:30,450 --> 00:00:33,199
we pass through definitions, the type environment is extended with new
我们传递定义，类型环境用新的

8
00:00:33,199 --> 00:00:36,650
definitions For example, [inaudible] expressions. And so the type environment
定义例如，[听不见]的表达。因此，类型环境

9
00:00:36,650 --> 00:00:40,820
will grow as you pass from the root of the abstract syntax tree down towards the
将随着您从抽象语法树的根向下传递到

10
00:00:40,820 --> 00:00:45,010
leaves of the abstract syntax tree. And then the types are computed up the
抽象语法树的叶子。然后将类型向上计算

11
00:00:45,010 --> 00:00:48,420
abstract syntax tree from the leaves towards the roots. So we begin at the
从叶到根的抽象语法树。所以我们从

12
00:00:48,420 --> 00:00:52,540
leaves, get all the types of the leaf expressions, most of which are very easy.
叶子，得到所有种类的叶子表情，大部分都很简单。

13
00:00:52,540 --> 00:00:56,079
Things like integers and string constants have the obvious types. And we just look
像整数和字符串常量这样的东西有明显的类型。我们只是看看

14
00:00:56,079 --> 00:01:00,320
up the types of variables, in the type environment. And then we compute the types
在类型环境中增加变量的类型。然后我们计算这些类型

15
00:01:00,320 --> 00:01:03,749
for the more complicated expressions in a bottom up fashion.
用于自下而上方式的更复杂的表达式。

