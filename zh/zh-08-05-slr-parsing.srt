0
00:00:04,140 --> 00:00:08,250
In this video, we're finally going to give an actual bottom up parsing algorithm. In
在这段视频中，我们最终将给出一个实际的自下而上解析算法。在……里面

1
00:00:08,250 --> 00:00:12,920
particular, we'll talk about SLR, or simple LR parsing, which will build on the
特别地，我们将讨论SLR，即简单的LR解析，它将构建在

2
00:00:12,920 --> 00:00:18,080
ideas of valid items, and viable prefixes that we've been discussing in our recent
有效项目的概念，以及可行的前缀，这些都是我们在最近的

3
00:00:18,080 --> 00:00:25,080
videos. The first thing we're going to do is to define a very weak bottom up parsing
视频。我们要做的第一件事是定义一个非常弱的自底向上解析

4
00:00:26,589 --> 00:00:31,839
algorithm called LR0 parsing. And the basic idea here is that we're going to
称为LR0解析的算法。这里的基本想法是我们要

5
00:00:31,839 --> 00:00:38,230
assume a stack contains a contents alpha, and that the next input is token T And
假设堆栈包含内容alpha，并且下一个输入是令牌T，并且

6
00:00:38,230 --> 00:00:44,000
that the DFA, this is the DFA that recognizes, the viable prefixes. On input
DFA，这是识别可行前缀的DFA。在输入时

7
00:00:44,000 --> 00:00:48,269
alpha, that is, when it reads the stack contents, it terminates in some state S.
也就是说，当它读取堆栈内容时，它在某个状态S终止。

8
00:00:48,269 --> 00:00:53,859
[sound] And There's only gonna be two things that this that this parsing
[声音]这个解析只会有两件事

9
00:00:53,859 --> 00:00:59,629
algorithm needs to do. So if S, if the final state of the DFA contains the item X
算法需要做的就是。所以如果S，如果DFA的最终状态包含项目X

10
00:00:59,629 --> 00:01:03,969
goes to beta dot. Well, what does that say? That says we've seen the complete
转到贝塔点。那上面写的是什么？也就是说我们已经看到了完整的

11
00:01:03,969 --> 00:01:10,280
right hand side, of X goes to beta on the top of the stack, and that furthermore,
右手边的X转到堆栈顶部的Beta，而且，

12
00:01:10,280 --> 00:01:15,549
everything that's below the stack still says that x goes to beta dot is a valid,
堆栈下面的所有东西仍然说x到β点是有效的，

13
00:01:15,549 --> 00:01:20,780
or a viable, sorry, is a valid item for this state. Meaning its okay to reduce by
或者一个可行的，抱歉，对于这个州来说是有效的项目。意思是可以减少

14
00:01:20,780 --> 00:01:25,560
X goes to beta. So if we see a complete production dot all the way in the right
X转到贝塔。所以如果我们在右边看到一个完整的生产点

15
00:01:25,560 --> 00:01:30,590
hand side in the final state of the DFA, then we're just going to reduce by that
在DFA的最终状态下，我们只需要减少它

16
00:01:30,590 --> 00:01:37,590
production. The other possible move is a shift. If we wind up in a state, where, X
制作。另一个可能的举动是转变。如果我们最终到了一个州，在那里，X

17
00:01:37,600 --> 00:01:42,750
goes to beta .t, and then some other stuff is a valid item, what does that say? That
转到测试版，然后其他一些东西是有效的，这是什么意思？那

18
00:01:42,750 --> 00:01:47,590
says that it would be okay at this point to add a T to the stack. And if T is our
表示此时可以将T添加到堆栈中。如果T是我们的

19
00:01:47,590 --> 00:01:54,590
input, well, then we should do a shift move [sound]. Now, when does LR0 parsing
输入，嗯，那么我们应该做一个换班动作[声音]。现在，LR0何时解析

20
00:01:55,289 --> 00:01:59,399
get into trouble? Well, there are two possible problems it could have. It might
惹上麻烦了吗？嗯，它可能有两个可能的问题。它可能会

21
00:01:59,399 --> 00:02:04,210
not be able to decide. Between two possible reduced moves. So, if any state
不能决定。在两个可能减少的动作之间。所以，如果有任何州

22
00:02:04,210 --> 00:02:09,130
of DFA has two possible reductions, meaning it seem two complete productions
的DFA有两个可能的减少，这意味着它看起来像是两个完整的产品

23
00:02:09,130 --> 00:02:13,550
and it could reduce by either one then there's not enough information to decide
它可以减少任何一个，那么就没有足够的信息来决定

24
00:02:13,550 --> 00:02:17,790
which reduction to perform and the parts won't be completely deterministic, and
要执行哪种简化，并且各部分不是完全确定的，并且

25
00:02:17,790 --> 00:02:21,860
this is called a reduced, reduced co nflict. So again, this happens if a
这被称为减少的冲突，减少的冲突。再说一次，如果一个

26
00:02:21,860 --> 00:02:27,709
particular state has two separate items indicating two separate reductions. The
特定的州有两个单独的项目，表示两个单独的减少。这个

27
00:02:27,709 --> 00:02:31,940
other possibility is that the final state of the DFA, after reading the stack
另一种可能性是在读取堆栈之后DFA的最终状态

28
00:02:31,940 --> 00:02:37,900
contents, might have An item that says to reduce and another item that says to
内容，可能有一项说要减少，另一项说要

29
00:02:37,900 --> 00:02:43,720
shift. And this is called a shift-reduce conflict. So in this case, there would
换档。这就是所谓的转移-减少冲突。所以在这种情况下，会有

30
00:02:43,720 --> 00:02:48,370
only be a conflict in a state where T was the next item in the input. But in that
仅在T是输入中的下一项的状态下才是冲突。但在那里面

31
00:02:48,370 --> 00:02:52,510
situation, we wouldn't know whether to shift T onto the stack, or to reduce by X
情况下，我们将不知道是将T移位到堆栈上，还是减去X

32
00:02:52,510 --> 00:02:59,510
goes to beta [sound]. Let's take a look at the DFA for recognizing viable prefixes
转到测试版[声音]。让我们看一下识别可行前缀的DFA

33
00:03:00,239 --> 00:03:05,290
that we've been using for the last couple of ideas, and in fact this particular DFA
我们在最后几个想法中一直在使用，实际上这个特定的DFA

34
00:03:05,290 --> 00:03:09,340
does have some conflicts. So, let's take a look at this state right here, here we
确实有一些冲突。那么，让我们来看看这里的状态，这里我们

35
00:03:09,340 --> 00:03:15,280
could either reduced by E goes to T you are in this state or if the next input is
是否可以减去E转到T，您处于此状态，或者如果下一个输入为

36
00:03:15,280 --> 00:03:20,970
a plus we could do a shift and. In, so in this particular situation, if the next
A另外我们可以换班。在，所以在这个特殊的情况下，如果下一个

37
00:03:20,970 --> 00:03:25,670
input is plus, we could either shift and use this item or we can reduce and use
投入是加的，我们可以移动并使用此项目，也可以减少并使用此项目

38
00:03:25,670 --> 00:03:32,670
that item. So this particular state has a shift reduced conflict. Now, that's not
那件东西。因此，这个特殊的州减少了冲突。现在，那不是

39
00:03:36,180 --> 00:03:41,450
the only conflict in this in this grammar, though. In this state here, we have a very
然而，在这个语法中，唯一的冲突就是这一点。在这个州，我们有一个非常

40
00:03:41,450 --> 00:03:46,560
similar problem. Here we could shift if the next input is a times. Or we could
类似的问题。如果下一个输入是时间，我们可以在这里转换。或者我们可以

41
00:03:46,560 --> 00:03:51,420
reduce by T goes to [inaudible]. And so this state also has a shift reduce
减去T表示[听不见]。所以这个状态也有一个移位减少

42
00:03:51,420 --> 00:03:58,420
conflict. It turns out that it's not difficult to improve on LR0 parsing, and,
冲突。事实证明，改进LR0解析并不困难，

43
00:04:00,620 --> 00:04:06,500
we'll present one such improvement in this video called SLR or simple LR parsing. And
在本视频中，我们将展示一个这样的改进，称为SLR或简单LR解析。和

44
00:04:06,500 --> 00:04:11,900
this is going to improve on LR0 by adding some heuristics that will refine when we
这将通过添加一些启发式方法来改进LR0，这些启发式方法将在我们

45
00:04:11,900 --> 00:04:18,900
shift and when we reduce, so that fewer states have conflicts. The modification to
当我们减少的时候，转移和减少，这样更少的国家会有冲突。修改为

46
00:04:20,279 --> 00:04:25,110
LR0 parsing that gives us SLR parsing is really quite small. We just add one new
为我们提供SLR解析的LR0解析实际上相当小。我们只需添加一个新的

47
00:04:25,110 --> 00:04:32,110
condition to the reduction case. So before, if we saw it, X goes to beta dot,
条件添加到减量案例中。所以在此之前，如果我们看到它，X会变成β点，

48
00:04:32,310 --> 00:04:36,660
in the final state of our DFA, recall what that means. That means beta is on the top
在我们的DFA的最终状态中，回想一下这意味着什么。这意味着Beta版处于领先地位。

49
00:04:36,660 --> 00:04:43,190
of the stack, and it is viable And so it's fine to reduce. Now, We do have a little
堆栈，它是可行的，所以减少是很好的。现在，我们确实有一些

50
00:04:43,190 --> 00:04:48,000
bit more information. So, so notice that the automaton her e doesn't take any
更多信息。所以，请注意，她身上的自动机没有任何

51
00:04:48,000 --> 00:04:51,570
advantage of what's coming up in the input. This is based entirely, this
利用输入中即将出现的内容。这完全是基于，这个

52
00:04:51,570 --> 00:04:56,730
decision here is based entirely on the stack contents. But it might be that it
这里的决策完全基于堆栈内容。但可能是因为它

53
00:04:56,730 --> 00:05:01,830
doesn't make sense to reduce based on what the next input symbol is. And how can we
根据下一个输入符号是什么来减去是没有意义的。我们怎么才能

54
00:05:01,830 --> 00:05:05,250
take advantage of that? Well, if you think about it, what's going to happen? We have
利用这一点吗？嗯，如果你想一想，会发生什么呢？我们有

55
00:05:05,250 --> 00:05:11,460
our stack contents. And, it ends in a beta, and now we're going to make a move
我们的堆栈内容。它以测试版结束，现在我们要采取行动

56
00:05:11,460 --> 00:05:17,780
where we're going to replace that by X. Okay. And if the next input symbol is t,
我们要把它换成X，好的。并且如果下一个输入码元是t，

57
00:05:17,780 --> 00:05:21,650
so remember we have a vertical bar here and a t following, what does that mean?
记住我们这里有一个竖线，后面跟着一个t，这是什么意思？

58
00:05:21,650 --> 00:05:27,000
Well, that means that x has to come before t in the derivation. Or in another words,
这意味着在求导过程中，x必须在t之前。或者换句话说，

59
00:05:27,000 --> 00:05:32,520
t is gonna follow x. And if t can't follow x, if t is a terminal symbol that can't
t会跟在x后面，如果t不能跟在x后面，如果t是一个不能跟在x后面的终端符号

60
00:05:32,520 --> 00:05:37,220
come after the non-terminal x than it makes no sense to do this reduction. So we
紧跟在非终结点x之后，这样做是没有意义的。所以我们

61
00:05:37,220 --> 00:05:42,230
only do the reduction if t is in the follow of x. We just add that restriction
只有当t在x的后面时才做减法。我们只是添加了这个限制

62
00:05:42,230 --> 00:05:48,780
and that is the only change to the parsing algorithm. So if there are any conflicts
这是对解析算法的唯一更改。所以如果有任何冲突

63
00:05:48,780 --> 00:05:53,620
under these rules either shift reduce or reduce, reduce, then the grammar is not an
在这些规则下，要么移位归约，要么归约，那么语法就不是

64
00:05:53,620 --> 00:05:58,290
slr grammar. Just notice that these rules amount to a heuristic, for detecting the
SLR语法。只需注意，这些规则相当于一个启发式规则，用于检测

65
00:05:58,290 --> 00:06:02,550
handles. So, we take into account two pieces of information. The contents of the
把手。因此，我们考虑了两条信息。文件中的内容

66
00:06:02,550 --> 00:06:07,710
stack, that's that the DFA, does for us, and it tells us what items are possible
堆栈，这就是DFA为我们做的，它告诉我们哪些项是可能的

67
00:06:07,710 --> 00:06:12,130
when we get to the top of the stack, and also what's coming up in input, and we can
当我们到达堆栈的顶部，以及输入中将要出现的内容时，我们可以

68
00:06:12,130 --> 00:06:16,620
use that to define our reduction decisions. And for those grammars where
用它来定义我们的减排决定。对于那些语法来说，

69
00:06:16,620 --> 00:06:20,630
there are no conflicts, meaning there is a, there is a unique move, in every
没有冲突，也就是说，每个人都有一种，有一种独特的举动。

70
00:06:20,630 --> 00:06:25,500
possible state, under those rules. Then this heuristic is exact, you know, for,
可能的状态，在那些规则下。那么这个启发式是准确的，你知道，因为，

71
00:06:25,500 --> 00:06:32,000
for those grammars. And we just define those grammars to be the SLR grammars.
对于那些语法来说。我们只是将这些文法定义为SLR文法。

72
00:06:32,000 --> 00:06:35,680
Let's consider how things have changed for our running example. The deterministic
让我们考虑一下我们的运行示例的情况发生了怎样的变化。决定论

73
00:06:35,680 --> 00:06:39,350
automaton for recognizing the viable prefixes of the grammar we've been looking
用于识别我们一直在寻找的语法的可行前缀的自动机

74
00:06:39,350 --> 00:06:43,820
at for several videos now. Recall that we had shift reduced conflicts under LR zero
现在正在看几个录像带。回想一下，我们在LR为零的情况下减少了冲突

75
00:06:43,820 --> 00:06:49,440
rules in two states. So now let's look at this state first, the upper state. So
有两个州的规定。现在让我们先来看看这个状态，上面的状态。所以

76
00:06:49,440 --> 00:06:52,410
here, we 're going to shift if there's a plus in the input. That's what this item
这里，如果输入中有加号，我们就移动一下。这就是这个项目

77
00:06:52,410 --> 00:06:56,150
tells us to do. It tells us there's if there's a plus, then the right move is to
告诉我们该做什么。它告诉我们，如果有加号，那么正确的做法是

78
00:06:56,150 --> 00:07:00,180
shift. And so Now the question is, when are we going to reduce? Well we're only
换档。所以现在的问题是，我们什么时候减少呢？嗯，我们只是

79
00:07:00,180 --> 00:07:05,280
going to reduce if the input is in the follow of E. And what is the follow of E?
如果输入跟在E后面就会减去，那么E跟在什么后面呢？

80
00:07:05,280 --> 00:07:11,080
We computed that a long time ago, but just to remind you remember that E here is the
我们很久以前就计算过了，但我想提醒大家，这里的E是

81
00:07:11,080 --> 00:07:15,970
original start symbol of the grammar so certainly dollar sign will wind up in the
语法的原始起始符号，所以美元符号肯定会出现在

82
00:07:15,970 --> 00:07:20,770
follow of E. And the other possibility for the follow of E is close paren, because
跟在E后面的另一种可能性是接近Paren，因为

83
00:07:20,770 --> 00:07:26,030
here at this point in the grammar close paren comes after E. And that's the only
在语法的这一点上，帕伦紧跟在E之后，这是唯一的

84
00:07:26,030 --> 00:07:31,110
two possibilities. So what that says now, what that means is that, in this
有两种可能性。所以现在的意思是，在这件事上

85
00:07:31,110 --> 00:07:37,540
particular state, we are going to reduce, if either we're out of input. Or if the
特定的州，我们将减少，如果我们没有输入的话。或者如果

86
00:07:37,540 --> 00:07:42,460
next I, the next, token in the input is a closed paren, and will shift if the next
下一个I，下一个，输入中的令牌是一个闭合的Paren，如果下一个

87
00:07:42,460 --> 00:07:47,460
token in the input is a plus. And in any other situation, we will report a parsing
输入中的标记为加号。在任何其他情况下，我们将报告解析

88
00:07:47,460 --> 00:07:51,570
error. And so there's no longer any shift reduced conflict in this state, and
错误。因此，这个州不再有任何减少冲突的转变，而且

89
00:07:51,570 --> 00:07:56,260
there's always a unique move for every possible input. The situation is
对于每一种可能的输入，总是有一个独特的动作。情况是这样的

90
00:07:56,260 --> 00:08:00,830
similarly, similarly improved, for the other state. So here, we're going to shift
同样，对于另一个州，也有类似的改进。所以在这里，我们要把

91
00:08:00,830 --> 00:08:04,930
in there's a times in the input, and we're going to reduce if the input is in the
在输入中有一个次数，如果输入在

92
00:08:04,930 --> 00:08:11,930
follow of T. And what is the follow of T? [sound]. Recall, We computed this again a
T的后边是什么？T的后边是什么？[声音]。回想一下，我们再次将其计算为

93
00:08:12,970 --> 00:08:17,160
long time ago and I just happen to know what it is. And so I'll just tell you.
很久以前，我正好知道那是什么。所以我就直接告诉你。

94
00:08:17,160 --> 00:08:22,780
Well it included everything in the follow of e. So a dollar sign in close paren are
它包含了跟在e后面的所有东西。所以在Close Paren中有一个美元符号

95
00:08:22,780 --> 00:08:28,970
in the follow of T. But also, a plus is in the follow of T because of this usage over
在T的后面，加号也在T的后面，因为这种用法是Over

96
00:08:28,970 --> 00:08:32,820
here in the grammar where plus appears really after T. But those are the only
在语法中，加号确实出现在T之后，但这是唯一的

97
00:08:32,820 --> 00:08:37,659
things in the follow of T. And so now we're going to reduce, only if we're out
紧跟在T后面的东西，所以现在我们要减少，只有当我们退出的时候

98
00:08:37,659 --> 00:08:42,590
of input or if the next input item is a close paren or a plus and there's also a
或者如果下一个输入项是接近的Paren或加号，并且还有

99
00:08:42,590 --> 00:08:47,520
no shift reduce, no longer any shift reduce conflict in this state. And so this
在这种状态下，没有减速，不再有减速冲突。所以这就是这个

100
00:08:47,520 --> 00:08:54,520
grammar, is an SLR1 grammar. Now many grammars are not SLR. To emphasize that
语法，是一种SLR1语法。现在很多语法都不是SLR。强调一下，

101
00:08:56,650 --> 00:09:02,950
SLR is an improvement on LR0 but it 's still, not a really very general class of
单反是对lr0的改进，但它仍然不是一个真正非常通用的类。

102
00:09:02,950 --> 00:09:08,570
grammars. So All ambiguous grammars for example are not SLR. We can improve a
语法。因此，例如，并不是所有的歧义语法都是SLR。我们可以改进一个

103
00:09:08,570 --> 00:09:12,780
little bit on the SLR situation. We can make SLR parsers even more grammarous, by
关于单反的情况。我们可以通过以下方式使SLR解析器更加文法

104
00:09:12,780 --> 00:09:19,270
using precedence declarations to tell it how to resolve conflicts. So let's revert
使用优先级声明告诉它如何解决冲突。所以让我们恢复原状

105
00:09:19,270 --> 00:09:23,170
to the most natural and also most ambiguous grammar for plus and times over
到最自然也最模棱两可的加号和倍数语法

106
00:09:23,170 --> 00:09:27,860
the integers, and we've looked at this grammar before. If you build the DFA for
整数，我们以前已经看过这个语法了。如果您为以下对象构建DFA

107
00:09:27,860 --> 00:09:31,050
this grammar, if you go through and build the DFA for the viable prefix of this
这个语法，如果您通读并为它的可行前缀构建DFA

108
00:09:31,050 --> 00:09:36,050
grammar, you will discover that there is a state. That has the following two items in
语法，你会发现有一种状态。中包含以下两项的

109
00:09:36,050 --> 00:09:43,050
it, one says that if we see E times E that we have seen E times E on a stack, and
它，有人说，如果我们看到E乘以E，那就是我们在堆栈上看到了E乘以E，

110
00:09:43,170 --> 00:09:48,740
that we can now reduce by ecos E times E. The other one will say that if there's a
我们现在可以减去Ecos E乘以E，另一个人会说如果有一个

111
00:09:48,740 --> 00:09:54,080
plus coming up in the input we should shift. And notice that this is exactly the
再加上，在输入端，我们应该移一下。请注意，这正是

112
00:09:54,080 --> 00:09:58,760
question. Of whether, times has higher precedence than plus. When you're in this
问题来了。是否，乘以比加优先。当你在这里的时候

113
00:09:58,760 --> 00:10:05,550
situation, should you. Reduce, thereby grouping the two E's together here,
情况，你应该。减去，从而将两个E组合在一起，

114
00:10:05,550 --> 00:10:12,170
Grouping the multiplication operation first. Or should you shift the plus, in
首先对乘法运算进行分组。或者您应该将加号移入

115
00:10:12,170 --> 00:10:18,190
which case you'll be working on that for a sentence at the top of the stack. So, in
在这种情况下，您将为堆栈顶部的句子处理此问题。所以，在

116
00:10:18,190 --> 00:10:22,020
this situation, the declaration times has higher precedence than plus resolves the
在这种情况下，声明时间的优先级高于加来解决

117
00:10:22,020 --> 00:10:27,370
conflict in favor of the reduction. So we would not do the shift, and we would wind
支持削减的冲突。所以我们不会换班，我们会上发条

118
00:10:27,370 --> 00:10:34,310
up with no shift-reduce conflict. Note that the term precedence declaration is
没有换挡-减少冲突。请注意，术语优先声明是

119
00:10:34,310 --> 00:10:38,990
actually quite misleading. These declarations don't define precedence. They
实际上相当具有误导性。这些声明不定义优先级。他们

120
00:10:38,990 --> 00:10:42,380
don't. Do that directly at all. What they really define are conflict resolution.
不要。完全可以直接这么做。他们真正定义的是冲突解决。

121
00:10:42,380 --> 00:10:47,480
They say, make this move instead of that move. It happens that in this particular
他们说，做这个动作而不是那个动作。碰巧在这个特殊的地方

122
00:10:47,480 --> 00:10:52,290
case. Because we're dealing with a national grammar, simple grammar for plus
箱子。因为我们处理的是一种全国性的语法，简单的加号语法

123
00:10:52,290 --> 00:10:58,270
and times that the conflict resolution has exactly the effect of enforcing the
以及冲突解决恰好具有强制

124
00:10:58,270 --> 00:11:02,860
precedence declaration that we want. But in more complicated grammars where there
我们想要的优先声明。但在更复杂的语法中

125
00:11:02,860 --> 00:11:07,820
are more interactions between various pieces of the grammar, these declarations
在语法的不同部分之间有更多的交互，这些声明

126
00:11:07,820 --> 00:11:12,090
might not do what you expect in terms of enforcing precedence, fortuna tely, you
可能不会按照您期望的那样执行优先顺序，幸运的是，您

127
00:11:12,090 --> 00:11:16,540
can always print out the automaton. The tools provide, Usually a way for you to
可以随时打印出机器人。这些工具通常为您提供了一种

128
00:11:16,540 --> 00:11:22,710
inspect the parsing automaton. And then you can see exactly how, the conflicts are
检查解析自动机。然后你就可以确切地看到，冲突是如何

129
00:11:22,710 --> 00:11:27,580
being resolved, and whether those are the resolutions that you had intended. And I
正在解决中，以及这些是否是您原本想要的解决方案。而我

130
00:11:27,580 --> 00:11:31,220
recommend when you're building parsers, especially if it's a, a fairly complex
建议您在构建解析器时，尤其是在解析器相当复杂的情况下

131
00:11:31,220 --> 00:11:35,400
parser, that you do examine the parsing automaton to make sure that it's doing
解析器，即检查解析自动机以确保它正在执行

132
00:11:35,400 --> 00:11:42,400
what you expect. So now we're ready to give the algorithm for SLR parsing. So
如你所料。现在我们准备给出SLR解析的算法。所以

133
00:11:42,400 --> 00:11:47,820
[inaudible] automaton, our parsing automaton that recognizes viable prefixes.
[听不见]自动机，我们的解析自动机可以识别可行的前缀。

134
00:11:47,820 --> 00:11:51,390
The initial configuration is going to be with the vertical bar all the way to the
初始配置将使用竖线一直到

135
00:11:51,390 --> 00:11:55,290
left so the stack is empty. This is our full input and we [inaudible] dollar to
向左，因此堆栈为空。这是我们的全部投入，我们[听不见]美元

136
00:11:55,290 --> 00:11:58,930
indicate the end of the input. And now we're going to repeat until the
指示输入的末尾。现在我们要重复，直到

137
00:11:58,930 --> 00:12:04,590
configuration has just the start symbol on the stack, and dollar in the input.
配置在堆栈上只有开始符号，在输入中有美元。

138
00:12:04,590 --> 00:12:08,240
Meaning all the input is gone and we've reduced the entire input to the start
这意味着所有的输入都消失了，我们从一开始就减少了整个输入

139
00:12:08,240 --> 00:12:14,720
symbol. So. An [inaudible] configuration will be written as alpha-omega; where
符号。所以。[听不见]配置将写为alpha-omega；其中

140
00:12:14,720 --> 00:12:19,080
alpha is the contents of the stack and omega is the remaining input, and what
alpha是堆栈的内容，omega是剩余的输入，还有什么

141
00:12:19,080 --> 00:12:24,029
we're going to do is we're going to run M, run the machine on the current stack alpha
我们要做的是运行M，在当前堆栈alpha上运行机器

142
00:12:24,029 --> 00:12:29,380
and if M rejects alpha, if M says that alpha is not a viable prefix, then we're
如果M拒绝Alpha，如果M说Alpha不是可行的前缀，那么我们就

143
00:12:29,380 --> 00:12:34,300
going to report a parsing error. We're gonna stop right there. Now, if M accepts
将报告解析错误。我们就到此为止吧。现在，如果M接受

144
00:12:34,300 --> 00:12:39,360
alpha, and it accepts it in a state, if it ends in a state with items I, then we're
Alpha，它在一种状态下接受它，如果它以包含项i的状态结束，那么我们

145
00:12:39,360 --> 00:12:43,100
gonna look at the next input, call that A, and what are we going to do? Well, we're
看下一个输入，称它为A，然后我们要做什么？嗯，我们正在

146
00:12:43,100 --> 00:12:50,100
going to shift. Yes, there's an item. In I that says, it would be okay to see the
我要换班了。是的，有一样东西。在我说的话里，可以看到

147
00:12:50,570 --> 00:12:55,610
terminal A. Next. Okay? So that's just our shift move. And then we're going to reduce
A航站楼。下一个。好吧?所以这只是我们的换班动作。然后我们将减少

148
00:12:55,610 --> 00:13:02,610
if there's a reduction item, in the in the set of valid items. And the next input can
如果存在缩减项，则在有效项集中的。并且下一个输入可以

149
00:13:02,790 --> 00:13:06,300
follow the non-terminal on the left hand side. So these are just the two rules that
沿着左手边的非终点站行驶。所以这只是两条规则，

150
00:13:06,300 --> 00:13:10,310
we discussed before. And then we'll report a parsing error if neither of these
我们之前讨论过。然后，如果这两个都不是，我们将报告解析错误

151
00:13:10,310 --> 00:13:15,650
applies. Okay, now one interesting thing about this algorithm, if you read it
适用。好的，现在关于这个算法有一件有趣的事，如果你读了它

152
00:13:15,650 --> 00:13:19,630
carefully and you th ink about it for awhile. You'll realize that this step is
仔细考虑一下，你再想一想这件事。你会意识到这一步是

153
00:13:19,630 --> 00:13:26,630
actually not needed, that we don't need to check here For whether M accepts the
实际上不需要，我们不需要在这里检查M是否接受

154
00:13:26,930 --> 00:13:32,750
stack, or not. Because this staff down here, where we report a parsing error, if
堆叠，或不堆叠。因为下面这位员工，我们报告了一个解析错误，如果

155
00:13:32,750 --> 00:13:37,160
neither of these steps applies, this already implies that we will never form an
这两个步骤都不适用，这已经意味着我们永远不会形成

156
00:13:37,160 --> 00:13:41,970
invalid stack, That our, their stacks will always be viable. The parsing errors will
无效的堆栈，那就是我们的，他们的堆栈永远是可行的。解析错误将

157
00:13:41,970 --> 00:13:47,130
be caught at this line, and we won't pollute the stack with symbols that can't
在这一行被抓到，我们就不会用不可能的符号污染堆栈

158
00:13:47,130 --> 00:13:52,440
possibly result in viable prefixes. So in fact, this error check here, is not
可能会产生可行的前缀。所以实际上，这里的错误检查并不是

159
00:13:52,440 --> 00:13:58,820
needed, M is always going to accept the stack. If there are any conflicts in the
需要时，M将始终接受堆栈。如果

160
00:13:58,820 --> 00:14:03,870
last step, meaning, it's not clear whether to shift or reduce in some state for some,
最后一步，也就是说，对于一些人来说，不清楚是在某种状态下转移还是减少，

161
00:14:03,870 --> 00:14:09,380
input symbol, then the grammar is not, SLRK. And K, again, is the amount of look
输入符号，则语法为NOT，SLRK。再说一次，K是看的量

162
00:14:09,380 --> 00:14:13,360
ahead. In practice, we just use one token of look ahead, So typically, just looking
往前走。在实践中，我们只使用一个向前看的标记，所以通常情况下，只是看

163
00:14:13,360 --> 00:14:15,380
at the next token in the input stream.
在输入流中的下一个令牌。

