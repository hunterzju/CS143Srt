0
00:00:00,560 --> 00:00:04,080
In this video, I'm going to cover a limitation of the Recursive Descent
在这段视频中，我将讲述递归下降的一个限制

1
00:00:04,080 --> 00:00:09,750
Algorithm that I presented last time. Here's the grammar from our last
我上次介绍的算法。这是我们上一节的语法

2
00:00:09,750 --> 00:00:14,790
presentation, and here's its implementation again, as a set of
演示文稿，下面再一次展示它的实现，作为一组

3
00:00:14,790 --> 00:00:18,390
mutually recursive function that together, implement this simple recursive
相互递归函数，共同实现这个简单的递归

4
00:00:18,390 --> 00:00:21,789
descent strategy. And now, let's think about what happens.
下降战略。现在，让我们来考虑一下会发生什么。

5
00:00:21,789 --> 00:00:28,310
When we go to parse the input int, simplest possible input strength.
当我们解析输入int时，尽可能简单的输入强度。

6
00:00:28,310 --> 00:00:33,060
Well, let's work through it. So remember, we start with the function
好吧，让我们把它解决掉。记住，我们从函数开始

7
00:00:33,060 --> 00:00:38,320
that implements all the productions for the non-terminal e.
其实现非终端E的所有产生。

8
00:00:38,320 --> 00:00:40,700
And so what we're going to do here, we're going to call e.
所以我们在这里要做的是，我们要称它为e。

9
00:00:40,700 --> 00:00:43,760
And that will try calling E1. All right?
这将尝试呼叫E1。好的?

10
00:00:43,760 --> 00:00:46,520
And what is E1 going to do? E1 is going to call T.
那么E1要做什么呢？E1将呼叫T。

11
00:00:46,520 --> 00:00:50,050
Because, of course, the first production is E goes to T.
因为，当然，第一部作品是E去T。

12
00:00:50,050 --> 00:00:56,110
So let's take a look at what T does. T is going to try out the production of
那么让我们来看看T是做什么的。我们打算试生产……

13
00:00:56,110 --> 00:01:00,500
T1, all right? And what does T1 do?
T1，好吗？那么T1是做什么的呢？

14
00:01:00,500 --> 00:01:05,609
Well, T1 recognizes an int. Okay, so that's good.
嗯，t1可以识别int。好的，这很好。

15
00:01:05,609 --> 00:01:11,119
And it will match it and return, okay, and then E will return and we will
它会匹配它，然后返回，好的，然后E将返回，我们将

16
00:01:11,119 --> 00:01:13,770
succeed in parsing. And I forgot to mention it, also the
解析成功。我忘了提了，还有

17
00:01:13,770 --> 00:01:20,130
process, the input point will be moved across the int, and so when we're done
过程中，输入点将跨int移动，因此当我们完成时

18
00:01:20,130 --> 00:01:24,079
you will return, and we will have succeeded in parsing the string int
您将返回，我们将成功解析字符串int

19
00:01:24,079 --> 00:01:29,979
because E return true the production for E return true, and we consumed all of the
因为E返回TRUE，所以E的乘积返回TRUE，所以我们消耗了所有

20
00:01:29,979 --> 00:01:31,539
input. All right?
输入。好的?

21
00:01:31,539 --> 00:01:38,539
So now, let's consider a slightly more complicated example, okay?
现在，让我们考虑一个稍微复杂一点的例子，好吗？

22
00:01:39,920 --> 00:01:46,920
So let's try the input string Int times int.
让我们尝试输入字符串Int乘以int。

23
00:01:47,600 --> 00:01:51,729
All right? So again, we start with the production E.
好的?再一次，我们从制作E。

24
00:01:51,729 --> 00:01:55,409
Okay? And the first thing we'll do, is we'll
好吧?我们要做的第一件事，就是

25
00:01:55,409 --> 00:01:58,630
try the production E1. Same thing we did last time.
尝试生产E1。和我们上次做的一样。

26
00:01:58,630 --> 00:02:05,630
E1 is going to call the function T. And T is going to try the first
E1将调用函数T，T将尝试第一个

27
00:02:05,850 --> 00:02:09,259
production for T. Which, again, is the production int.
T的生产量，也就是生产量int。

28
00:02:09,258 --> 00:02:11,659
Okay? And the input pointer, of course, is
好吧?当然，输入指针是

29
00:02:11,659 --> 00:02:16,510
here, and then it will try to match that against an int.
这里，然后它将尝试将其与int匹配。

30
00:02:16,510 --> 00:02:18,569
Okay? If I match the first token in the input
好吧?如果我匹配输入中的第一个令牌

31
00:02:18,569 --> 00:02:22,150
stream against the, the terminal int. And it will succeed.
流，终端int。它会成功的。

32
00:02:22,150 --> 00:02:25,290
Okay? So the input pointer will be moved over.
好吧?因此输入指针将被移动。

33
00:02:25,290 --> 00:02:28,230
So T1 will return true. All right?
因此T1将返回TRUE。好的?

34
00:02:28,230 --> 00:02:33,409
And as a result. This right hand side here of the function
结果就是。函数的右侧

35
00:02:33,409 --> 00:02:37,769
T will also succeed, because T1 returns true, so T will return true.
T也会成功，因为T1返回TRUE，所以T将返回TRUE。

36
00:02:37,769 --> 00:02:43,040
Okay? Therefore, E1 will return true and E, E1
好吧?因此，E1将返回TRUE，E，E1

37
00:02:43,040 --> 00:02:45,159
returning true will cause E to return true.
返回TRUE将导致E返回TRUE。

38
00:02:45,159 --> 00:02:48,879
And in fact that will be the end of the execution of the program will terminate.
实际上，这将是程序执行的结束，也将终止。

39
00:02:48,879 --> 00:02:53,799
E will return true and the input player will only have advanced as far as int,
E将返回TRUE并且输入播放器将仅前进到INT，

40
00:02:53,799 --> 00:02:58,010
and so we will reject the parse. This is actually, ends up getting
因此我们将拒绝解析。这实际上是，最终得到了

41
00:02:58,010 --> 00:03:02,620
rejected. And the question of course is what
被拒绝了。当然问题是什么

42
00:03:02,620 --> 00:03:05,750
happened? All right.
发生了什么？好的。

43
00:03:05,750 --> 00:03:10,159
Why didn't we succeed in parsing this input?
为什么我们没有成功解析此输入呢？

44
00:03:10,159 --> 00:03:12,900
Which is clearly in the language of this grammar.
这显然是在这个语法的语言中。

45
00:03:12,900 --> 00:03:16,219
Well, the story here is actually a little bit interesting.
嗯，这里的故事其实有点有趣。

46
00:03:16,219 --> 00:03:23,219
What happened is down here when we discovered that Int matched the first
当我们发现Int与第一个

47
00:03:23,250 --> 00:03:26,859
production for T, we said that T was done.
为T生产，我们说T做完了。

48
00:03:26,859 --> 00:03:31,489
Okay, T had succeeded, had matched it's input.
好的，T成功了，匹配了它的输入。

49
00:03:31,489 --> 00:03:36,760
And then, when E ultimately returns and the whole parse fails, because we haven't
然后，当E最终返回并且整个解析失败时，因为我们没有

50
00:03:36,760 --> 00:03:42,010
consumed the input, we don't have a way to back track and try another alternative
消耗了输入，我们没有办法回溯并尝试另一个替代方案

51
00:03:42,010 --> 00:03:45,709
for T. If we were going to succeed we would have
对于T来说，如果我们要成功，我们会有

52
00:03:45,709 --> 00:03:50,819
to say, oh, well even though, we found a production for T that matched part of the
要说，哦，好吧，即使我们找到了T的一部作品，它与部分

53
00:03:50,819 --> 00:03:53,609
input. Since the overall parts fail, that must
输入。既然整个部件都失效了，那肯定是

54
00:03:53,609 --> 00:03:57,900
not have been the right production to choose for T.
不是为T选择的合适的制作。

55
00:03:57,900 --> 00:04:00,129
Maybe we should try some other productions for T.
也许我们应该为T尝试一些其他的作品。

56
00:04:00,129 --> 00:04:04,370
And in fact if we'd tried the second production for T, T2.
事实上，如果我们尝试了T，T2的第二次生产。

57
00:04:04,370 --> 00:04:09,370
We would have matched Int times T, and then we probably would of succeeded.
我们会匹配Int乘以T，然后我们可能会成功。

58
00:04:09,370 --> 00:04:11,420
We would have been able to manage int times int.
我们就可以处理int乘以。

59
00:04:11,420 --> 00:04:13,780
Okay? And so, the problem here is that even
好吧?所以，这里的问题是，即使是

60
00:04:13,780 --> 00:04:18,579
though there is backtracking within a production; while we're trying to find a
虽然在一部作品中有回溯；当我们试图找到一个

61
00:04:18,579 --> 00:04:21,150
production that works for a given non-terminals.
为给定的非终端工作的产品。

62
00:04:21,149 --> 00:04:25,800
So, while there is backtracking For a non-terminal during the time that we're
所以，虽然在我们的时间里有非终结点的回溯

63
00:04:25,800 --> 00:04:29,380
trying to find a production that works for that non-terminal, but there is no
试图找到适用于该非终端的产品，但没有

64
00:04:29,380 --> 00:04:33,780
backtracking once we have found a production that succeeds for
回溯一旦我们找到了一部成功用于

65
00:04:33,780 --> 00:04:36,139
non-terminals. So once a non-terminal commits and
非终端。因此，一旦非终端提交并

66
00:04:36,139 --> 00:04:41,380
returns and says, I have found a way to parse part of the input using one of my
返回并说，我已经找到了一种方法来解析部分输入，使用我的

67
00:04:41,380 --> 00:04:43,720
productions. There's no way, in this particular
制作。在这种特殊的情况下，是不可能的

68
00:04:43,720 --> 00:04:47,470
structure, this particular algorithm, to go back and revisit that decision and try
结构，该特定算法，以返回并重新访问该决策并尝试

69
00:04:47,470 --> 00:04:50,990
a different production. All right?
一部不同的作品。好的?

70
00:04:50,990 --> 00:04:54,870
So the problem is that if a production for non-terminal x succeeds, there's no
所以问题是，如果非终端x的生成成功，就没有

71
00:04:54,870 --> 00:04:58,460
way to backtrack to try a different production for x later.
回溯到稍后尝试x的不同生产的方式。

72
00:04:58,460 --> 00:05:01,180
So once x, once the function for x has returned.
所以一旦x，一旦x的函数返回。

73
00:05:01,180 --> 00:05:03,580
And we're really committed to that production.
我们真的致力于这部电影的制作。

74
00:05:03,580 --> 00:05:08,870
Now that means that the particularly Recursive Descent Algorithm that I showed
这意味着我展示的特别递归下降算法

75
00:05:08,870 --> 00:05:13,000
in the last video, is not completely general, and Recursive Descent is a
在上一个视频中，不是完全通用的，而递归下降是一个

76
00:05:13,000 --> 00:05:16,530
general technique. There are algorithms for Resursive
一般技术。对于Resursive，有一些算法

77
00:05:16,530 --> 00:05:20,669
Descent parsing that can parse any grammar.
可以分析任何语法的下降语法分析。

78
00:05:20,669 --> 00:05:24,090
That can implement the full language of any grammar.
可以实现任何语法的完整语言。

79
00:05:24,090 --> 00:05:28,870
And they have more sophisticated backtracking, than what I showed in the
他们有更复杂的回溯，比我在

80
00:05:28,870 --> 00:05:33,930
algorithm that I presented last time. Now the reason for showing this
我上次介绍的算法。现在展示这个的原因是

81
00:05:33,930 --> 00:05:37,370
particular algorithm is that it's easy to implement by hand.
特殊的算法是很容易手工实现的。

82
00:05:37,370 --> 00:05:40,970
So this is actually an algorithm, or approach to Recursive Descent that while
所以这实际上是一种算法，或者说是递归下降的方法

83
00:05:40,970 --> 00:05:45,300
it has this limitation, as you can see, it's very mechanical and very
它有这样的限制，正如你所看到的，它非常机械，非常

84
00:05:45,300 --> 00:05:52,259
straightforward to design a parser for a given for a given grammar.
为给定语法设计给定解析器的简单方法。

85
00:05:52,259 --> 00:05:55,240
And it will work for a rather large class, class of grammar.
而且它适用于一个相当大的班级，语法班级。

86
00:05:55,240 --> 00:06:00,210
So in particular, it'll work for any grammar where for any non-terminal at
因此，它特别适用于任何语法，其中任何非终结符都适用于

87
00:06:00,210 --> 00:06:03,620
most one production can succeed. So if you know from the way that you've
大多数一部作品都能取得成功。所以如果你从你所知道的方式中知道

88
00:06:03,620 --> 00:06:07,949
built your grammar, that in any situation, that the grammar can get into
建立你的语法，在任何情况下，语法都可以进入

89
00:06:07,949 --> 00:06:12,750
or the Recursive Descent Algorithm can get into during parsing, that at most one
或者递归下降算法在解析过程中可以进入，最多只有一个

90
00:06:12,750 --> 00:06:17,830
production can succeed. Then it this, this parsing is gradually
生产是可以成功的。那么它这个这个解析是逐渐的

91
00:06:17,830 --> 00:06:20,360
will be sufficient, because there will never be, once you find a production that
将是足够的，因为一旦你找到一部作品，就永远不会有

92
00:06:20,360 --> 00:06:24,650
succeeds, there will never be a need to go back and revisit that decision,
如果成功了，就再也不需要回去重新审视这个决定了，

93
00:06:24,650 --> 00:06:28,160
because it must be the case that none of the other productions could have
因为这肯定是其他任何一部作品都不可能有的情况

94
00:06:28,160 --> 00:06:31,889
succeeded. And it turns out that the example grammar
成功了。事实证明，示例语法

95
00:06:31,889 --> 00:06:36,800
that we're working with in the last couple of videos could actually be
我们在最后几个视频中使用的东西实际上可能是

96
00:06:36,800 --> 00:06:39,949
written to work with this algorithm. All right.
为使用此算法编写的。好的。

97
00:06:39,949 --> 00:06:41,650
And we would have to left factor the grammar.
而且我们还得把语法因素留下来。

98
00:06:41,650 --> 00:06:45,129
Well, actually there's more than one way to rewrite the grammar to work with this
实际上，有不止一种方法可以重写语法来处理这个问题

99
00:06:45,129 --> 00:06:48,840
Recursive Decent Algorithm but one way to do it Is to left factor it.
递归的得体算法，但有一种方法是左因式。

100
00:06:48,840 --> 00:06:53,080
I'm not going to say any more about left factoring in this video, because that's
我不会在这段视频中更多地谈到左因式分解，因为这是

101
00:06:53,080 --> 00:06:55,809
going to be a topic of a video that's coming up shortly.
很快就会成为一段视频的主题。

