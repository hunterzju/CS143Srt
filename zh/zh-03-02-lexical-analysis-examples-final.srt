0
00:00:01,719 --> 00:00:04,899
Welcome back, In this video, we're going to continue our lecture on lexical
欢迎回来，在这段视频中，我们将继续我们关于词汇的讲座

1
00:00:04,899 --> 00:00:08,800
analysis with some examples from past programming languages where interesting
用一些过去编程语言中有趣的例子进行分析

2
00:00:08,800 --> 00:00:15,800
lexical problems arose. So we've already talked a little bit about Fortran and what
词汇问题出现了。我们已经讨论了一些关于Fortran的内容

3
00:00:17,600 --> 00:00:21,669
are the interesting lexical rules in Fortran is the white space is
Fortran中有趣的词汇规则是空格是

4
00:00:21,669 --> 00:00:27,970
insignificant so white space doesn't matter and something like VAR1 to which
无关紧要，所以空格无关紧要，像VAR1这样的东西

5
00:00:27,970 --> 00:00:34,610
could be a variable name VAR1 is exactly the same as VA R1 so these two program
可能是变量名VAR1与VA R1完全相同，所以这两个程序

6
00:00:34,610 --> 00:00:39,130
fragments have to mean exactly the same thing sand the idea in Fortran is that you
片段的含义必须完全相同，Fortran中的概念是

7
00:00:39,130 --> 00:00:42,410
can take your program and you could delete all the blanks from it and that shouldn't
可以拿走你的程序，你可以删除其中的所有空白，但这不应该

8
00:00:42,410 --> 00:00:48,920
change what the program means at all. Let's take a look at an example of how
完全改变程序的含义。让我们来看一个例子，看看如何

9
00:00:48,920 --> 00:00:52,920
Fortran's white space rule affects lexical analysis. Here are a couple of Fortran
Fortran的空格规则会影响词法分析。这里有几个Fortran

10
00:00:52,920 --> 00:00:57,910
code fragments and I should say that this example is taken from the dragon book and
代码片段，我应该说这个例子取自“龙之书”，

11
00:00:57,910 --> 00:01:01,590
actually couple of the later examples were also taken from an older edition of the
实际上，后面的几个示例也取自旧版本的

12
00:01:01,590 --> 00:01:07,810
dragon book. But anyway what we have here, this is actually the header of a Fortran
龙书。但不管怎么说，这实际上是一个Fortran的标题

13
00:01:07,810 --> 00:01:14,810
loop. And you know it's a loop because it has the key word do, which is like four in
循环。你知道这是一个循环，因为它有一个关键字do，就像4英寸

14
00:01:16,760 --> 00:01:23,760
modern C or C++ so I'd say loop key word And then we have out iteration variable I
现代的C或C++，所以我会说循环关键字，然后我们就有了输出迭代变量i

15
00:01:23,860 --> 00:01:29,280
and we have a range that I will vary between. So, in this case I will go from
我们有一个范围，我会在这个范围内变化。所以，在这种情况下，我将从

16
00:01:29,280 --> 00:01:34,520
one up to 25. And then this number five here, this is a little bit odd, something
一张最多25张。然后这里的第五个数字，这有点奇怪，

17
00:01:34,520 --> 00:01:39,870
you don't see in modern languages. In the old days in Fortran you would have your do
你在现代语言中是看不到的。在过去的Fortran中，你可以随心所欲

18
00:01:39,870 --> 00:01:44,299
statement at the top of the loop and then the size of the loop or all the statements
语句，然后是循环的大小或所有语句

19
00:01:44,299 --> 00:01:49,770
included in the loop Were named by a label, they came right after the do
包括在循环中的是由标签命名的，它们紧跟在DO之后

20
00:01:49,770 --> 00:01:56,770
statement. So, the loop will extend from the, the header, the do statement down to
声明。因此，循环将从、头、do语句向下扩展到

21
00:01:56,840 --> 00:02:00,049
the label five. So whatever statement was able with five, all of the statements in
五号标签。所以无论什么语句都可以有5个，所有的语句都在

22
00:02:00,049 --> 00:02:05,310
between would be part of the loop. And so, the loop would execute those statements
会是循环的一部分。因此，循环将执行这些语句

23
00:02:05,310 --> 00:02:08,890
then we'll go back around to the header and then we keep executing those until it
然后，我们将返回到头文件，然后继续执行这些文件，直到它

24
00:02:08,889 --> 00:02:14,550
had done so for every one of the values of the iteration variable, in this case, one
已经为迭代变量的每个值执行了此操作，在本例中为一个

25
00:02:14,550 --> 00:02:19,400
to 25. Now, here's a nother code fragment and as you can see this one is almost
到25岁。现在，这是另一个代码片段，如您所见，这个代码片段几乎

26
00:02:19,400 --> 00:02:25,580
exactly the same as the one above. The only difference is, let me just switch
和上面的一模一样。唯一的区别是，让我换一下

27
00:02:25,580 --> 00:02:31,420
colors, is here that this particular fragment has a comma in that position and
颜色，在这里这个特定的片段在那个位置有一个逗号，

28
00:02:31,420 --> 00:02:37,000
this fragment has a period. And it turns out that this difference makes all the
此片段有句点。事实证明，这种不同使得所有的

29
00:02:37,000 --> 00:02:44,000
difference that these two fragment of code mean completely different things. So, this
区别在于这两段代码的含义完全不同。那么这个呢，这个

30
00:02:44,209 --> 00:02:50,500
fragment, the first one, is in fact a do loop as I said before so it has the
正如我前面所说，第一个片段实际上是一个DO循环，所以它有

31
00:02:50,500 --> 00:02:57,060
keyword do, the label five, the variable I and the range one to 25. Now this fragment
关键字DO、标签5、变量I和范围1到25。现在这个片段

32
00:02:57,060 --> 00:03:03,800
down here, this is actually a variable name, do 5I, So far as writing without the
在这里，这实际上是一个变量名，do 5i，只要不使用

33
00:03:03,800 --> 00:03:08,250
blanks. Remember the blanks don't matter, This would be do 5I and this is an
一片空白。记住，空格并不重要，这将是Do 5i，这是一个

34
00:03:08,250 --> 00:03:15,250
assignment equals the number 1.25. Okay, And so you can see here these symbols, the
赋值等于数字1.25。好的，所以你可以在这里看到这些符号，

35
00:03:17,209 --> 00:03:22,840
sequence, the first sequence of symbols is interpreted completely differently
序列，则对第一个符号序列的解释完全不同

36
00:03:22,840 --> 00:03:28,769
depending on whether there's a period or a comma further on. And so let's just be a
取决于后面是句号还是逗号。所以让我们只做一个

37
00:03:28,769 --> 00:03:33,470
little more precise about that. How do we know what do is? So let's just focus on
关于这一点稍微精确一点。我们怎么知道什么是Do？所以让我们把注意力集中在

38
00:03:33,470 --> 00:03:39,060
the keyword here do and when we're at this point, when our focus is here right after
这里的关键字做，当我们在这一点上，当我们的焦点在这里之后

39
00:03:39,060 --> 00:03:45,430
the zero. And keep in mind that, that the way this is going to be implemented is by
零。请记住，实现这一点的方式是通过

40
00:03:45,430 --> 00:03:50,269
a left to right scan so we're going to be walking in this direction over the, over
一次从左到右的扫描，所以我们将朝这个方向走，完毕

41
00:03:50,269 --> 00:03:53,980
the input looking at each character successfully and when our focus reaches
成功查看每个字符的输入，当我们的焦点到达

42
00:03:53,980 --> 00:03:58,790
this point, we can make a decision. Is this a, is this a keyword 'cause we've
在这一点上，我们可以做出决定。这是，这是个关键词吗，因为我们

43
00:03:58,790 --> 00:04:04,379
seen the entire keyword too. And the problem is that we don't have information
我也看到了整个关键字。问题是我们没有信息

44
00:04:04,379 --> 00:04:07,840
to make that decision. We don't know whether this is do or whether it's going
才能做出这个决定。我们不知道这是真的还是会

45
00:04:07,840 --> 00:04:13,190
to be eventually be part of a variable name like do 5I. And the only way to know
最终成为像do 5i这样的变量名的一部分。唯一能知道的方法就是

46
00:04:13,190 --> 00:04:18,109
is to look ahead in the input to this position to see whether there's a comma or
就是向前看这个位置的输入，看看有没有逗号或

47
00:04:18,108 --> 00:04:25,109
a period there. So this is an example of lexical analysis that requires look ahead.
在那里有一段时间。这是一个词汇分析的例子，需要向前看。

48
00:04:25,350 --> 00:04:31,280
In order to understand the role of due, as we're going left to right. We have to pick
为了理解DUE的作用，我们从左到右。我们得选一个

49
00:04:31,280 --> 00:04:36,030
ahead of the input to see some symbols that come later on. And we can't possibly
在输入之前查看稍后出现的一些符号。我们不可能

50
00:04:36,030 --> 00:04:42,430
disambiguate role of do until that poin t because up to this point, the sequence and
消除DO在位置测试之前作用歧义，因为到目前为止，序列和

51
00:04:42,430 --> 00:04:45,160
the symbols are exactly the same and so the only thing that distinguishes them is
这些符号是完全相同的，所以唯一区别它们的是

52
00:04:45,160 --> 00:04:48,870
something that's much, much further on. And as you can imagine, having lots of
一些更遥远、更遥远的事情。正如你可以想象的，有很多

53
00:04:48,870 --> 00:04:53,310
look ahead complicates the implementation of lexical analysis and so one of the
展望未来会使词法分析的实现复杂化，因此

54
00:04:53,310 --> 00:04:59,020
goals in the design of lexical systems is to minimize the amount of the look ahead
词汇系统设计的目标是将前瞻的数量降到最低。

55
00:04:59,020 --> 00:05:04,270
or bound the amount of look ahead that is required. So you might wonder why Fortran
或限定所需的前瞻时间。所以你可能会想为什么Fortran

56
00:05:04,270 --> 00:05:08,870
has this funny rule about white space. It turns out that on punch card machines it
有一条关于空格的有趣规则。原来，在穿孔卡片机上，

57
00:05:08,870 --> 00:05:14,030
was easy to add extra blanks by accidents and as a result they added this rule to
很容易意外地添加额外的空格，因此他们将此规则添加到

58
00:05:14,030 --> 00:05:18,130
the language so the punch card operator wouldn't have to redo their work all the
语言，这样穿孔卡操作员就不需要从头到尾重做他们的工作

59
00:05:18,130 --> 00:05:25,130
time. Fortunately today we don't enter our programs anymore on punch cards. But this
时间到了。幸运的是，今天我们不再通过打孔卡进入我们的计划。但是这件事

60
00:05:25,530 --> 00:05:29,370
example does help us understand better what we're trying to do in lexical
示例确实帮助我们更好地理解了我们试图在词法中做什么

61
00:05:29,370 --> 00:05:33,490
analysis so as I said the goal is to partition the string. We're trying to buy
分析，正如我所说，目标是对字符串进行分区。我们要买的是

62
00:05:33,490 --> 00:05:38,830
the string up into the logically units of the language. And this is implemented by
将字符串放入语言的逻辑单元中。这是通过以下方式实现的

63
00:05:38,830 --> 00:05:43,180
reading left to right. So we're doing a left to right scan over the input,
从左到右阅读。所以我们要对输入进行从左到右的扫描，

64
00:05:43,180 --> 00:05:48,340
recognizing one token at a time. And because of that, look ahead may be
一次识别一个令牌。正因为如此，向前看可能会是

65
00:05:48,340 --> 00:05:52,340
required to decide where one token ends and the next token begins. And again, I
需要决定一个令牌在哪里结束，下一个令牌在哪里开始。再说一遍，我

66
00:05:52,340 --> 00:05:56,300
want to stress that look ahead is always needed but we would like to minimize the
我想强调的是，向前看总是需要的，但我们想尽量减少

67
00:05:56,300 --> 00:06:00,949
amount of look ahead. And in fact, we like to bound it to some constant to this,
向前看的量。事实上，我们喜欢把它限制在某个常数上，

68
00:06:00,949 --> 00:06:04,380
because it will simplify the implementation of lexical analyzer quite a
因为它将大大简化词法分析器的实现

69
00:06:04,380 --> 00:06:10,240
bit. Now just to illustrate to look ahead is something that we always have to worry
有点。现在，仅仅是为了说明一下，展望未来，这是我们总是要担心的事情。

70
00:06:10,240 --> 00:06:15,440
about. Let's consider this example which we've looked at before and just notice
关于。让我们考虑一下我们之前看过的这个例子，请注意

71
00:06:15,440 --> 00:06:19,800
that when we're reading left to right, let's look at this keyword else here, when
当我们从左到右阅读时，让我们看看这里的其他关键字，当

72
00:06:19,800 --> 00:06:26,669
we read the E. We have to decide is that a variable name or some symbol but itself or
我们读的是E。我们必须决定是变量名还是某个符号，而不是它本身，或者

73
00:06:26,669 --> 00:06:32,039
do we want to consider it together with the symbols that follow them. And so
我们是否要将其与后面的符号一起考虑。因此，

74
00:06:32,039 --> 00:06:36,020
there's a look ahead issue here. After we scanned E, we have to decide does that sit
这里有一个前瞻性的问题。在我们扫描了E之后，我们必须决定这个位置

75
00:06:36,020 --> 00:06:40,770
by itself or is it part of a larger lexical unit? And, you know there a re
它本身还是一个更大的词汇单位的一部分？而且，你知道有一个Re

76
00:06:40,770 --> 00:06:45,830
single character variable names in this example like I, J, and Z and so it's not
本例中的单字符变量名如I、J和Z，因此不是

77
00:06:45,830 --> 00:06:52,009
unreasonable that E could also be one and another example is this double-equals.
不合理的是，E也可以是1，而另一个例子就是这个双等式。

78
00:06:52,009 --> 00:06:56,889
When we read a single equal sign, how do we decide whether that's a single equals
当我们读到一个等号时，我们如何判断这是不是一个等号呢

79
00:06:56,889 --> 00:07:01,009
like these other assignments or that it's really a double-equals. Well, in order to
就像这些其他任务一样，或者这真的是一个双等分。那么为了

80
00:07:01,009 --> 00:07:05,380
do that, if our focus point is right here, we have to look ahead and see. There's
做到这一点，如果我们的焦点就在这里，我们必须向前看，看看。那里有

81
00:07:05,380 --> 00:07:10,050
another = coming up and that's how we know or how we will know. That we wanted to
另一个=即将到来，这就是我们如何知道或我们将如何知道。我们想要

82
00:07:10,050 --> 00:07:17,050
combine it into a single symbol instead of considering this equals by itself. Another
将其合并为单个符号，而不是将其单独视为相等。另一个

83
00:07:19,060 --> 00:07:26,060
example from a, a language from long ago PL [inaudible] is a interesting language.
很久以前的一种语言PL[听不见]是一种有趣的语言。

84
00:07:26,110 --> 00:07:33,110
It was designed by IBM and it stands for Programming Language One. Alright, It was
它是由IBM设计的，它代表编程语言One。好吧，是这样的

85
00:07:37,979 --> 00:07:43,259
designed to be the programming language. At least with an IBM that would be used by
被设计成编程语言。至少与IBM一起使用，该IBM将由

86
00:07:43,259 --> 00:07:47,310
everybody and is supposed to encompass all the features that every programmer would
每个人都可以使用，并且应该包含每个程序员都会使用的所有功能

87
00:07:47,310 --> 00:07:52,099
ever need. And as such, it was supposed to be very, very general and have very few
从来不需要。因此，它被认为是非常，非常普遍的，只有很少的

88
00:07:52,099 --> 00:07:57,940
restrictions. And so, one of the features of PL [inaudible] is that Keywords are not
限制。因此，PL[听不见]的特征之一是关键字不是

89
00:07:57,940 --> 00:08:04,110
reserved. So, in PL [inaudible] you can use a keyword both as a keyword and also
保留的。因此，在PL[Indible]中，您既可以将关键字用作关键字，也可以将其用作关键字

90
00:08:04,110 --> 00:08:07,620
as a variable. So you can use keywords and other roles other than keywords and that
作为一个变量。因此您可以使用关键字和其他角色，而不是关键字

91
00:08:07,620 --> 00:08:11,860
means you can write interesting, interesting sentences or interesting
意思是你可以写有趣的句子或者有趣的句子

92
00:08:11,860 --> 00:08:15,550
programs like this. And let me just read this out loud because it sounds
像这样的节目。让我把这个大声读出来，因为它听起来

93
00:08:15,550 --> 00:08:21,639
interesting, if else then, then = else, else = then. And the correct organization
有趣的是，如果不是这样，那么=Else，Else=Then。和正确的组织

94
00:08:21,639 --> 00:08:28,639
here of course is that this is a keyword, this is a keyword and this is a keyword.
这里当然是这是一个关键字，这是一个关键字，这是一个关键字。

95
00:08:29,870 --> 00:08:35,219
And the other things, switch colors here, are all variables. These are all variable
其他的东西，这里切换颜色，都是变量。这些都是可变的

96
00:08:35,219 --> 00:08:40,899
names. And as you can imagine this mix a lexical analysis somewhat difficult
名字。正如你可以想象的那样，这种混搭的词汇分析有些困难

97
00:08:40,899 --> 00:08:45,649
because when we're just scanning left to right like when we're coming through here
因为当我们从左向右扫描的时候，就像我们经过这里的时候

98
00:08:45,649 --> 00:08:49,399
when we say we're at to this point, you know how do we decide whether these things
当我们说我们已经到了这一步，你知道我们是如何决定这些事情是否

99
00:08:49,399 --> 00:08:54,160
are going to be variable names or keywords without seeing what's going on in the rest
将是变量名或关键字，而不会看到睡觉中发生了什么

100
00:08:54,160 --> 00:09:00,970
of the expression so lexical analysis in PL [inaudible] was quite challenging. So
因此，在PL[听不见]中进行词法分析是相当有挑战性的。所以

101
00:09:00,970 --> 00:09:05,410
here's another example from PL [inaudible]. Here we have a program
这里有另一个来自PL[听不见]的例子。这里我们有一个节目

102
00:09:05,410 --> 00:09:11,480
fragment, we have the word declare and then an open paren and a close paren
片段，我们有单词Declare，然后是一个开放的Paren和一个关闭的Paren

103
00:09:11,480 --> 00:09:15,029
encompassing a bunch of arguments so we'll point out the balance parens here and then
包含了一堆参数，所以我们会在这里指出平衡的花括号

104
00:09:15,029 --> 00:09:21,929
just a list of n things inside the parens. And it turns out that the pending on the
只有一张家长内n件东西的清单。结果是待决的

105
00:09:21,929 --> 00:09:27,509
larger context in which this whole expressions sits, this could be either a
整个表达式所处的更大的上下文中，这可以是一个

106
00:09:27,509 --> 00:09:32,970
keyword. Or it could be in array reference that mean when, yeah, that mean declare
关键字。或者它可以在数组引用中，这意味着，是的，这意味着声明

107
00:09:32,970 --> 00:09:36,850
here could either be a keyword or it could be a name of an array and this could be
这里可以是关键字，也可以是数组的名称，这可以是

108
00:09:36,850 --> 00:09:42,239
the end [inaudible] to the array. And as it happens, there is no way looking at
阵列的末端[听不见]。碰巧的是，我们不可能看到

109
00:09:42,239 --> 00:09:48,679
just this much that we can decide. This fragment is valid, is a valid declaration
就这么多，我们可以决定。此片段有效，是有效的声明

110
00:09:48,679 --> 00:09:52,160
and it's also a valid array reference. So, it would depend on what came next. It
它也是一个有效的数组引用。因此，这将取决于接下来会发生什么。它

111
00:09:52,160 --> 00:09:56,259
might depend on for example whether there was an equal sign here in which cases
可能取决于，例如这里是否有等号，在哪些情况下

112
00:09:56,259 --> 00:10:01,230
would be interpreted as an assignment and, and declare would be the name of an array.
将被解释为赋值，而DECLARE将是数组的名称。

113
00:10:01,230 --> 00:10:05,399
And, the interesting thing about this example is that because the number of
这个例子的有趣之处在于，因为

114
00:10:05,399 --> 00:10:11,569
arguments in here is unbounded. There could be n of them for any n. This
这里的参数是无界的。任何n个都可能有n个。这个

115
00:10:11,569 --> 00:10:18,569
requires unbounded look ahead. Okay, So to implement this properly as you're scanning
需要无拘无束地向前看。好的，为了在你扫描的时候正确地实现这一点

116
00:10:20,579 --> 00:10:25,299
left to right to decide whether declare again is a keyword or re-reference, we
从左到右确定DECLARE AUDE是关键字还是重新引用，我们

117
00:10:25,299 --> 00:10:31,259
would have to scan beyond this entire argument list to see what came next.
必须在整个参数列表之外进行扫描，看看接下来会发生什么。

118
00:10:31,259 --> 00:10:37,779
Fortren and PL [inaudible] were designed in the 1950s and 1960s respectively and
Fortren和PL[无声]分别设计于20世纪50年代和60年代，

119
00:10:37,779 --> 00:10:42,199
those experiences taught us a lot about what not to do in the lexical design of
这些经历教会了我们很多关于在词汇设计中不应该做的事情

120
00:10:42,199 --> 00:10:45,910
programming languages. So things are a lot better today but the problems have not
编程语言。所以今天的情况好多了，但问题并没有

121
00:10:45,910 --> 00:10:51,179
gone away completely and I'll use an example from C++ that illustrate this. So
完全消失了，我将使用C++中的一个示例来说明这一点。所以

122
00:10:51,179 --> 00:10:55,779
here's an example of C++ template syntax which you may be familiar with or you may
下面是C++模板语法的一个示例，您可能很熟悉，也可能

123
00:10:55,779 --> 00:11:02,779
have seen the similar syntax in Java. And C++ has another operator called Stream
我在Java中看到过类似的语法。C++有另一个运算符，称为Stream

124
00:11:04,049 --> 00:11:10,129
Input. So this operator here reads from an input stream and stores the results in a
输入。所以这里的运算符从输入流中读取并将结果存储在

125
00:11:10,129 --> 00:11:15,529
variable. And the problem is, here that there's a conflict with nested templates,
变量。问题是，这里与嵌套模板存在冲突，

126
00:11:15,529 --> 00:11:22,529
So for example, if I have a template o peration that looks like this. Okay.
例如，如果我有一个类似这样的模板操作。好吧。

127
00:11:27,199 --> 00:11:31,709
Notice what happens here. So my intention here is to have a nested application of
注意这里发生了什么。所以我在这里的目的是让嵌套的应用程序

128
00:11:31,709 --> 00:11:36,739
templates but I wind up with two great than signs together at the end and this
模板，但我在最后得到了两个比符号更好的符号，这是

129
00:11:36,739 --> 00:11:40,279
looks just like the stream operator and the question is what should the lexical
看起来就像流运算符，问题是词法应该是什么

130
00:11:40,279 --> 00:11:47,279
analyzer do? Should it interpret this as two close brackets for template or should
分析器做什么？它应该将此解释为模板的两个右括号，还是应该

131
00:11:47,350 --> 00:11:52,559
it interpret it as a two greater than signs stuck together as a stream operator.
它将其解释为2大于作为流运算符粘在一起符号。

132
00:11:52,559 --> 00:11:56,850
And it turns out that for a very long time, I think most C++ compilers have now
事实证明，在很长一段时间里，我认为大多数C++编译器现在都有

133
00:11:56,850 --> 00:12:02,559
fixed this. The C++ compiler in this situation would regard this as a stream
已修复此问题。在这种情况下，C++编译器会将其视为流

134
00:12:02,559 --> 00:12:06,249
operator and you would get a syntax there. And what do you think the solution was, it
运算符，您将在那里获得语法。你认为解决方案是什么，它

135
00:12:06,249 --> 00:12:11,249
turns out that the only fix that you could really do to make this lexically analyzed
事实证明，您真正能做的唯一修复方法是对此进行词法分析

136
00:12:11,249 --> 00:12:16,329
the correct way was to insert a blank so you would have to write this and you would
正确的方法是插入一个空格，这样您就必须这样写，这样您就可以

137
00:12:16,329 --> 00:12:20,220
have to remember to put the blank in there so that the two greater than signs were
必须记得把空格放在那里，这样两个比符号大的

138
00:12:20,220 --> 00:12:26,179
not together. And you know that's kind of ugly that we have to put in white space to
不是在一起。你知道，这是一种丑陋，我们必须放在空白处

139
00:12:26,179 --> 00:12:33,179
fix the lexical analysis of the program. So to summarize the goal of lexical
修正程序的词法分析。综上所述，词汇学的目标是

140
00:12:36,319 --> 00:12:40,759
analysis is to partition the input streams into lexemes, okay. So we have drop down
分析就是将输入流划分成词位，好的。所以我们有下拉菜单

141
00:12:40,759 --> 00:12:45,579
dividing lines in the string to decide where the lexemes lie and we want to
在字符串中分隔线以确定词位所在的位置，我们希望

142
00:12:45,579 --> 00:12:49,949
identify the token of each lexeme, And because, exactly because we're doing a
确定每个词位的标记，因为，正是因为我们在做一个

143
00:12:49,949 --> 00:12:53,779
left to right scan, sometimes we have to have look ahead. Sometimes we have to peek
从左向右扫描，有时我们必须向前看。有时我们不得不偷看

144
00:12:53,779 --> 00:12:57,519
ahead in the input string to figure out what the current string we're looking at,
在输入字符串的前面，以确定我们正在查看的当前字符串是什么，

145
00:12:57,519 --> 00:13:00,740
what the current substring we're looking at, what role it plays in the language?
我们当前看到的子字符串是什么，它在语言中扮演什么角色？

