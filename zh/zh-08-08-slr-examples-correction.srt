0
00:00:04,500 --> 00:00:11,500
In this video, we're gonna to work through a couple of SLR parsing examples. So let's
在这段视频中，我们将演练几个单反解析示例。所以让我们

1
00:00:12,230 --> 00:00:19,230
do a very simple example. Let's consider the grammar. S goes to SA, or S goes to B.
做一个非常简单的例子。让我们来考虑一下语法。S归SA，或S归B。

2
00:00:23,380 --> 00:00:28,410
And what does this grammar do? It produces strings of A's followed by a B. So any
那么这个语法是做什么的呢？它会产生A后跟B的字符串。所以任何

3
00:00:28,410 --> 00:00:35,410
number of A's followed by a single B.  And notice that the grammar is left recursive,
A的数量后面跟着一个B，注意语法是左递归的，

4
00:00:38,719 --> 00:00:43,829
and recall that that's not a problem for a bottom up parser. Slr parsers, LR parsers,
回想一下，这对于自下而上的解析器来说不是问题。SLR解析器、LR解析器

5
00:00:43,829 --> 00:00:49,800
are perfectly happy with left recursive grammars. So let's begin by working out
对左递归语法非常满意。所以让我们从健身开始

6
00:00:49,800 --> 00:00:54,320
what the automaton for this, grammar should be, what the parsing automaton
它的自动机是什么，语法应该是什么，解析自动机是什么

7
00:00:54,320 --> 00:00:58,670
should be. And recall that the first step is to add a new production to the grammar.
应该是的。回想一下，第一步是将新的结果添加到语法中。

8
00:00:58,670 --> 00:01:02,640
We have to add a new start symbol. That all it does, it has one production that
我们必须添加一个新的开始符号。它所做的一切，它只有一部作品

9
00:01:02,640 --> 00:01:07,390
goes to the old start symbol. And that's, again, just for technical reasons. Now,
转到旧的开始符号。再说一次，这只是出于技术原因。现在,

10
00:01:07,390 --> 00:01:12,640
the start symbol, or sorry, the start state of the NFA of the parsing automaton
开始符号，或对不起，解析自动机的NFA的开始状态

11
00:01:12,640 --> 00:01:18,189
is this item. S prime, our new start symbol, goes to dot S, our old start
就是这件东西。S质数，我们的新开始符号，去到点S，我们的旧起点

12
00:01:18,189 --> 00:01:23,930
symbol. And rather than build the NFA, and then do the subset of states construction.
符号。而不是构建NFA，然后进行状态子集构建。

13
00:01:23,930 --> 00:01:28,680
Let's just go ahead and work out what items must be in the first state of the
让我们继续并计算出哪些项必须处于

14
00:01:28,680 --> 00:01:35,220
DFA. So remember that all the epsilon moves in the, in the DF-, in the NFA, are
DFA。所以请记住，在DF-中，在NFA中，所有的epsilon移动都是

15
00:01:35,220 --> 00:01:41,329
due to moves that happen because we don't see a non terminal on the stack. But
因为我们在堆栈上看不到非终端，所以发生了移动。但

16
00:01:41,329 --> 00:01:44,759
instead see something derived from that non terminal. So if we have a dot, Right
相反，可以看到从非终端派生内容。所以如果我们有一个圆点，对吗？

17
00:01:44,759 --> 00:01:50,020
next to a non terminal. That means that there's an epsilon move in the NFA to all
紧挨着一个非终点站。这意味着在NFA中有一个ε移动到所有人

18
00:01:50,020 --> 00:01:55,060
the items that have, for all the productions, all the, all the first items,
对于所有的作品，所有的，所有的第一个项目，

19
00:01:55,060 --> 00:01:59,799
for the productions of that non terminal. What do I mean by that? I mean that this
为那个非终结者的作品。我这么说是什么意思？我是说这个

20
00:01:59,799 --> 00:02:04,930
state, I mean epsilon production to S goes to dot SA. So this is the first item in
国家，我的意思是ε生产到S到点SA。所以这是第一件物品

21
00:02:04,930 --> 00:02:09,090
recognizing, this production. So the dots all the way at the left, And there would
认识到，这部作品。所以所有的点都在左边，那里会

22
00:02:09,090 --> 00:02:13,700
also be an item for the other production for S, S goes to dot B. Alright, so that's
也是S的另一部作品的项目，S去了点B。好的，那就是

23
00:02:13,700 --> 00:02:18,440
the epsilon closure in the NFA of this start item. So this'll be the first state.
此开始项的NFA中的epsilon闭合。所以这将是第一个州。

24
00:02:18,440 --> 00:02:24,739
These three things, these three items would be the first state of the DFA. And
这三件事，这三件事就是<foreign language=“English”>DFA</foreign>的第一个状态。和

25
00:02:24,739 --> 00:02:28,000
now we have to consider what would happen on each of the possible transitions for
现在，我们必须考虑在每个可能的转换上会发生什么

26
00:02:28,000 --> 00:02:32,270
each of the symbols that we might see on the stack. So let's think about what
我们可能在堆栈上看到的每一个符号。所以让我们想一想

27
00:02:32,270 --> 00:02:39,270
happens if we see a B. So if we see a B on the stack, then the only item that's going
如果我们看到一个B就会发生。所以如果我们在堆栈上看到一个B，那么唯一要处理的项目

28
00:02:39,989 --> 00:02:46,989
to be in that state is S goes to B dot okay? So it'll be fine to see a B and this
处于那种状态就是S去B点，好吗？所以看一个B和这个会很好的

29
00:02:47,400 --> 00:02:52,519
would be the only item that was valid for the stack contents. Now another
将是堆栈内容唯一有效的项。现在又来了一个

30
00:02:52,519 --> 00:02:59,519
possibility is that we'll see an S. So, if we see an S on the stack, what will
有可能我们会看到一个S。那么，如果我们在堆栈上看到一个S，那会是什么呢？

31
00:03:00,140 --> 00:03:07,140
happen? Well, we're going to go to a state that has two items. S prime goes to S dot,
发生了什么？好，我们要去一个有两个项目的州。S的质数是S点，

32
00:03:10,610 --> 00:03:14,959
so that we've seen S on the stack, and we're ready to reduce by, by this
所以我们已经在堆栈上看到了S，我们已经准备好通过这个来减少

33
00:03:14,959 --> 00:03:21,959
production, possibly. And also, S goes to S. A. And now, Clearly in this state let's
可能是制作。还有，S去了S.A.，现在，很明显，在这个状态下，让我们

34
00:03:24,890 --> 00:03:31,510
talk about his state down here. There are no more transitions possible. In all there
在这里谈论他的状态。不可能有更多的过渡。总而言之，在那里

35
00:03:31,510 --> 00:03:35,049
is only one item in the state dots all the way at the right hand side, so that state
状态中只有一项一直点在右手边，所以状态

36
00:03:35,049 --> 00:03:39,500
is completely done. In this state the one over here on the right side. While one of
已经完全完成了。在这个州，右边的那个。而其中一个

37
00:03:39,500 --> 00:03:43,330
these items is complete, the dot's all the way at the right. But the other item still
这些都是完整的，圆点一直在右边。但是另一件物品仍然

38
00:03:43,330 --> 00:03:50,330
has an A, so there could be one more transition out of this state. To the item,
有一个A，所以这个状态可能还会有一个转变。到物品上，

39
00:03:50,489 --> 00:03:57,489
S goes to SA dot, Alright? And now if we look at this, we see that for the most
S去SA点，好吗？现在如果我们看这个，我们看到的最多的是

40
00:03:59,989 --> 00:04:03,980
part these states are in pretty good shape. So these two states this one down
部分这些州的状况相当不错。所以这两个状态这一个向下

41
00:04:03,980 --> 00:04:07,459
here and this one over here, they only have a single item, and so there's no
这里和那里，他们只有一件物品，所以没有

42
00:04:07,459 --> 00:04:12,060
possibility of a shift reduce conflict in those states. There's only one item,
转变的可能性减少了这些州的冲突。只有一件东西，

43
00:04:12,060 --> 00:04:16,080
there's only one thing to do. The only possibility here in both of these states
只有一件事可以做。在这两个州唯一的可能性是

44
00:04:16,079 --> 00:04:22,970
is to reduce. This state, the initial start state, has no reduce moves. So it's
就是减少。此状态(初始启动状态)没有Reduce移动。所以这就是

45
00:04:22,970 --> 00:04:27,160
only shift moves here, so there can't be a shift reduce conflict, because there are
只有移位才能在这里移动，所以不可能有移位减少冲突，因为

46
00:04:27,160 --> 00:04:31,710
no reduce items, No possible reduce actions. And there is to reduce, reduce
没有减少项目，没有可能的减少操作。还有就是减少，减少

47
00:04:31,710 --> 00:04:35,590
conflicts for the same reason. The only state of interest really for the point of
出于同样的原因发生冲突。唯一令人感兴趣的状态就是

48
00:04:35,590 --> 00:04:41,639
view for what who the grammar is SLR1 is this middle state. And here we can either
语法是什么的视图SLR1就是这个中间状态。在这里我们可以

49
00:04:41,639 --> 00:04:48,639
reduce by s prime goes to s dot, or we could shift and A onto the stack. And the
减去s素数就是s点，或者我们可以把A移位到堆栈上。以及

50
00:04:51,550 --> 00:04:58,550
question is, what is in the follow of S prime? So what can follow S prime in the
问题是，紧跟在S素数后面的是什么？那么在S素数之后可以有什么呢？

51
00:04:58,970 --> 00:05:02,500
grammar? And if we look back up at our grammar, we'll see that nothing can follow
语法？如果我们回顾一下我们的语法，我们会发现没有什么是可以遵循的

52
00:05:02,500 --> 00:05:06,570
S prime. S prime is the start symbol, and so, in fact, the only thing in the follow
这是质数。的素数是开始符号，所以，实际上，后面唯一的

53
00:05:06,570 --> 00:05:11,120
of S prime is the, And to the input. And so what that tells us is that we'll reduce
是S素数的，和是输入。所以这告诉我们，我们将减少

54
00:05:11,120 --> 00:05:17,750
by s prime, goes to s, if, if we're out of input. And otherwise if there is an A on
除以s素数，如果输入不足，则转到s。否则，如果上面有A

55
00:05:17,750 --> 00:05:22,310
the stack, sorry, if there's an a in the input, then we'll shift it onto the stack.
堆栈，对不起，如果输入中有a，那么我们会把它移到堆栈上。

56
00:05:22,310 --> 00:05:28,979
And so this grammar is, SLR1. There are no shift reduce, or reduce, reduce conflicts
所以这个语法是，SLR1。不存在移位减少，或减少，减少冲突

57
00:05:28,979 --> 00:05:35,979
implied by this parsing automaton. Let's do another example, slightly more complex.
这个解析自动机所暗示的。让我们再举一个例子，稍微复杂一点。

58
00:05:36,759 --> 00:05:41,770
In fact, let's just extend the previous grammar. We'll have a, a production. S
实际上，让我们只扩展前面的语法。我们会有一部，一部作品。%s

59
00:05:41,770 --> 00:05:47,979
goes to SAS, okay? So now we have the non terminal twice with an A in between, Or S
去特种部队，好吗？所以现在我们有两次非终结符，中间有一个A，或者S

60
00:05:47,979 --> 00:05:52,449
can go to B, just like before. And now let's work out the parsing automaton for
可以去B，就像以前一样。现在让我们计算出以下内容的解析自动机

61
00:05:52,449 --> 00:05:59,449
this grammar. And, once again, We'll need to add a dummy start symbol To the grammar
这个语法。再一次，我们需要在语法中添加一个虚拟开始符号

62
00:06:00,110 --> 00:06:05,600
And it will go. It's only production will be to, generate the old start symbol. And
它会消失的。它唯一的制作将是，生成旧的开始符号。和

63
00:06:05,600 --> 00:06:11,669
now let's begin working out what's in the, parsing automaton, for this particular
现在，让我们开始计算解析自动机中的内容，针对这个特定的

64
00:06:11,669 --> 00:06:15,270
grammar. And, and just like before, we're not going to go through the effort of
语法。而且，就像以前一样，我们不会像以前那样

65
00:06:15,270 --> 00:06:19,229
constructing, the NFA. That would be a systematic way to do it. One way to it is,
建设，NFA。这将是一种系统的方式来做这件事。一种方法是，

66
00:06:19,229 --> 00:06:23,080
is the way we sketched. Was just to construct the NFA first, and then do the
是我们素描的方式。就是先建造NFA，然后再做

67
00:06:23,080 --> 00:06:27,210
subset of states construction. But, this grammar is small enough. And simple enough
状态子集构造。但是，这个语法已经足够小了。而且足够简单

68
00:06:27,210 --> 00:06:32,759
that we can work out directly what is in, what are in the states, what items are in
我们可以直接计算出什么在里面，什么在美国，什么东西在里面

69
00:06:32,759 --> 00:06:38,319
the states of DFA. So just like before because the dart here is immediately next
DFA的状态。所以就像以前一样，因为这里的省道就是下一个

70
00:06:38,319 --> 00:06:42,580
to the S, we know that we can without consuming any input at all make an epsilon
对于S，我们知道我们可以在不消耗任何输入的情况下制作ε

71
00:06:42,580 --> 00:06:48,319
transition in the interface to the items that start the productions for S. So these
在界面中转换到开始S的生产的项目。所以这些

72
00:06:48,319 --> 00:06:55,319
will be in the, also in the DFA state. And that's it. We can't add any other,
将处于，也处于DFA状态。就这样了。我们不能再加其他的了，

73
00:06:55,710 --> 00:07:00,289
productions here. So S is the only non terminal. And we've added all the, first
在这里制作。所以S是唯一的非终结点。我们已经添加了所有的，首先

74
00:07:00,289 --> 00:07:07,289
items, initial items for S. And so that is the complete state. Okay? So just like
项目，S的初始项目，这就是完整状态。好吧?所以就像

75
00:07:07,580 --> 00:07:14,009
before, one possibility is that we'll see a B on the stack. And so that would give
在此之前，一种可能性是我们会在堆栈上看到B。所以这会给你带来

76
00:07:14,009 --> 00:07:19,780
us the item S goes to B dot. And that's the only item valid for that state.
我们把物品S送到B点。这是该州唯一有效的项目。

77
00:07:19,780 --> 00:07:25,080
Another possibility is that we'll see an S on the stack. Okay? In which case, we'll
另一种可能性是，我们将在堆栈上看到S。好吧?那样的话，我们就

78
00:07:25,080 --> 00:07:32,080
make a transition to the state, S prime goes to S dot. And S goes to S dot AS,
转换到状态，S‘转到S点。S转到S点，

79
00:07:33,889 --> 00:07:40,380
alright? So we saw that same state before, in the, in the other automaton. Now we
好吗？所以我们之前在，在另一个自动机中看到了同样的状态。现在我们

80
00:07:40,380 --> 00:07:46,110
could also see an A. Now what state would that take us to? And this is going to be a
也可以看到一个A。现在，这会把我们带到什么州呢？这将是一个

81
00:07:46,110 --> 00:07:52,139
little different. In this state, we could have the item, or will have the item, SA
有点不同。在此状态下，我们可以拥有项目，也可以拥有项目SA

82
00:07:52,139 --> 00:07:57,020
dot S, and I notice that the dot is right next to S, so instead of seeing an S on
点S，我注意到点就在S旁边，所以不是看到S

83
00:07:57,020 --> 00:08:00,819
the set, we could also see something derived from S in the next position on
集合，我们还可以看到从S派生的东西在下一个位置上

84
00:08:00,819 --> 00:08:05,000
this stack. And so we have to throw in all the productions for S. There's only two of
这一堆。所以我们必须把S的所有作品都放进去，只有两部

85
00:08:05,000 --> 00:08:11,199
them. But that means we could have the item S goes to dot SAS, and S goes to dot
他们。但这意味着我们可以让项目S转到点SAS，S转到点

86
00:08:11,199 --> 00:08:16,190
P. Alright, and then out of this state, now there are a couple of different
好的，然后离开这个州，现在有几个不同的

87
00:08:16,190 --> 00:08:20,919
possible transitions, we could see an S or we could see a B. Well, if we see a B,
可能的转变，我们可以看到S，也可以看到B。如果我们看到B，

88
00:08:20,919 --> 00:08:27,430
then we wind up in this state over here. And if we see an S, Well, what's going to
然后我们就到了这里的这个州。如果我们看到一个S，那么，

89
00:08:27,430 --> 00:08:34,430
happen? If we see an S, then we'll wind up in another new state. Where we have, S
发生了什么？如果我们看到S，那么我们将进入另一个新的州。在我们有的地方，S

90
00:08:40,659 --> 00:08:47,659
goes to SAS dot. We've seen the complete right hand side of that production. Or S
转到SAS点。我们已经看到了那部作品的完整右手边。或S

91
00:08:48,810 --> 00:08:55,810
goes to SA.S. Actually, that dot's in the wrong place, so let's erase that, and
去了SA.S。实际上，那个点放错了位置，所以我们把它擦掉，然后

92
00:08:58,459 --> 00:09:02,910
let's put it in the right place. It's right here. Before the A, not after the A.
让我们把它放在正确的位置。就在这里。在A之前，不是在A之后。

93
00:09:02,910 --> 00:09:09,890
Alright and now we have to think about what happens in this state. So in this
好的，现在我们必须考虑在这个状态下会发生什么。所以在这件事上

94
00:09:09,890 --> 00:09:14,120
state the only possible input is an A and if it isn't A, what's we going to have,
唯一可能的输入是A，如果不是A，我们会得到什么，

95
00:09:14,120 --> 00:09:18,450
we're going to have S goes to SA.S and then we're gonna have to add the initial
我们将S转换为Sa，然后我们必须添加首字母

96
00:09:18,450 --> 00:09:24,300
productions for S again. And so that would just take us back to this state and like
再次为S制作。所以这会把我们带回这个状态，就像

97
00:09:24,300 --> 00:09:28,720
other transition labels too we go to this state on an S and we come back to that
其他过渡标签也是如此，我们在S上转到这个状态，然后回到那个状态

98
00:09:28,720 --> 00:09:35,470
state, the bottom state here for the top state on an A. And I think if we hadn't
州，这是A的最高州的最低州，我认为如果我们没有

99
00:09:35,470 --> 00:09:40,630
made any mistakes that, that is the complete transition system and all the
犯了任何错误，那就是完整的过渡系统和所有

100
00:09:40,630 --> 00:09:47,149
states for this DFA. Now the question is, is this , is this parsing automaton is it,
此DFA的国家/地区。现在的问题是，这是不是，这个解析自动机是不是，

101
00:09:47,149 --> 00:09:52,190
this is, is this the parsing automaton of a, a solar one grammar. And in order to
这是，这是一个一个，一个太阳音文法的句法自动机。并且为了

102
00:09:52,190 --> 00:09:56,779
answer that question we have to look for possible reduce, reduce, and shift reduce
回答这个问题，我们必须寻找可能的Reduce、Reduce和Shift Reduce

103
00:09:56,779 --> 00:10:00,800
conflict. Well a quick scan of all the states here will show you or convince you
冲突。嗯，快速浏览一下这里的所有州，就会向你展示或说服你

104
00:10:00,800 --> 00:10:05,720
that there are not. Any states, where there are two possible reduce-moves. So
那就是没有。任何州，其中有两个可能的缩减移动。所以

105
00:10:05,720 --> 00:10:11,750
there can't be any reduce reuse conflicts in this, in this automaton. We can ignore
在这个自动机中，不可能有任何减少重用的冲突。我们可以忽略

106
00:10:11,750 --> 00:10:16,880
states that only have a single item or states that have no possible reduce-moves
只有一个项目的状态或没有可能减少移动的状态

107
00:10:16,880 --> 00:10:23,160
at all. Because, those are states in which there cannot be a shift-reduce conflict
完全没有。因为，在这些状态下，不可能存在转移-减少冲突

108
00:10:23,160 --> 00:10:26,940
and that means we can ignore these two states. The two states over here at the
这意味着我们可以忽略这两种状态。在这里的两个州

109
00:10:26,940 --> 00:10:32,130
extreme left. So now we're left with these three states to think about. Alright, so
最左边。所以现在我们只剩下这三个州要考虑了。好的，那么

110
00:10:32,130 --> 00:10:38,760
we look at this state last time. As before, the follow of S prime Is just
上一次我们看到了这种状态。和以前一样，S素数的后面只是

111
00:10:38,760 --> 00:10:45,760
equal to the dollar sign. And so there's no shift reduce conflict in this state
等于美元符号。所以在这个州没有转移减少冲突

112
00:10:46,550 --> 00:10:53,310
Because on, on input A we can only shift. We can't reduce by S prime goes to S. All
因为在输入A上，我们只能移位。我们不能减去S，素数都是S

113
00:10:53,310 --> 00:10:59,730
right, and now we're down looking at these two states. And let's just consider this
好的，现在我们向下看这两个州。让我们考虑一下这一点

114
00:10:59,730 --> 00:11:04,920
bottom state first. Alright, so what does this state say to do? Well, this state
最低态优先。好的，那么这个州说该怎么做？那么这个州呢，

115
00:11:04,920 --> 00:11:11,920
says, that well first of all, observe. That, the only transitions out of this
说，那好，首先，观察一下。那就是，唯一走出这一步的过渡

116
00:11:11,920 --> 00:11:16,200
state are on B and S and there are no reduced moves in this state at all, so
状态在B和S上，并且在此状态下根本没有减少的移动，因此

117
00:11:16,200 --> 00:11:19,970
there's no possibility of a shift reduce conflict in this state either. That leaves
在这个州，减少冲突也是不可能的。那就剩下

118
00:11:19,970 --> 00:11:25,100
us with just this state to think about. Now this state does have a reduced move,
我们只需要考虑这个州。现在这个州的动作确实减少了，

119
00:11:25,100 --> 00:11:30,899
the first item here is a, is a reduction, and that says that we should reduce by S
这里的第一项是a，是减去，也就是说我们应该减去S

120
00:11:30,899 --> 00:11:35,990
goes to S A S if whatever comes next is in the follow of S, so we're gonna need to
如果接下来的任何事情都在S之后，那么我们就需要去S-S，所以我们需要

121
00:11:35,990 --> 00:11:42,990
know what's in the follow of S. Well from S prime goes to S, we know that anything
知道S后面的是什么，从S到S，我们知道

122
00:11:43,760 --> 00:11:47,490
that's in the follow of S prime is in the follow of S. So clearly dollar is in the
这是在S质数之后，S是在S之后，所以很明显美元在

123
00:11:47,490 --> 00:11:53,470
follow of S. And then from this part of the grammar here, we can see that A is in
跟在S后面，然后从语法的这一部分我们可以看出A在

124
00:11:53,470 --> 00:12:00,010
the follow of S. And then from this occurrence here of S, we know that since
跟在S后面，然后从这里发生的S，我们知道因为

125
00:12:00,010 --> 00:12:04,110
it occurs at the, the far right side of the production, that an ything in the
它发生在制作的最右边，那就是

126
00:12:04,110 --> 00:12:07,300
follow of the right hand side, the left hand side non terminal, is also gonna be
紧随右手边，左手边非终点站，也将是

127
00:12:07,300 --> 00:12:10,600
in follow of S. Well, in this case they're the same. It just says that the follow of
在S后面，在这种情况下，它们是一样的。它只是说下面的

128
00:12:10,600 --> 00:12:15,040
S is a subset of the follow of S which is trivially always true, and so it doesn't
S是S的Follow的子集，S的Follow几乎总是正确的，所以它不是

129
00:12:15,040 --> 00:12:18,959
add anything new. And so we wind up with just the follow of S being just two
添加任何新内容。所以我们最后得到的结果是S的后面只有两个

130
00:12:18,959 --> 00:12:23,910
things, dollar sign and A. But that poses a problem, because this says that if we
美元符号和A，但这带来了一个问题，因为这说的是，如果我们

131
00:12:23,910 --> 00:12:29,940
see an A in the input we should reduce. And this move here says that if we see an
在我们应该减少的输入中看到一个A。这一举动表明，如果我们看到一个

132
00:12:29,940 --> 00:12:35,600
A in the input, we should shift. And so, this state does have a shift-reduce
A在输入时，我们应该换挡。因此，这种状态确实有一个移位-减去(Shift-Reduce)

133
00:12:35,600 --> 00:12:42,600
conflict. Alright, and so this grammar is not SLR what.
冲突。好的，所以这个语法不是SLR什么。

