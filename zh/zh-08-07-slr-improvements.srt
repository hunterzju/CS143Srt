0
00:00:04,080 --> 00:00:07,310
In this video, we're going to wrap up our discussion of SLR parsing, we're going to
在这段视频中，我们将结束对单反解析的讨论，我们将

1
00:00:07,310 --> 00:00:11,059
give the full SLR parsing algorithm, and also talk about some important
给出了完整的SLR解析算法，并讨论了一些重要的问题

2
00:00:11,059 --> 00:00:18,059
improvements. The SLR parsing algorithm we discussed in the last video has one major
改进。我们在上一段视频中讨论的SLR解析算法有一个主要特点

3
00:00:20,020 --> 00:00:24,470
inefficiency. And that is that most of the work that the automation does when it,
效率低下。这就是自动化所做的大部分工作，当它，

4
00:00:24,470 --> 00:00:28,439
when it reads the stack is actually redundant. And to see this, think about
当它读取时，堆栈实际上是冗余的。要看到这一点，请想一想

5
00:00:28,439 --> 00:00:34,100
the stack. So we have our stack, and this is the bottom over here. And this is the
堆栈。所以我们有我们的堆栈，这是这里的底部。这就是

6
00:00:34,100 --> 00:00:38,650
top of the stack over here. And, what is going on in each step? In each step we
堆栈的顶部在这里。那么，每一步都在做些什么呢？在每一步我们

7
00:00:38,650 --> 00:00:43,260
might, shift something onto the stacks, we might add one symbol, or we might pop some
可能会将一些东西移到堆栈上，我们可能会添加一个符号，或者我们可能会弹出一些符号

8
00:00:43,260 --> 00:00:47,979
symbols, and, and push one symbol onto the stack. But basically there's going to be
符号，和，并将一个符号压入堆栈。但基本上会有

9
00:00:47,979 --> 00:00:51,909
some small number of symbols that change at the top of the stack at each step. But
在每个步骤中在堆栈顶部更改的一些少量符号。但

10
00:00:51,909 --> 00:00:56,180
most of the stack stays the same. And then we rerun the automaton on the entire
堆栈的大部分保持不变。然后我们重新运行整个自动机

11
00:00:56,180 --> 00:01:01,140
stack. And so, this work is all repeated. Everything that stayed the same From the
堆栈。因此，这些工作都是重复的。所有保持不变的东西都是从

12
00:01:01,140 --> 00:01:05,760
previous stack is repeated work, and then we do a little bit of new work, just at
前面的堆栈是重复的工作，然后我们做一些新的工作，就在

13
00:01:05,760 --> 00:01:09,850
the very top of the stack. And clearly, if we could avoid this, we could make the
堆栈的最顶端。很明显，如果我们能避免这种情况，我们就可以

14
00:01:09,850 --> 00:01:15,280
algorithm run much, much more quickly. The way to exploit the observation that most
算法的运行速度要快得多。利用观察到的最重要的

15
00:01:15,280 --> 00:01:19,560
of the work of the automaton is repeated at each step, is to simply remember the
自动机的工作在每一步都是重复的，就是简单地记住

16
00:01:19,560 --> 00:01:23,640
state of the automaton on each stack prefix. So we're going to change the
每个堆栈前缀上的自动机的状态。所以我们要改变

17
00:01:23,640 --> 00:01:26,560
representation of the stack, we're going to change what goes in the stack, so
表示，我们将更改堆栈中的内容，因此

18
00:01:26,560 --> 00:01:30,570
before we just had symbols on the stack, but now we're going to have pairs. Each
以前我们只有堆栈上的符号，但现在我们将有对。每个人

19
00:01:30,570 --> 00:01:37,020
element of the stack will be a pair of a symbol, and a DFA state. Thus the stack
堆栈的元素将是一对符号和DFA状态。因此，堆栈

20
00:01:37,020 --> 00:01:40,780
now is going to be a stack of pairs and whereas before a stack would have
现在将是一堆对，而在堆栈之前

21
00:01:40,780 --> 00:01:46,330
consisted just of the symbols, sym1 up to sym n, now we're going to have the same
仅由符号组成，sym1到sym，现在我们将有相同的

22
00:01:46,330 --> 00:01:51,990
symbols but each one of them is going to be paired with a DFA state and that DFA
符号，但每个符号都将与DFA状态和该DFA配对

23
00:01:51,990 --> 00:01:56,979
state is going to be the result of running the DFA and all the symbols to its left,
状态将是运行DFA及其左侧的所有符号的结果，

24
00:01:56,979 --> 00:02:01,400
So all the symbols below it in the stack. So if I think about my stack and if I draw
所以堆栈中它下面的所有符号。所以如果我考虑我的堆栈，如果我画

25
00:02:01,400 --> 00:02:06,659
a little picture of the stack as a line then the DFA state here. Let's call this
堆栈的一小张图片是一条线，然后是DFA状态。让我们把这个叫做

26
00:02:06,659 --> 00:02:13,100
state I, will be the result of running the DFA on the entire, stack contents to the
状态i将是在整个堆栈内容上运行DFA到

27
00:02:13,100 --> 00:02:16,080
left of that point. And again, if I look at some other point in the stack, at the
在那个点的左边。再一次，如果我看一下堆栈中的其他点，在

28
00:02:16,080 --> 00:02:20,520
state, stack state that's stored there. That would be running, the results of
状态，存储在那里的堆栈状态。那就是运行，结果是

29
00:02:20,520 --> 00:02:26,760
running the DFA on the entire stack context, contents, up to that point. And
在此之前，在整个堆栈上下文、内容上运行DFA。和

30
00:02:26,760 --> 00:02:30,250
one small detail here is that the bottom of the stack, we have to get started. We
这里的一个小细节是堆栈的底部，我们必须开始。我们

31
00:02:30,250 --> 00:02:33,569
need to have the start state stored at the bottom of the stack. And we just store
需要将开始状态存储在堆栈的底部。我们只是储存

32
00:02:33,569 --> 00:02:40,550
that with any dummy symbol. It doesn't matter what symbol we pick. So now we're
任何虚拟符号。我们选什么符号并不重要。所以现在我们是

33
00:02:40,550 --> 00:02:45,319
ready to actually give the details of the parsing algorithm. And the first step is
准备好实际给出解析算法的细节。第一步是

34
00:02:45,319 --> 00:02:51,319
to define a table go to. And this maps a state and a symbol to another state. And
要定义表格，请转到。这将一个状态和一个符号映射到另一个状态。和

35
00:02:51,319 --> 00:02:55,200
this is just the transition function of the DFA. This is the graph of the DFA
这只是DFA的过渡函数。这是DFA的图表

36
00:02:55,200 --> 00:03:02,200
written out as an array. Our SLR parsing algorithm will have four possible moves. A
以数组形式写出。我们的SLR解析算法将有四个可能的步骤。一个

37
00:03:03,890 --> 00:03:09,700
shift X move will push a pair on the stack. X is a DFA state, so that's named
Shift X移动将在堆栈上推送对。X是DFA状态，所以它被命名为

38
00:03:09,700 --> 00:03:15,790
in the shift move now. And then the other element of the pair is the current input.
现在就在换班行动中。然后，该对中的另一个元素是电流输入。

39
00:03:15,790 --> 00:03:20,140
And then we'll also have reduce moves, which are just as before. So, to recall, a
然后我们还会有减少动作，就像以前一样。所以，回想一下，一个

40
00:03:20,140 --> 00:03:24,069
reduce move will pop, the, a number of elements from the stack equal to the
Reduce Move将从堆栈中弹出等于

41
00:03:24,069 --> 00:03:27,810
length of the right hand side. And then it will push the left hand side onto the
右手边的长度。然后它会把左手边推到

42
00:03:27,810 --> 00:03:32,970
stack. And then finally, accept an error moves for when we've successfully parsed
堆栈。最后，当我们成功解析时，接受错误移动

43
00:03:32,970 --> 00:03:38,760
the input, and for when the parser gets stuck. The second parsing table is the
输入，以及解析器被卡住时使用。第二个解析表是

44
00:03:38,760 --> 00:03:43,800
action table which tells us which kind of move to make in every possible state. The
动作表，它告诉我们在每种可能的状态下应该做哪种动作。这个

45
00:03:43,800 --> 00:03:49,940
action table's indexed by a state of the automaton and the next input symbol. And
动作表由自动机的状态和下一个输入符号索引。和

46
00:03:49,940 --> 00:03:56,120
then the possible moves are things like shift, reduce, accept, or error. So let's
然后可能的动作是移位、减少、接受或错误。所以让我们

47
00:03:56,120 --> 00:04:00,720
consider if we do shifts, if the final state of the automaton at the top of the
考虑一下，如果我们做移位，如果自动机在顶部的最终状态

48
00:04:00,720 --> 00:04:07,379
stack has an item that says it would be okay to shift an A. And go to that is from
Stack有一个项，它说可以将A移位，然后转到它是从

49
00:04:07,379 --> 00:04:14,379
this state we can go to state J on input A. Then the move in state I on input A
这个状态我们可以在输入A上转到状态J，然后在输入A上的状态I中的移动

50
00:04:16,099 --> 00:04:20,829
will be to shift AJ onto the stack And th ink about what that means for a second.
就是将AJ移到堆栈上，然后思考一下这意味着什么。

51
00:04:20,829 --> 00:04:26,789
What that says is that we have a stack. And then the next input is A. And then at
这就是说我们有一个堆栈。然后下一个输入是A，然后在

52
00:04:26,789 --> 00:04:31,569
this point, it's okay to shift an A onto the stack. And furthermore, that the state
在这一点上，将A移到堆栈上是可以的。此外，州政府

53
00:04:31,569 --> 00:04:36,749
of the automaton at this point is SI. Okay. So the state of Irarta [inaudible]
在这一点上，自动机的大小是SI。好吧。所以伊拉尔塔的状态[听不见]

54
00:04:36,749 --> 00:04:41,419
the top of the stack is SI. The next input is A. Remember that the go to table is a
堆栈的顶部是SI。下一个输入是a。请记住，转到表是一个

55
00:04:41,419 --> 00:04:47,199
transition function of the machine. So if we move the vertical bar over, if we shift
机器的过渡功能。所以如果我们把竖条移过去，如果我们移动

56
00:04:47,199 --> 00:04:51,249
that A on to the stack, well, now, we don't just put A on the stack, we have to
把A放到堆栈上，现在，我们不只是把A放到堆栈上，我们必须

57
00:04:51,249 --> 00:04:55,439
put a pair on the stack. And the question is what machine state should go there.
把一对放到堆栈上。问题是机器的状态应该是什么。

58
00:04:55,439 --> 00:05:00,389
Well, it's going to be state that we would reach from state I from state SI on input
好，这将是状态，我们将从状态I在输入上从状态SI到达

59
00:05:00,389 --> 00:05:05,839
A, which. The go to table tells us, in this case, is state SJ. And for that
A，哪一个。转到表告诉我们，在这种情况下，是状态Sj。为此，

60
00:05:05,839 --> 00:05:11,150
reason, the action, when we terminate in state I, and the next input is A, is to
原因是，当我们在状态I终止，并且下一个输入是A时，动作是

61
00:05:11,150 --> 00:05:18,150
shift the pair A, J, onto the stack. The other three moves that go into the action
将A，J对移到堆栈上。进入行动的另外三个动作

62
00:05:18,909 --> 00:05:23,050
table are things we've already seen. So if the final state of the automaton at the
桌子是我们已经看过的东西。所以如果自动机的最终状态在

63
00:05:23,050 --> 00:05:27,229
top of the stack has an item that says that we can reduce, and the follow up
堆栈的顶部有一个项目，上面说我们可以减少，后续的

64
00:05:27,229 --> 00:05:32,300
condition requirement is satisfied. Mainly, that the, next input can follow,
满足条件要求。主要是，下一个输入可以跟在后面，

65
00:05:32,300 --> 00:05:38,919
the left hand side non terminal of the production. Then in the entry I, for,
产品的左侧非终端。那么在条目I，for，

66
00:05:38,919 --> 00:05:43,099
[inaudible] if we're in state SI and we have input a, we can reduce by the
[听不见]如果我们处于状态SI并且我们有输入a，我们可以减去

67
00:05:43,099 --> 00:05:47,800
production x goes to alpha. And there's one exception here, we're not going to do
x的乘积是α。这里有一个例外，我们不会

68
00:05:47,800 --> 00:05:52,879
that reduction, if the left-hand side is the special start symbol, the new start
如果左侧是特殊的开始符号，则新的开始

69
00:05:52,879 --> 00:05:58,289
symbol that we add to the grammar, is prime. Because, in that case, if the item
我们添加到语法中的符号是质数。因为，在这种情况下，如果物品

70
00:05:58,289 --> 00:06:02,800
that we're going to reduce by is s-prime goes to s-dot, and we're at the end of the
我们要减去的是s-质数是s-点，我们在

71
00:06:02,800 --> 00:06:09,449
input, then we want to accept. And any other Situation is an error. So in any
输入，那么我们就想接受。任何其他情况都是错误的。所以在任何情况下

72
00:06:09,449 --> 00:06:14,639
other situation, if we're in state I and we have the next the next input is A,
其他情况，如果我们在状态I，我们有下一个，下一个输入是A，

73
00:06:14,639 --> 00:06:18,869
well, we don't know whether to shift, reduce, or accept. And so, that is an
嗯，我们不知道是转移、减少还是接受。所以，这是一个

74
00:06:18,869 --> 00:06:25,399
error state. Finally, here is the full SLR parsing algorithm. And I'm just going to
错误状态。最后，这里是完整的SLR解析算法。我只是要去

75
00:06:25,399 --> 00:06:28,460
walk you through it, so that we can see how all of the ideas we've been di
向你介绍一下，这样我们就能看到我们所有的想法是如何

76
00:06:28,460 --> 00:06:32,979
scussing, and all the various pieces fit together. Let's let our initial input be
冲刺，所有不同的部件都拼凑在一起。让我们将初始输入设为

77
00:06:32,979 --> 00:06:36,779
called I. And we'll just give it a name, and it's gonna be treated as an array that
称为I。，我们只给它一个名称，它将被当作一个数组来处理，该数组

78
00:06:36,779 --> 00:06:41,669
we can index. The index will be called J, and initially, it's zero so that we're
我们可以编索引。索引将被命名为J，最初，它是零，所以我们是

79
00:06:41,669 --> 00:06:46,819
pointing to the first token in the input string. We'll just assume that the first
指向输入字符串中的第一个标记。我们就假设第一个

80
00:06:46,819 --> 00:06:51,009
state of the DFA is called state one. And, that means our initial stack is going to
DFA的状态称为状态一。这意味着我们的初始堆栈将

81
00:06:51,009 --> 00:06:56,029
have state one for the state of the automaton and some other dummy symbol that
具有表示自动机状态的状态1和一些其他虚拟符号，该符号

82
00:06:56,029 --> 00:07:00,649
we don't care about In the, in the first position. So, the stack is just a pair
我们不关心在，在第一个位置。所以，堆栈只是一对

83
00:07:00,649 --> 00:07:04,529
with [inaudible] in the start state of the DFA. And now, were going to repeat the
在DFA的开始状态下[听不到]。现在，我们要重复

84
00:07:04,529 --> 00:07:09,599
following loop until we've either successfully pars the input or we detect
跟随循环，直到我们成功解析输入或检测到

85
00:07:09,599 --> 00:07:14,149
an error. And at its steps, what we're going to do? Well, we're going to look at
一个错误。在它的台阶上，我们要做什么呢？好的，我们接下来要看的是

86
00:07:14,149 --> 00:07:19,569
the next input symbol and we're going to look at the final state of the automaton
下一个输入符号，我们将查看自动机的最终状态

87
00:07:19,569 --> 00:07:23,679
on the stack contents and that's always the state of the pair that's on the top of
在堆栈内容上，而这始终是位于堆栈内容顶部的对的状态

88
00:07:23,679 --> 00:07:27,119
the stack and we're gonna look those two things up in the action table and that's
堆栈，我们要在动作表中查找这两件事，那就是

89
00:07:27,119 --> 00:07:30,909
gonna tell us what kind of move to make. So, let's just go through the moves in
会告诉我们该采取什么样的行动。所以，让我们先来看一下

90
00:07:30,909 --> 00:07:36,969
order. Let's consider the shift move first. So, what happens? If were, if it
请遵守秩序。让我们先考虑一下换班动作。那么，会发生什么呢？如果是的话，如果是这样的话

91
00:07:36,969 --> 00:07:42,119
says we're supposed to shift and going to state K, then what we're going to do is
说我们应该转移到K州，然后我们要做的是

92
00:07:42,119 --> 00:07:45,490
we're going to shift the input, that means we're going to take the next input symbol
我们将移位输入，这意味着我们将采用下一个输入符号

93
00:07:45,490 --> 00:07:49,740
and, or the current input symbol, excuse me, and we're going to push that on to the
或者当前的输入符号，打扰一下，我们要把它推到

94
00:07:49,740 --> 00:07:53,879
stack together with state K of the [inaudible]. That pair goes on to the
与[听不见]的状态K堆叠在一起。那两个人继续前往

95
00:07:53,879 --> 00:07:58,709
stack, and we also bumb the input pointer so that we're looking at the next
堆栈，并且我们还增加了输入指针，因此我们将查看下一个

96
00:07:58,709 --> 00:08:03,689
character of input. Now. Let me erase that so you can continue to read it. Now what
输入的字符。现在。让我把它擦掉，这样你就可以继续读了。现在怎么办？

97
00:08:03,689 --> 00:08:09,619
about the reduce moves? So this one's a little bit interesting. First thing we're
关于减少行动的事吗？所以这个有点有趣。我们首先要做的是

98
00:08:09,619 --> 00:08:14,580
going to do is we're going to pop a number of pairs off the, off the stack that's
接下来要做的是，我们将从堆栈中弹出一些配对，也就是

99
00:08:14,580 --> 00:08:18,699
equal to the length of the right-hand side. So we pop a number of items off the
等于右手边的长度。所以我们从

100
00:08:18,699 --> 00:08:21,569
stack that's going to the right that's equal to the right-hand side of the
向右的堆栈，该堆栈等于

101
00:08:21,569 --> 00:08:25,580
production, and then what do w e push on to the stack? Well we're gonna push the
生产，然后我们向堆栈推送什么？好的，我们要把

102
00:08:25,580 --> 00:08:29,949
non-terminal on the left-hand side of the stack. And now the question is: what state
堆栈左侧的非终端。现在的问题是：什么样的州

103
00:08:29,949 --> 00:08:36,410
goes on to the stack? What DFA state? Well. With that we've popped the stack. We
会进入堆栈吗？什么DFA状态？井。这样，我们就可以弹出堆栈了。我们

104
00:08:36,409 --> 00:08:41,440
can look at the new top state of the stack. So the DFA state was now the top
可以查看堆栈的新顶部状态。因此，DFA状态现在是最重要的

105
00:08:41,440 --> 00:08:45,380
state. After we've done the pops we'll tell us what the final state of the DFA
州政府。在我们完成POP之后，我们将告诉我们DFA的最终状态是什么

106
00:08:45,380 --> 00:08:49,430
was and what is left of the stack. And then now that we're pushing X under the
堆栈的过去和剩余部分。现在我们把X推到

107
00:08:49,430 --> 00:08:55,170
stack we want to know what state the DFA would go into on the transition labeled X.
堆栈，我们想知道DFA在标记为X的转换上会进入什么状态。

108
00:08:55,170 --> 00:08:59,750
And so we use the Go To table to look that up, The current top state of the stack. On
因此，我们使用转到表来查找堆栈的当前顶部状态。在……上面

109
00:08:59,750 --> 00:09:05,050
symbol X, where does the FA go? That is the state that gets pushed onto the stack.
符号X，英足总的去向是什么？这是推送到堆栈上的状态。

110
00:09:05,050 --> 00:09:09,500
And then finally, if, if the move is accept, we halt normally. And if the move
最后，如果移动被接受，我们就会正常停止。如果搬家

111
00:09:09,500 --> 00:09:16,500
is error, we halt and report an error, or execute our error recovery procedure. One
如果出现错误，我们会暂停并报告错误，或者执行错误恢复过程。一

112
00:09:16,860 --> 00:09:21,090
interesting fact about this algorithm is that it only uses the DFA state and the
关于此算法的有趣事实是，它只使用DFA状态和

113
00:09:21,090 --> 00:09:26,370
input. The stack symbols are not used in really interesting way. And so, we could
输入。堆栈符号并没有以真正有趣的方式使用。所以，我们可以

114
00:09:26,370 --> 00:09:31,110
actually get rid of the stack symbols and just do parsings with the DFA states on
实际上去掉了堆栈符号，只需在打开DFA状态的情况下进行解析

115
00:09:31,110 --> 00:09:35,090
the stack. But, that of course would be throwing away the program and we still
堆栈。但是，这当然会抛弃这个项目，而我们仍然

116
00:09:35,090 --> 00:09:38,780
actually need to program for the later stages of the compiler. And so to do the
实际上需要为编译器的后期阶段进行编程。因此，要做到这一点，

117
00:09:38,780 --> 00:09:45,520
type checking and co-generation, we need to keep the symbols around. Now simple LR
类型检查和联合生成，我们需要保留符号。现在简单的LR

118
00:09:45,520 --> 00:09:49,680
parsing is called simple for a reason. And in fact, in practice, it's a bit too
将解析称为简单是有原因的。事实上，在实践中，它也有一点

119
00:09:49,680 --> 00:09:54,310
simple. The widely used bottom-up parsing algorithms are based on a more powerful
很简单。广泛使用的自底向上解析算法是基于功能更强大的

120
00:09:54,310 --> 00:09:59,840
class of grammars called the LR grammars. And the basic difference between the LR
一类称为LR文法的文法。以及LR和LR之间的基本区别

121
00:09:59,840 --> 00:10:04,740
grammars and the SLR grammars is that look ahead is built into the items. So what
语法和单反语法是，向前看是内置在项目中的。那又怎样

122
00:10:04,740 --> 00:10:11,740
does that mean? Well, a LR1 item is going to be a pair which consists of an item,
那是不是意味着？嗯，一个LR1项目将是由一个项目组成的一对，

123
00:10:12,930 --> 00:10:17,680
Just like we saw before. And this means exactly the same thing as before. And a
就像我们之前看到的一样。这和以前的意思完全一样。和一个

124
00:10:17,680 --> 00:10:23,110
look-ahead, In case of an LR1 item there's just one token of look-ahead. If this was
前瞻，在LR1物品的情况下，只有一个前瞻的标志。如果这是

125
00:10:23,110 --> 00:10:26,970
an LR2 item there could be two tokens of look-ahead in there. And the meaning of
一个LR2物品，里面可能有两个前瞻的记号。以及它的意义

126
00:10:26,970 --> 00:10:32,920
this pair is that, if we ever get aroun d to state where we have seen all of this
这两个是，如果我们有机会说出我们在哪里看到了这一切

127
00:10:32,920 --> 00:10:36,340
production, all the right-hand side of this production. Then it's going to be
生产，这部产品的右手边。那就会是

128
00:10:36,340 --> 00:10:41,030
okay to reduce, if the look-ahead at that point is Dollar that's the end of the
可以减持，如果在这一点上向前看是美元，那么就结束了

129
00:10:41,030 --> 00:10:45,500
input. And of course, there could be any other token in there any other terminal
输入。当然，那里可能有任何其他令牌，任何其他终端

130
00:10:45,500 --> 00:10:49,790
symbol in there besides dollar. And this turns out to be more accurate than just
除了美元，还有符号。事实证明，这比仅仅

131
00:10:49,790 --> 00:10:54,650
using follow sense recall that the point where a reduction decision is made in SLR
使用Follow Sense回想在SLR中做出减少决定的点

132
00:10:54,650 --> 00:10:59,940
parsing, we just look at the entire follow set for the symbol on the left hand side
解析时，我们只需查看左侧符号的整个跟随集

133
00:10:59,940 --> 00:11:04,980
of the production. And this mechanism of encoding the look-ahead in to the items
这部作品的主人公。这种对项目的超前处理进行编码的机制

134
00:11:04,980 --> 00:11:10,110
allow us to track and find the [inaudible] which look-aheads are actually possible in
允许我们追踪并找到[听不见的]那些看起来实际上是可能的

135
00:11:10,110 --> 00:11:17,080
particular production sequences. And if you look at the automaton for your parser,
特定的生产序列。如果你看一下解析器的自动机，

136
00:11:17,080 --> 00:11:23,360
actually it's not an LR1 automaton. It's an LALR1 automaton, which is something
实际上它不是LR1自动机。这是一个LALR1自动机，这是一种

137
00:11:23,360 --> 00:11:30,070
very close, to an LR automaton, it's a little bit of an optimization over an LR,
非常接近LR自动机，与LR相比有点优化，

138
00:11:30,070 --> 00:11:34,030
a pure LR automaton, but anyway, it uses exactly the same kinds of items with this
一个纯LR自动机，但不管怎样，它使用的项目种类与这个完全相同

139
00:11:34,030 --> 00:11:40,520
pair of a of a standard LR0 item in a look ahead. If you look at that automaton, you
前瞻中的一对标准LR0物品。如果你看看那个机器人，你会发现

140
00:11:40,520 --> 00:11:46,350
will see items that look like this, and that will help you in reading the
将看到如下所示的项目，这将帮助您阅读

141
00:11:46,350 --> 00:11:47,570
automaton and figuring out what it is doing.
并弄清楚它在做什么。

