0
00:00:03,850 --> 00:00:07,180
In this video, we're going to introduce another important concept in bottom-up
在这段视频中，我们将介绍自下而上的另一个重要概念

1
00:00:07,180 --> 00:00:14,180
parsing, the notion of a handle. To review, bottom up parsing is these two
解析，句柄的概念。回顾一下，自下而上的解析是这两个

2
00:00:14,580 --> 00:00:19,590
kinds of actions: we have shift moves, which just read one token of input and
动作种类：我们有Shift Moves，它只读取一个输入标记，

3
00:00:19,590 --> 00:00:24,039
move the vertical bar one to the right, And reduced moves, which replace the right
将竖条向右移动一个，并减少移动，以替换右侧

4
00:00:24,039 --> 00:00:28,369
hand side of a production [inaudible] to the left of the vertical bar by a
产品的手边[听不见]在竖条的左边

5
00:00:28,369 --> 00:00:32,750
production left hand side. So in this case, the production must have been A goes
制作左手边。所以在这种情况下，生产一定是A级的

6
00:00:32,750 --> 00:00:39,750
to XY. And also reviewing what we did in the last video, the left string can be
致XY。再回顾一下我们在上一个视频中所做的，左边的字符串可以是

7
00:00:39,819 --> 00:00:44,719
implemented by a stack, where the top of the stack is marked by the vertical bar.
由堆栈实现，其中堆栈的顶部由竖线标记。

8
00:00:44,719 --> 00:00:49,749
So shift pushes the terminal on to the stack and reduce pops zero or more symbols
因此，Shift会将终端推到堆栈上，并减少POP零个或多个符号

9
00:00:49,749 --> 00:00:52,569
of the stack, and that's gonna be the right hand stack of some production. And
在堆栈中，这将是一些产品的右边堆栈。和

10
00:00:52,569 --> 00:00:56,989
then it's going to push one non-terminal on to the stack which is the left hand
然后，它将把一个非终端推到堆栈上，也就是左手

11
00:00:56,989 --> 00:01:03,589
side of that same production. And the key question in bottom of parsing and the one
同一部作品的另一面。而句法分析底层的关键问题是

12
00:01:03,589 --> 00:01:08,310
we haven't addressed at all yet is how do we decide when to shift and when to
我们还没有解决的问题是，我们如何决定何时转移和何时转移

13
00:01:08,310 --> 00:01:14,869
reduce. So let's take a look at this example grammar. And let's think about a
减少。让我们看一下这个示例语法。让我们想一想一个

14
00:01:14,869 --> 00:01:19,530
step of a parse where we've shifted one token onto the stack. We have Nth on the
解析的一步，我们将一个令牌移到堆栈上。我们有第N个在

15
00:01:19,530 --> 00:01:24,119
stack, and then we have times N plus N still to go that we haven't seen yet. Now
堆栈，然后我们还有N乘以N+N，我们还没有看到。现在

16
00:01:24,119 --> 00:01:29,520
at this point we could decide to reduce by T goes to N because we have the production
在这一点上，我们可以决定将T减去N，因为我们有

17
00:01:29,520 --> 00:01:34,520
T goes to Nth right here. And so we could then get into this particul-, potential
T去第N个，就在这里。这样我们就可以进入这个粒子势能

18
00:01:34,520 --> 00:01:38,770
state, or this particular state, where we have T on the stack and then the rest of
状态，或者这个特定的状态，其中堆栈上有T，然后是的睡觉

19
00:01:38,770 --> 00:01:42,929
the input that looks like that. A-, but you can see that this would be a mistake.
看起来像那样的输入。A-，但是你可以看到这将是一个错误。

20
00:01:42,929 --> 00:01:48,450
There is no production in the grammar that begins Hence T times. There's no
因此T次开始的语法中没有产生式。没有

21
00:01:48,450 --> 00:01:55,119
production up here that looks like T times. And therefore if we were to, to, to
这里的生产量看起来是T倍。所以如果我们要，要

22
00:01:55,119 --> 00:02:00,090
make this move, we would get stuck. We could continue to do reductions, to
走这一步，我们会被卡住的。我们可以继续减少，

23
00:02:00,090 --> 00:02:03,590
rummage around in the string. But we would never be able to get back to the start
在绳子上翻找。但是我们再也不能回到起点了

24
00:02:03,590 --> 00:02:09,100
symbol. Because there is no way to deal a sub string that has t times something in
符号。因为没有办法处理t乘以某项的子字符串。

25
00:02:09,100 --> 00:02:16,100
it. So what that shows us is that we don't always want to reduce just because we have
它。这向我们表明，我们并不总是想要减少，因为我们拥有

26
00:02:17,280 --> 00:02:21,950
the right-hand side of a production on top of the stack. To repeat that, even if
作品的右手边，在堆叠的顶部。再重复一遍，即使

27
00:02:21,950 --> 00:02:25,280
there's the right-hand side of some production sitting right there on top of
有一些作品的右手边就在那里

28
00:02:25,280 --> 00:02:29,510
the stack, it might be a mistake to do a reduction. We might want to wait and do
堆栈，进行缩减可能是错误的。我们可能要等一等再做

29
00:02:29,510 --> 00:02:34,360
our reduction someplace else. And the idea about how we decide is that we only want
我们在别的地方减价。关于我们如何决定的想法是，我们只想

30
00:02:34,360 --> 00:02:38,720
to reduce if the result can still be reduced to the start symbol. So let's take
如果结果仍然可以减少到开始符号，则设置为减去。所以让我们带上

31
00:02:38,720 --> 00:02:44,680
a look at a right most innervations. So, beginning with the start symbol, we get to
看看最右侧的神经。所以，从开始符号开始，我们就可以

32
00:02:44,680 --> 00:02:48,690
some state after, after some number of steps where that means, just an arbitrary
一些状态之后，在一些步骤之后，这意味着，只是一个任意的

33
00:02:48,690 --> 00:02:53,590
number of steps. We get to some state X is the right most non-terminal and then the
步骤数。我们得到某种状态X是最右边的非终结点，然后

34
00:02:53,590 --> 00:02:58,010
next step is to replace X with by the right hand side of some production. And
下一步是将X替换为某些产品的右侧。和

35
00:02:58,010 --> 00:03:02,330
remember, again, with bottom up parsing, the parsers are actually going in this
请再次记住，对于自下而上的解析，解析器实际上是这样做的

36
00:03:02,330 --> 00:03:09,010
direction, okay. So, this is the reduction direction. The derivation direction, the
方向，好的。所以，这就是减少的方向。派生方向、派生方向

37
00:03:09,010 --> 00:03:14,180
production direction, Because that's the easiest way to talk about what strings are
生产方向，因为这是谈论字符串是什么的最简单的方式

38
00:03:14,180 --> 00:03:17,290
derived. We wanna begin with a start symbol. But the [inaudible], but the
派生的。我们想从一个开始符号开始。但是[听不见]，但是

39
00:03:17,290 --> 00:03:22,980
parser's actually going against the flow of these arrows. Anyway if this is a
解析器实际上与这些箭头的流向背道而驰。不管怎样，如果这是一个

40
00:03:22,980 --> 00:03:28,570
rightmost derivation Then we say that alpha beta is a handle of alpha beta
最右边的派生，我们说αβ是αβ的句柄

41
00:03:28,570 --> 00:03:34,690
omega. And that just means that, yes, it would be okay in this situation to reduce
欧米茄。这就意味着，是的，在这种情况下，减少

42
00:03:34,690 --> 00:03:40,710
beta to X. And we could replace beta by X, because it's not a mistake. We can still,
从β到X，我们可以用X代替β，因为这不是一个错误。我们仍然可以，

43
00:03:40,710 --> 00:03:45,960
by some sequence of moves, get back to the start symbol. You know, by, by doing more
通过一系列的动作，回到开始符号。你知道，通过，通过做更多

44
00:03:45,960 --> 00:03:52,730
reductions. So handles formulize the intuition about where it is okay to do a
减价。因此句柄公式化了关于在哪里可以做

45
00:03:52,730 --> 00:03:57,600
reduction. A handle is just a reduction that also allows further reduction back to
减少。句柄只是一个折减，它还允许进一步折回到

46
00:03:57,600 --> 00:04:03,650
the start symbol And we clearly only want to do reduction at handles. If we do a
开始符号，我们显然只想在句柄上做减法。如果我们做一个

47
00:04:03,650 --> 00:04:08,260
reduction at a place that is not a handle even though it looks like it's the right
在一个不是手柄的地方减少，即使它看起来是正确的

48
00:04:08,260 --> 00:04:12,370
hand side or maybe actually be the right hand side of some production, that does
或者可能实际上是某些产品的右手边，这样做是正确的

49
00:04:12,370 --> 00:04:15,980
not mean. That it's actually a handle, and we might, if we could reduce there, we may
不刻薄。它实际上是一个把手，我们可能，如果我们可以在那里减少，我们可能会

50
00:04:15,980 --> 00:04:22,980
get stuck. So all we said so far is what a handle is. We've defined, a handle, We
被卡住了。到目前为止，我们所说的就是句柄是什么。我们已经定义了，一个句柄，我们

51
00:04:23,260 --> 00:04:27,470
haven't said anything about how to find the handles. And actually, how we find the
我还没说怎么找到把手呢。实际上，我们是如何找到

52
00:04:27,470 --> 00:04:31,690
handles is gonna consume much of the rest of our discussion of parsing.
句柄将占用我们讨论的解析的大部分睡觉内容。

