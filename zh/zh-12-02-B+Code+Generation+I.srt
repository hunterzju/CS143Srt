0
00:00:01,079 --> 00:00:03,850
So next we're going to talk about code generation for if then else
接下来，我们将讨论If Then Else的代码生成

1
00:00:03,850 --> 00:00:08,950
expressions And to do that we're going to need some control flow instructions. So
表达式，要做到这一点，我们需要一些控制流指令。所以

2
00:00:08,950 --> 00:00:13,780
we'll have, we'll need two in fact. So here's the branch equal instruction, and
我们有，实际上我们需要两个。这是分支相等指令，

3
00:00:13,780 --> 00:00:18,270
this jumps to a label if the contents of two registers are equal And then we'll
如果两个寄存器的内容相等，则跳转到标签，然后我们将

4
00:00:18,270 --> 00:00:22,150
also need an unconditional jump. So this just does an unconditional branch, not
还需要一个无条件的跳跃。所以这只是一个无条件的分支，而不是

5
00:00:22,150 --> 00:00:29,150
branch, an unconditional jump to a particular assembly instruction. So let's
分支，即无条件跳转到特定汇编指令。所以让我们

6
00:00:30,640 --> 00:00:35,159
look at the code generation for the expression if E1 is equal to E2 then
查看表达式的代码生成，如果E1等于E2，则

7
00:00:35,159 --> 00:00:41,830
evaluate three otherwise evaluate four. So first we have to evaluate the predicate
评估3，否则评估4。因此，首先我们必须评估谓词

8
00:00:41,830 --> 00:00:47,100
and in order to evaluate the predicate, we first have to evaluate E1. And by now this
为了评估谓词，我们首先必须评估E1。到现在为止，这件事

9
00:00:47,100 --> 00:00:51,440
pattern for binary operation should be familiar. So we evaluate the first
二进制操作的模式应该很熟悉。所以我们评估第一个

10
00:00:51,440 --> 00:00:55,890
sub-expression we save the result on a stack, so we push it on to the stack. It
子表达式我们将结果保存在堆栈上，因此我们将其推送到堆栈上。它

11
00:00:55,890 --> 00:00:59,650
takes two operations, one to save the result of the cumulate on the stack and
执行两个操作，一个是将累加的结果保存到堆栈上，另一个是

12
00:00:59,650 --> 00:01:06,650
the other cumulate stack later. Then we evaluate E2. Now we have evaluate d both
稍后，另一个累加堆栈。然后我们评估E2。现在我们已经评估了d和d

13
00:01:06,970 --> 00:01:12,280
of the arguments to the predicate. The result of E2 is in the accumulator and the
谓词的参数。E2的结果在累加器中，

14
00:01:12,280 --> 00:01:16,930
result of E1 is at the top of the stack because again, the evaluation of E2 will
E1的结果位于堆栈的顶部，因为同样，E2的求值将

15
00:01:16,930 --> 00:01:22,680
preserve the stack. So now we load the value of E One back into a temporary
保留堆栈。所以现在我们将E 1的值重新加载到临时

16
00:01:22,680 --> 00:01:27,930
register. And we pop the stack And then we can actually do the comparison. So now we
注册。然后我们弹出堆栈，然后我们可以实际进行比较。所以现在我们

17
00:01:27,930 --> 00:01:32,390
do a branch equal. So if the value of E One is equal. Sorry this is actually the
做一个相等的树枝。所以如果E 1的值相等。抱歉，这实际上是

18
00:01:32,390 --> 00:01:35,780
value of E Two and E Zero and if that's equal to the value of E One. Then we
E 2和E 0的值，如果它等于E 1的值。那么我们

19
00:01:35,780 --> 00:01:42,270
branch to the true branch. Otherwise we're going to fall through if there not equal.
分支到真正的分支。否则，如果不平等，我们就会失败。

20
00:01:42,270 --> 00:01:47,520
Okay And so we'll call that the false branch And what are we going to do if we
好的，我们称它为假分支，如果我们

21
00:01:47,520 --> 00:01:51,409
fall through, if this test fails, well then we want to evaluate E4. And that will
失败了，如果这个测试失败了，那么我们要评估E4。而那将会

22
00:01:51,409 --> 00:01:55,880
leave the value of E4 in the accumulator and that will be the value of the entire
将E4的值保留在累加器中，这将是整个

23
00:01:55,880 --> 00:02:00,460
if then else in the case where the predicate is false. So when we're done,
If Then Else在谓词为false的情况下。所以当我们做完的时候，

24
00:02:00,460 --> 00:02:05,229
we're going to branch now to some code that we'll just clean up and end the if
我们现在将分支到一些代码，我们将清理这些代码并结束if

25
00:02:05,229 --> 00:02:10,200
statement. We'll see what that does in a moment. Otherwise, we still need to
声明。我们稍后再来看看这会有什么效果。否则，我们还需要

26
00:02:10,199 --> 00:02:13,450
implement the true branch, so we'll stick the label for the true branch here And
实现TRUE分支，因此我们将在这里粘贴TRUE分支的标签

27
00:02:13,450 --> 00:02:19,590
what do we do on the true branch? We just evaluate E3. Okay And then the and if,
我们在真正的分支上做什么？我们只评估E3。好的，然后如果，

28
00:02:19,590 --> 00:02:25,410
Well, actually, there is no cleanup to do Because, E3 and E4 both preserve the
实际上，不需要进行清理，因为E3和E4都保留了

29
00:02:25,410 --> 00:02:28,440
stack, and they leave the result of their expressions of the accumulator. So we
堆栈，它们会留下累加器表达式的结果。所以我们

30
00:02:28,440 --> 00:02:34,190
reach and if, from E3 if we executed the true branch And then, in which case, the
如果从E3执行真分支，则在这种情况下，

31
00:02:34,190 --> 00:02:39,310
value in the accumulator is the value of E3 And we reach and if, through this
累加器中的值是E3的值，并且如果通过这个

32
00:02:39,310 --> 00:02:44,090
branch if we executed the false branch And then the value in the accumulator is the
分支，如果我们执行False分支，则累加器中的值是

33
00:02:44,090 --> 00:02:48,680
value of E4 And so this correctly implements an if then else expression.
值，因此这将正确实现If Then Else表达式。

