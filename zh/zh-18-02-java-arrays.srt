0
00:00:04,420 --> 00:00:11,030
In this video, we're going to take a look at Java Arrays. Let's say we have two
在本视频中，我们将看一看Java阵列。假设我们有两个人

1
00:00:11,030 --> 00:00:15,820
classes, a and b, and that b is a sub class of a. And let's think about what
类a和b，而b是a的子类。让我们想一想

2
00:00:15,820 --> 00:00:20,270
happens when we execute the following piece of code. So, the first thing we're
当我们执行下面的代码段时发生。所以，我们要做的第一件事

3
00:00:20,270 --> 00:00:25,449
going to do is we're going to allocate an array of b's. So, this is an array that's
我们要做的是分配一个由b组成的数组。所以，这是一个数组，

4
00:00:25,449 --> 00:00:32,449
supposed to hold B's, okay? And, we're going to have an array variable b here
应该是拿B的，好吗？我们在这里会有一个数组变量b

5
00:00:33,970 --> 00:00:39,059
that points to it. And then, we're going to have another variable, array variable
这说明了这一点。然后，我们将有另一个变量，数组变量

6
00:00:39,059 --> 00:00:45,489
A, that also points to the same array as B. But notice the type of a. So a is an
A，这也指向与B相同的数组。但是请注意a的类型。

7
00:00:45,489 --> 00:00:51,370
array of A's, little a here is an array of A's, and b is typed as an array of B's.
A的数组，这里的小a是A的数组，b的类型是B的数组。

8
00:00:51,370 --> 00:00:57,350
And now what we're going to do is we're going to assign into a sub zero, okay,
现在我们要做的是赋值到零下，好的，

9
00:00:57,350 --> 00:01:02,369
into the first position of a, a new a object. And that should be fine, right?
放到一个，一个新的一个物体的第一个位置。那应该没问题，对吧？

10
00:01:02,369 --> 00:01:06,680
Because a is an array of A's and that seems like that should work out alright.
因为a是由A组成的数组，这看起来应该可以解决问题。

11
00:01:06,680 --> 00:01:13,590
Alright, so here there will be an a sitting in the first position. And then,
好的，那么这里会有一个a坐在第一个位置。然后,

12
00:01:13,590 --> 00:01:19,840
we're going to access b sub zero which, because A and B point to the same array,
我们将访问b负零，因为A和B指向相同的数组，

13
00:01:19,840 --> 00:01:23,939
is the same element as a sub zero. And we're going to call some method that is
是与零以下的元素相同的元素。我们将调用一些方法，即

14
00:01:23,939 --> 00:01:30,100
not declared in A. Now remember, B is a sub-type of A, alright? So B has all the
不是在A中声明的，现在记住，B是A的一个子类型，好吗？所以B拥有所有的

15
00:01:30,100 --> 00:01:35,049
methods of A. A but B might have more methods. And since this is an array of
A的方法A，但B的方法可能更多。由于这是一组

16
00:01:35,049 --> 00:01:38,979
B's, we should be able to call all the B methods on it and yet here, when we call
，我们应该能够调用它上的所有B方法，但是在这里，当我们调用

17
00:01:38,979 --> 00:01:42,990
some methods that's declared in B but not in A, we are going to get a run-time error
一些在B中声明但在A中没有声明的方法，我们将得到运行时错误

18
00:01:42,990 --> 00:01:48,259
because the object stored in the array is actually an A object at the first
因为存储在数组中的对象实际上是第一个A对象

19
00:01:48,259 --> 00:01:53,009
position. To understand what's going on in this example, we have to take a look at
位置。要理解本例中发生的事情，我们必须看一看

20
00:01:53,009 --> 00:01:59,170
the sub typing rules in Java. So, if we use a subtype of A if B inherits from A,
Java中的子类型规则。所以，如果我们使用A的子类型，如果B继承自A，

21
00:01:59,170 --> 00:02:02,380
that's one case. So if B and B inherits from A, then B is a subtype of A. And
这只是一个案例。因此，如果B和B继承自A，那么B就是A的子类型。

22
00:02:02,380 --> 00:02:04,689
that's just like in Cool and, and most other object oriented languages. And
这就像Cool和和大多数其他面向对象语言一样。和

23
00:02:04,689 --> 00:02:09,369
we're, we're very familiar with that from our lectures in type checking. Further
我们在我们的打字检查课上对此非常熟悉。进一步

24
00:02:09,369 --> 00:02:15,150
more, type, sub typing is transitive. So if C is a subtype of B, and B is a subtype
此外，类型和子类型是可传递的。因此，如果C是B的子类型，而B是子类型

25
00:02:15,150 --> 00:02:21,019
of A then C is also a subtype of A. Okay, a nd that's also completely standard. But
那么C也是A的一个子类型，这也是完全标准的。但

26
00:02:21,019 --> 00:02:25,700
then there's this other rule that's not quite standard or is definitely
然后还有另一条规则，它不是很标准，或者肯定是

27
00:02:25,700 --> 00:02:31,310
nonstandard. And that's that, an array of B's is a sub-type of an array of A's if
不规范。也就是说，B数组是A数组的子类型，如果

28
00:02:31,310 --> 00:02:35,140
the element types are in a sub-type relationship. So if B is a sub-type of A,
元素类型处于子类型关系中。所以如果B是A的一个子类型，

29
00:02:35,140 --> 00:02:39,280
then array of B is a sub-type of array of A. And Cool doesn't have anything like
则B的数组是A的数组的子类型，而Cool没有类似于

30
00:02:39,280 --> 00:02:42,500
that, Cool doesn't have arrays so it wouldn't even have the opportunity to have
Cool没有数组，所以它甚至没有机会

31
00:02:42,500 --> 00:02:47,129
something like that. But this is also not the way it's done in other languages that
差不多吧。但这也不是在其他语言中这样做的方式，这些语言

32
00:02:47,129 --> 00:02:52,709
have objects and sub-typing. So let's take a look at our little example again and let
具有对象和子类型。让我们再看一遍我们的小例子，让我们

33
00:02:52,709 --> 00:02:59,120
me explain it in a slightly different way. So, the issue here is that we have a, area
我用一种稍有不同的方式来解释。所以，这里的问题是，我们有一个面积

34
00:02:59,120 --> 00:03:02,819
of memory, and it actually doesn't matter here. It's not essential that this be an
记忆，这在这里其实并不重要。这不是必须的

35
00:03:02,819 --> 00:03:07,549
array. What's important is that's an updatable part of memory so that we have
数组。重要的是，这是内存的一个可更新部分，因此我们有

36
00:03:07,549 --> 00:03:12,329
pointers to it. We have two pointers to it, a and b and we can, they can both read
指向它的指针。我们有两个指向它的指针，a和b，我们可以，他们都可以阅读

37
00:03:12,329 --> 00:03:15,280
and write this part of memory. So this could be just a single cell, it doesn't
并写入这部分内存。所以这可能只是一个细胞，它不

38
00:03:15,280 --> 00:03:20,189
have to be an array of multiple cells. But what's important is that there is some
必须是多个单元格的数组。但重要的是有一些

39
00:03:20,189 --> 00:03:25,319
memory location that both of these point to, that they can both read and write,
它们都可以读取和写入内存位置，

40
00:03:25,319 --> 00:03:30,129
okay? And the trouble comes and by the way, that there's a name that, that's
好吧?麻烦来了，顺便说一句，有一个名字，那就是

41
00:03:30,129 --> 00:03:37,129
called Aliasing, okay? So when you have two names, two program names for the same
叫别名，好吗？因此当您有两个名称时，两个程序名称相同

42
00:03:37,849 --> 00:03:42,650
part of memory that is called aliasing, and here you know, we have the, the two
内存的一部分被称为混叠，在这里，你知道，我们有，这两个

43
00:03:42,650 --> 00:03:49,650
arrays, A and B, that point to the same area of memory, okay? Now, aliasing is
数组，A和B，指向相同的内存区域，好吗？现在，别名是

44
00:03:49,950 --> 00:03:55,849
very common in real programs since not bad by itself but the problem in this example
在实际程序中非常常见，因为它本身并不坏，但本例中的问题

45
00:03:55,849 --> 00:04:02,849
is that A and B have different types, okay? And in general, if you have aliasing
A和B有不同的类型，好吗？一般来说，如果你有别名

46
00:04:05,040 --> 00:04:09,689
updatable references, okay? Meaning if two names for the same location, that location
可更新的推荐信，好吗？意思是如果同一位置的两个名字，该位置

47
00:04:09,689 --> 00:04:13,329
is both readable and writable, so it can be updated through the two names. And
既可读又可写，因此可以通过这两个名称进行更新。和

48
00:04:13,329 --> 00:04:18,690
those two names have different types then that is going to be unsound, okay? We're
这两个名字有不同的类型，这是不合理的，好吗？我们是

49
00:04:18,690 --> 00:04:24,800
not going to have a sound type system and to see the problem, let's say here in this
不会有声音类型的系统，要看到问题，让我们在这里

50
00:04:24,800 --> 00:04:31,800
case what was it? We had that B, type B was sub type of A, okay? And what did that
案子是什么？我们有B型，B型是A型的亚型，好吗？那是怎么回事呢？

51
00:04:32,910 --> 00:04:38,330
mean? Well that meant is we could do a wright through this pointer, okay? And
卑鄙？好的，这意味着我们可以通过这个指针做一个写字，好吗？和

52
00:04:38,330 --> 00:04:44,360
write an A object into this location and then we could read that out through this
将A对象写入此位置，然后我们可以通过以下内容读出该对象

53
00:04:44,360 --> 00:04:50,510
point over here as a B object. But now, it doesn't have all the methods and, and
在这里指向一个B对象。但是现在，它没有所有的方法和，而且

54
00:04:50,510 --> 00:04:54,590
fields of A and treating it as the object, we could potentially use an operation on
字段，并将其视为对象，我们可能会在

55
00:04:54,590 --> 00:05:00,100
it that's undefined. And you can see that it doesn't help if we swap the roles of,
那是不确定的。你可以看到，如果我们交换一下角色，

56
00:05:00,100 --> 00:05:05,070
of A and B, alright? So in particular, if we reverse the, if we reverse the
A和B，好吗？所以特别是，如果我们反转，如果我们反转

57
00:05:05,070 --> 00:05:08,990
sub-typing relationship so that A was a sub type of B, we can do exactly the same
子类型关系，所以A是B的子类型，我们可以做完全相同的事情

58
00:05:08,990 --> 00:05:13,570
problem because aliasing is symmetric. We just do the write through the B pointer
问题，因为别名是对称的。我们只需通过B指针执行写入

59
00:05:13,570 --> 00:05:17,890
and the read out of the A pointer swapping the roles of the recent right here and we
读出A指针，在这里和我们交换最近的角色

60
00:05:17,890 --> 00:05:23,040
have exactly the same problem. So in general, multiple aliases do updatable
都有完全相同的问题。因此，通常情况下，多个别名是可更新的

61
00:05:23,040 --> 00:05:28,150
locations with different types is unsound, okay? And this problem actually has come
不同类型的地点是不合理的，好吗？这个问题实际上已经出现了

62
00:05:28,150 --> 00:05:32,460
up in many different programming languages. Java is not the only
支持多种不同的编程语言。Java并不是唯一的

63
00:05:32,460 --> 00:05:36,620
programming language to have had this issue. It's a fairly subtle aspect of type
编程语言有过这个问题。这是字体的一个相当微妙的方面

64
00:05:36,620 --> 00:05:42,080
systems and in many languages have done things similar to Java where they've
系统和许多语言都做过类似于Java的事情

65
00:05:42,080 --> 00:05:47,090
created a problem really for the static type system by wanting to have a
真的给静电类型的系统带来了问题，因为想要有一个

66
00:05:47,090 --> 00:05:52,750
sub-typing work through arrays. Now, the standard solution or the solution that's
子类型通过数组工作。现在，标准解决方案或解决方案是

67
00:05:52,750 --> 00:05:57,660
used in, I should say, in many languages and is probably most widely accepted in
我应该说，用在许多语言中，而且可能是最被广泛接受的

68
00:05:57,660 --> 00:06:01,130
the programming languages research community is that you need a different
编程语言研究社区认为您需要一个不同的

69
00:06:01,130 --> 00:06:07,460
sub-typing rule for arrays. So we would say, you know, the rule that is commonly
数组的子类型规则。所以我们会说，你知道，通常

70
00:06:07,460 --> 00:06:11,680
used the standard solution to this problem at the type level is that to do the
在类型级别对此问题使用的标准解决方案是

71
00:06:11,680 --> 00:06:18,320
following things. So you only allows sub-typing on arrays. So, you know, an
接下来的事情。因此，您只允许对数组进行子类型。所以，你知道，一个

72
00:06:18,320 --> 00:06:25,320
array of B's is a sub-type in array of A's only if B and A are the same type. If B =
仅当B和A的类型相同时，B的数组才是A的数组中的子类型。如果B=

73
00:06:25,350 --> 00:06:30,610
A. And if you think about that for a second, if we have an array and now we
答：如果你想一秒钟，如果我们有一个数组，现在我们

74
00:06:30,610 --> 00:06:35,780
have our two pointers to it, A and B and we know the type of A the subtype or the
有两个指向它的指针，A和B，我们知道A的类型、子类型或

75
00:06:35,780 --> 00:06:41,710
type of B. Well, that only h appens if the element types are, are equal. And so we
B的类型，如果元素类型是，只有h是相等的。所以我们

76
00:06:41,710 --> 00:06:45,940
can't create two references to an updateable location with different types.
无法创建对不同类型的可更新位置的两个引用。

77
00:06:45,940 --> 00:06:52,060
Okay, and that will guarantee soundness of, of the type, of the type system. So
好的，这将保证类型系统的可靠性。所以

78
00:06:52,060 --> 00:06:56,150
Java fixes the problem differently. So instead of statically checking that array
Java以不同的方式解决问题。因此，不是静态检查该数组

79
00:06:56,150 --> 00:07:03,150
accesses will all be type correct, Java does this at run time. And so whenever an
访问都将是类型正确的，Java在运行时做到这一点。所以无论什么时候

80
00:07:03,250 --> 00:07:07,930
assignment is done into an array at runtime, Java checks whether the type of
在运行时对数组进行赋值，Java会检查

81
00:07:07,930 --> 00:07:12,610
the object being assigned in compatible with the type of the array. So when you
分配的对象与数组的类型兼容。所以当你

82
00:07:12,610 --> 00:07:19,610
say new B sub ten in Java, Java will remember inside the array that this was
假设Java中有新的Bsubten，Java会在数组中记住这是

83
00:07:19,710 --> 00:07:23,930
supposed to be an array of Bs. And then whatever you assign into the array, it
应该是一组B。然后，无论您分配给数组的是什么，它都会

84
00:07:23,930 --> 00:07:28,960
will check that the thing you're assigning is either a B or a sub type of B. Now,
将检查您指定的对象是否为B或子类型B。

85
00:07:28,960 --> 00:07:34,460
this obviously adds an overhead on array computations so every assignment to an
这显然增加了数组计算的开销，因此对

86
00:07:34,460 --> 00:07:40,330
array is going to have, have a type check on it at run time. And fortunately though,
数组将在运行时进行类型检查。不过幸运的是，

87
00:07:40,330 --> 00:07:43,890
the most kinds of arrays are arrays of primitive types, in particular arrays of
大多数类型的数组都是基元类型的数组，特别是

88
00:07:43,890 --> 00:07:48,500
ints and arrays of floating point numbers and these are not affected because the
整数和浮点数的数组，这些不受影响，因为

89
00:07:48,500 --> 00:07:52,490
primitive types are not classes. There's no subtyping on them and so you can never
基元类型不是类。它们上没有子类型，所以你永远不能

90
00:07:52,490 --> 00:07:57,970
create an array, say, of floating point numbers, with any kind of subtyping
创建一个数组，比方说，可以使用任何类型的子类型创建浮点数的数组

91
00:07:57,970 --> 00:08:03,060
relationship that would result in this problem. So, so, that we're saved, or in
会导致这个问题的关系。所以，所以，我们得救了，或者在

92
00:08:03,060 --> 00:08:07,210
better shape, for the primitive types, and they don't need these extra checks. But if
原始类型的形状更好，而且它们不需要这些额外的检查。但是如果

93
00:08:07,210 --> 00:08:11,090
you have arrays of objects, then we do assignments into those arrays in Java,
你有对象的数组，然后我们在Java中对这些数组进行赋值，

94
00:08:11,090 --> 00:08:12,550
there's additional run time overhead.
还有额外的运行时间开销。

