0
00:00:03,449 --> 00:00:07,779
In this video we are going to continue our discussion of register interference graphs
在本视频中，我们将继续讨论寄存器干扰图

1
00:00:07,779 --> 00:00:13,570
and talk about how to use RIGS to come up with register assignments for procedures.
并讨论如何使用钻机来设计程序的寄存器分配。

2
00:00:13,570 --> 00:00:16,770
And we're going to look at one particular technique that's popular called graph
我们要看一下一种很流行的技术，叫做图形

3
00:00:16,770 --> 00:00:23,770
coloring. So first, a couple of definitions. A graph coloring is an
上色。所以首先，有几个定义。图形着色是一种

4
00:00:24,140 --> 00:00:27,930
assignment of colors to nodes such that the nodes connected by an edge have
为结点分配颜色，使边连接的结点具有

5
00:00:27,930 --> 00:00:34,930
different colors. So if I have a graph let's say with, with three nodes and it's
不同的颜色。所以如果我有一个图，假设有三个节点，它是

6
00:00:35,280 --> 00:00:40,370
fully connected so every node connect to every other node. And then, and then a
完全连接，因此每个节点都连接到所有其他节点。然后，然后是一个

7
00:00:40,370 --> 00:00:45,079
coloring of this graph would be an assignment of colors such that every pair
此图的着色将是颜色的分配，以便每对颜色

8
00:00:45,079 --> 00:00:48,220
of nodes are connected by an edge have a different color. So for example I could
的节点由具有不同颜色的边连接。举个例子，我可以

9
00:00:48,220 --> 00:00:54,780
color this node blue and I could color this node green and I could color this
把这个节点涂成蓝色，我可以把这个节点涂成绿色，然后我可以给这个上色

10
00:00:54,780 --> 00:01:00,489
node black, okay. And then that would be a valid coloring of the graph because each
节点黑，好的。然后这将是该图的有效着色，因为每个

11
00:01:00,489 --> 00:01:05,430
pair of neighbours has a different color. And then the graph is k-colorable if it
一对邻居的颜色不同。则该图是k-可染的，如果

12
00:01:05,430 --> 00:01:12,430
has a coloring that uses k or fewer colors. In our problem, the colors
具有使用k种或更少颜色的着色。在我们的问题中，颜色

13
00:01:13,060 --> 00:01:17,969
corresponds to registers so we want to do is to assign colors or registers to the
对应于寄存器，因此我们要做的是将颜色或寄存器分配给

14
00:01:17,969 --> 00:01:22,850
graph nodes. And we're going to let k, the number, the maximum number of colors we're
图形节点。我们要让k，我们的最大颜色数

15
00:01:22,850 --> 00:01:26,170
allowed to use be the number of machine register. So the actual number of
允许使用的是机器注册号。所以实际的数字是

16
00:01:26,170 --> 00:01:31,270
registers present on the architecture for which we're generating code. And then if,
我们正在为其生成代码的架构上存在的寄存器。然后如果

17
00:01:31,270 --> 00:01:34,889
if a RIG, if a registered interference graph is k-colorable, then there's going
如果一个钻机，如果一个注册的干涉图是k-可染的，那么

18
00:01:34,889 --> 00:01:41,240
to be a register assignment that uses no more than k registers. So let's take a
是使用不超过k个寄存器的寄存器赋值。所以让我们拿一个

19
00:01:41,240 --> 00:01:46,539
look at an example rig and for this particular graph, there is no coloring. It
看一个示例装备，对于这个特定的图形，没有着色。它

20
00:01:46,539 --> 00:01:52,649
turns out that it uses fewer than four colors. But there is at least one for
原来它使用的颜色不到四种。但至少有一个是

21
00:01:52,649 --> 00:01:59,249
coloring of this graph. And then here it is so I've used colored labels but also
此图的着色。然后就是这里，所以我用了彩色标签，但是

22
00:01:59,249 --> 00:02:04,630
register names so that you can see what registers we might assign to each of the
寄存器名称，以便您可以查看我们可能分配给每个

23
00:02:04,630 --> 00:02:09,610
nodes. And just notice that although there are many more than four temporaries or
节点。请注意，尽管有四个以上的临时或

24
00:02:09,610 --> 00:02:14,000
four nodes in this graph, we do manage to color it with only four colors and some of
这张图中有四个节点，我们只用四种颜色和一些

25
00:02:14,000 --> 00:02:19,010
the nodes have the same color. So for example, d and b are allocated the same
节点具有相同的颜色。例如，d和b被分配相同的值

26
00:02:19,010 --> 00:02:26,010
color, as are e and a. Just to remind ourselves where this register interference
颜色，就像e和a一样。只是为了提醒我们这个寄存器在哪里干扰

27
00:02:26,480 --> 00:02:31,930
graph came from, here is the original control flow graph again. And, once we
图形来自，这里又是原始的控制流图。而且，一旦我们

28
00:02:31,930 --> 00:02:36,010
have the coloring of the graph, now we can do the register assignment. We can replace
有了图的着色，现在我们可以做寄存器分配了。我们可以替换

29
00:02:36,010 --> 00:02:40,090
the temporaries by their corresponding register names, and then we get this
通过它们对应的寄存器名称，我们就可以得到这样的结果

30
00:02:40,090 --> 00:02:46,760
control flow graph. So, here we've just renamed each of the variables of the
控制流图。因此，在这里，我们刚刚重命名了

31
00:02:46,760 --> 00:02:51,430
program with its register that it was assigned to. And now we're very close, as
程序及其分配给它的寄存器。现在我们非常接近了，因为

32
00:02:51,430 --> 00:02:56,379
you can see, to having code that we can emit and execute on the target
您可以看到，拥有我们可以在目标上发出和执行的代码

33
00:02:56,379 --> 00:02:56,879
architecture.
建筑。

