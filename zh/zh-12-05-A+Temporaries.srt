0
00:00:04,009 --> 00:00:07,740
In the last couple of videos we have talked about code generation for simple
在最后几个视频中，我们已经讨论了简单的代码生成

1
00:00:07,740 --> 00:00:12,340
programming language and I mentioned at the end of the last video that realistic
编程语言和我在上一个视频的末尾提到了逼真的

2
00:00:12,340 --> 00:00:16,869
compilers do things a bit differently and in particular they do a better job of
编译器做事情的方式略有不同，尤其是它们在以下方面做得更好

3
00:00:16,869 --> 00:00:21,260
keeping values and registers and of managing the temporaries that have to be
保存值和寄存器以及管理必须

4
00:00:21,260 --> 00:00:24,850
stored in the activation record. We're actually going to talk about both of those
存储在激活记录中。我们实际上要讨论这两个问题

5
00:00:24,850 --> 00:00:29,140
problems. In this particular video, we're only going to talk about the second one
问题。在这段特别的视频中，我们只讨论第二个

6
00:00:29,140 --> 00:00:34,030
and so we're going to be covering a better ways for compilers to manage temporary
因此，我们将介绍一种更好的方法，让编译器管理临时

7
00:00:34,030 --> 00:00:41,030
values. So the biggest idea which we've already seen is to keep temporaries in the
价值。所以我们已经看到的最大的想法是在

8
00:00:42,219 --> 00:00:47,069
activation record. Now, this is not as efficient as keeping temporaries in
激活记录。现在，这比不上把临时人员放在

9
00:00:47,069 --> 00:00:50,670
registers but that's the subject of a future video, we're not going to talk
但这是未来视频的主题，我们不会谈论

10
00:00:50,670 --> 00:00:56,149
about that today. What we're going to talk about is improving the language we manage
关于今天的事。我们将要谈论的是改进我们管理的语言

11
00:00:56,149 --> 00:00:59,409
temporaries that happened to be in the activation record for whatever reasons. So
无论出于什么原因碰巧出现在激活记录中的临时文件。所以

12
00:00:59,409 --> 00:01:02,979
why, it doesn't matter why we want them to be into activation record, but given that
为什么，我们为什么想让他们进入激活记录并不重要，但是考虑到

13
00:01:02,979 --> 00:01:07,260
it's there, that's the most efficient code that we can generate And, the improvement
它就在那里，这是我们能生成的最有效的代码，而且，改进

14
00:01:07,260 --> 00:01:12,960
that we're going to make Is have the co-generator assign a fixed location In
我们要做的是让联合发电机在

15
00:01:12,960 --> 00:01:16,870
the activation record for each temporaries. We're going to pre-allocate
每个临时的激活记录。我们要预先分配

16
00:01:16,870 --> 00:01:22,150
memory or a spot in the activation record for each temporary and then we will be
内存或激活记录中的一个点，然后我们就会

17
00:01:22,150 --> 00:01:27,130
able to save and restore the temporary without having to do the stack pointer
无需使用堆栈指针即可保存和恢复临时

18
00:01:27,130 --> 00:01:33,460
manipulations. So, let's take a look at the [inaudible] program for a simple
操纵。那么，让我们看一看简单的[听不见的]节目

19
00:01:33,460 --> 00:01:37,740
programming language. Here is the Fibonacci function again and let me change
编程语言。这里又是斐波纳契函数，让我修改一下

20
00:01:37,740 --> 00:01:42,680
colors to something that says more contrast and let's think about how many
用颜色来表示更强的对比度，让我们想一想有多少

21
00:01:42,680 --> 00:01:48,520
temporaries we need to evaluate this functions. So, this function body when it
临时的，我们需要评估这个函数。因此，此函数体在其

22
00:01:48,520 --> 00:01:52,909
executes we'll need a certain number of temporaries and if we know how many
我们需要一定数量的临时人员，如果我们知道有多少

23
00:01:52,909 --> 00:01:57,570
temporaries that needs in advance then we could allocate the space for those in the
那么我们就可以分配空间给那些在

24
00:01:57,570 --> 00:02:01,770
activation record rather having to do push and pop, pushing and popping from the
激活记录，而不是必须推送和弹出，推送和弹出从

25
00:02:01,770 --> 00:02:07,780
stack at runtime. So, let's take a look and if then else is going t o involve a
在运行时堆栈。所以，让我们来看一下，如果这样的话会不会涉及到

26
00:02:07,780 --> 00:02:11,480
temporary because it always do this predicate comparison here, we're going to
临时的，因为它总是在这里执行谓词比较，所以我们将

27
00:02:11,480 --> 00:02:15,280
have to evaluate the, the first argument to the predicate and then save the result
我必须计算谓词的第一个参数，然后保存结果

28
00:02:15,280 --> 00:02:19,730
of that while we evaluate the second argument to the predicate. So this one
当我们计算谓词的第二个参数时。所以这个人

29
00:02:19,730 --> 00:02:24,049
involve one temporary, we'll need one temporary for that predicate. Similarly
涉及一个临时的，我们需要一个临时的谓词。同样，

30
00:02:24,049 --> 00:02:27,950
for this predicate, to evaluate it since it's a two argument operation in
对于此谓词，要对其求值，因为它是

31
00:02:27,950 --> 00:02:34,400
comparison, we'll also need one temporary for that. 1010. There's this expression
比较一下，我们还需要一辆临时的。1010号。有这样一种表达方式

32
00:02:34,400 --> 00:02:37,269
over here which is kind of complicated. How many temporaries will we need for
在这里，这有点复杂。我们需要多少临时人员呢？

33
00:02:37,269 --> 00:02:43,180
these? Well, remember how this works. So, evaluate the first expression and then we
这些?嗯，记住这是怎么回事。因此，计算第一个表达式，然后我们

34
00:02:43,180 --> 00:02:47,730
save the results of that so this will require one temporary for the result of
保存该结果，因此这将需要一个临时的

35
00:02:47,730 --> 00:02:52,290
the called fib going to have to be saved and only evaluate the plus And while we
必须保存被调用的fib，并且只计算加号和While

36
00:02:52,290 --> 00:02:57,430
are evaluating the call, the fib though is actually, before we evaluate to call the
正在评估调用，但实际上，在我们评估调用

37
00:02:57,430 --> 00:03:01,790
fib, we have to evaluate the argument of fib and that involve the subtractions. We
我们要计算fib的论点，涉及减法。我们

38
00:03:01,790 --> 00:03:08,680
also need one temporary here for the subtraction. Okay And now we have about
这里也需要一个临时的来做减法。好的，现在我们有大约

39
00:03:08,680 --> 00:03:15,680
the second side of the, this edition here. Well this also involves a subtraction.
第二面，这个版本在这里。这也涉及到减法。

40
00:03:18,669 --> 00:03:24,169
Okay So, we got to have one temporary here to hold on to the value x while we're
好的，所以，我们在这里有一个临时的，当我们在这里的时候，我们可以保持x的值。

41
00:03:24,169 --> 00:03:29,019
evaluating the minus to compute the value of the argument before we call
在调用之前计算减号以计算参数的值

42
00:03:29,019 --> 00:03:35,049
[inaudible]. Okay? So how many temporaries do we need in total? While we need one
[听不见]。好吧?那么我们总共需要多少临时人员呢？当我们需要一个的时候

43
00:03:35,049 --> 00:03:39,779
here for the predicate, but notice that once the predicate is decided, once we
这里是谓词，但是请注意，一旦决定了谓词，一旦我们

44
00:03:39,779 --> 00:03:43,260
know the answer to whether this predicate is true or false, we don't need that
知道这个谓词是真是假的答案，我们不需要这个

45
00:03:43,260 --> 00:03:48,749
temporary anymore. So in fact, that temporary can be reclaimed; we don't need
不再是暂时的了。所以事实上，临时的是可以回收的；我们不需要

46
00:03:48,749 --> 00:03:53,569
the space for that temporary anymore by the time we get to the false branch. And
当我们到达错误的分支时，暂时的空间就不再存在了。和

47
00:03:53,569 --> 00:03:56,939
again, once this predicate is evaluated, we don't need the space for that temporary
同样，一旦评估了这个谓词，我们就不需要临时的空间了

48
00:03:56,939 --> 00:04:02,269
anymore, okay? So now we're down to the plus. The first thing that happens is we
再也不会了，好吗？所以现在我们要降到正数了。发生的第一件事就是我们

49
00:04:02,269 --> 00:04:06,680
evaluate the argument to this first call the fib. Once that's evaluated, we don't
对此第一个调用fib的参数求值。一旦评估过了，我们就不会

50
00:04:06,680 --> 00:04:12,090
need the temporary for it anymore. Now the results of fib has to be saved somewhere
再也不需要临时的了。现在，fib的结果必须保存在某个地方

51
00:04:12,090 --> 00:04:16,949
while we do the plus, okay? And then we'r e going to have to evaluate the argument
我们做加法的时候，好吗？然后我们将不得不对论点进行评估

52
00:04:16,949 --> 00:04:22,390
to the second call of fib and then notice that this happens while we still need this
到第二个fib调用，然后请注意，这发生在我们仍然需要它的时候。

53
00:04:22,390 --> 00:04:28,620
temporary here so in fact, we need both of these temporaries at the same time. Okay
这里是临时的，所以事实上，我们同时需要这两个临时的。好吧

54
00:04:28,620 --> 00:04:31,230
because while we're evaluating this argument, the second call of fib, we still
因为当我们评估这个论点的时候，第二次说谎，我们仍然

55
00:04:31,230 --> 00:04:35,950
need to be holding on to the first argument to the plus. And so in fact this
需要坚持加号的第一个论点。所以事实上这是

56
00:04:35,950 --> 00:04:42,680
particular function can be evaluated with just two temporaries. So all the space we
只需两个临时函数就可以评估特定的功能。所以我们所有的空间

57
00:04:42,680 --> 00:04:49,680
need to compute the value of this function body. So in general, we can define a
需要计算此函数体的值。因此，一般而言，我们可以定义一个

58
00:04:51,560 --> 00:04:58,560
function nt of e that computes a number of temporaries  needed to evaluate e1 + e2.
e的函数nt，它计算计算e1+e2所需的时间数。

59
00:05:04,400 --> 00:05:09,100
So, that's going to need at least as many temporaries as e1. Okay, so if we need a
所以，这至少需要和E1一样多的临时时间。好的，所以如果我们需要一个

60
00:05:09,100 --> 00:05:13,420
number of temporary's k to evaluate e1, let's have at least k temporaries to
计算E1的临时数k，让我们至少有k个临时数

61
00:05:13,420 --> 00:05:17,390
evaluate the whole expression And then, we'll also need at least as many
计算整个表达式，然后，我们还需要至少

62
00:05:17,390 --> 00:05:22,230
temporaries as it's needed to evaluate the two+1 because we have to hold on to the
因为评估2+1是必要的，因为我们必须坚持

63
00:05:22,230 --> 00:05:27,880
value of e2 while we are evaluating so we have to hold on the value of e1 while
e2的值，所以我们必须保持e1的值，而

64
00:05:27,880 --> 00:05:34,710
we're evaluating the two. Okay And it's going to be the maximum. Over these two so
我们正在评估这两个人。好的，这将是最大的。在这两个上面，所以

65
00:05:34,710 --> 00:05:38,560
it'll be the maximum number with between the maximum number of temporaries need to
这将是介于需要的最大临时数量之间的最大数量

66
00:05:38,560 --> 00:05:43,230
evaluate a one and one + the number of temporaries to evaluate two. That would be
求1和1+临时数来求2。那就是

67
00:05:43,230 --> 00:05:46,640
the total number of temporaries, the minimum number of temporaries needed to
临时人员总数，满足以下要求的最小临时人员数量

68
00:05:46,640 --> 00:05:53,640
evaluate e1 + e2 And the reason is a max instead of a sum. Is that once we've
计算e1+e2，原因是最大值而不是总和。一旦我们

69
00:05:54,740 --> 00:06:00,960
evaluate e1 we don't need any of the space that was used to evaluate e1 anymore. All
求值，我们不再需要任何用来求值的空间。全

70
00:06:00,960 --> 00:06:04,200
those temporaries are done. All we need is the answer. We don't need the immediate
那些临时的已经做完了。我们需要的只是答案。我们不需要即刻的

71
00:06:04,200 --> 00:06:08,640
results and that means that the temporaries that were used to evaluate e1
结果这意味着用来评估E1的颞叶

72
00:06:08,640 --> 00:06:15,640
can be reused to evaluate e2. So, generalizing from that one example, here
可以重用来评估e2。所以，从这个例子来概括一下，这里

73
00:06:16,870 --> 00:06:22,020
is the system of equations that subscribes the number of temporaries needed to
是订阅所需时间的方程式系统

74
00:06:22,020 --> 00:06:26,950
evaluate every kind of expression in our little language. So, let's take a look.
用我们的小语言评估每一种表达方式。那么，我们来看一看。

75
00:06:26,950 --> 00:06:31,920
So, we already talked about e1+e2 is just the max of over the number or temporaries
所以，我们已经讨论过，e1+e2就是超过一个或多个临时数的最大值

76
00:06:31,920 --> 00:06:37,550
to value of e1 and one + number of temporaries to value of e2. So, e1-e2 is
设置为e1的值，并将1+个临时数设置为e2的值。因此，e1-e2是

77
00:06:37,550 --> 00:06:41,250
exactly the same thing because the same structure is a different computational
完全相同的事情，因为相同的结构是不同的计算

78
00:06:41,250 --> 00:06:45,750
operation but is a binary operation and we have to save the value of e1 while
运算，但这是一个二进制运算，我们必须保存e1的值，而

79
00:06:45,750 --> 00:06:52,750
evaluated e2. So, it's the same formula. [inaudible] Now for if and else well what
评估e2。所以，这是相同的公式。[听不见]现在是如果，否则会怎么样？

80
00:06:53,530 --> 00:06:57,920
do we need? We need one, I'm sorry we need, it's going to max again. It's going
我们需要吗？我们需要一辆，很抱歉我们需要，它又要开到最高了。它要走了

81
00:06:57,920 --> 00:07:04,920
to be max over some number of different quantities. How many temporaries might we
在某一数量的不同数量上取最大值。我们可能会有多少个临时工

82
00:07:05,090 --> 00:07:09,630
need? Well, we might need as many temporaries or as needed to evaluate the
需要吗？嗯，我们可能需要尽可能多的临时工或根据需要来评估

83
00:07:09,630 --> 00:07:12,770
value of e1 and we certainly need at least as many, alright. So, if you want to take
E1的值，我们当然需要至少同样多的，对吧。所以，如果你想带上

84
00:07:12,770 --> 00:07:16,710
a certain number of temporaries, the whole f and l is going to require at least as
一定数量的临时函数，整个f和l将需要至少

85
00:07:16,710 --> 00:07:21,060
many temporaries. Now of course, once e1 is done evaluating, we don't need its
很多临时工。当然，一旦E1完成评估，我们就不需要它

86
00:07:21,060 --> 00:07:26,250
temporaries anymore. And, and we can evaluate e2, okay. And while we are
不再是临时的了。然后，我们可以评估e2，好的。当我们在这里的时候

87
00:07:26,250 --> 00:07:30,310
evaluating e2, we have to hold on. To the results of e1, that's where the one plus
评估e2，我们必须坚持住。对于E1的结果，这就是一加

88
00:07:30,310 --> 00:07:34,770
comes from. So, to that, while we're evaluating e2, we need one plus the number
来自于。因此，当我们计算e2时，我们需要1加上数字

89
00:07:34,770 --> 00:07:39,730
of temporaries to evaluating two to hold all the temporaries of the computation.
计算两个以容纳计算的所有时间。

90
00:07:39,730 --> 00:07:42,170
And then once the predicate is done, we don't need any of those temporaries
一旦谓词完成，我们就不需要任何这些临时语句了

91
00:07:42,170 --> 00:07:47,500
anymore at all ad we're going to evaluate either e3 or e4. And so then, we just need
再说，我们要计算E3或E4的值。因此，我们只需要

92
00:07:47,500 --> 00:07:52,020
however many temporaries each of those requires and whatever the maximum is over
不管每一个需要多少临时时间，不管最大值是多少

93
00:07:52,020 --> 00:07:56,230
these four quantities, that's the minimum number of temporaries we can get away with
这四个数量，这是我们能逃脱的最小临时数量

94
00:07:56,230 --> 00:08:03,230
to evaluate the entire if then else. Let's take a look at a function call. So that
来评估整个IF THEN ELSE。让我们来看一下函数调用。所以

95
00:08:03,570 --> 00:08:08,980
the space needed for the function call is number of temporaries, the max over the
函数调用所需的空间是临时数，最大值超过

96
00:08:08,980 --> 00:08:14,090
number of temporaries to evaluate anyone of the arguments and this is actually an
计算任何参数的临时数，这实际上是一个

97
00:08:14,090 --> 00:08:20,340
interesting case because notice. That we don't need, we don't have anywhere in this
有趣的案例因为注意到。我们不需要的东西，我们在这里没有任何地方

98
00:08:20,340 --> 00:08:25,710
formula space for the results for the e1 through en Of course once we've evaluated
公式空间用于E1到EN的结果，当然，一旦我们进行了评估

99
00:08:25,710 --> 00:08:31,650
the e1 then we need to save it somewhere and so you would think that we might see
那么我们需要把它保存在某个地方，所以你会认为我们可能会看到

100
00:08:31,650 --> 00:08:36,260
some numbers in here representing the temporary space needed to hold on to the
这里的一些数字表示需要保留的临时空间

101
00:08:36,260 --> 00:08:39,950
results of the evaluating these expressions. And the reason that we don't
计算这些表达式的结果。我们之所以不这么做

102
00:08:39,950 --> 00:08:44,960
have that in here is that. Even though those values are saved, they are indeed
把它放在这里就是这样。即使保存了这些值，它们也确实

103
00:08:44,960 --> 00:08:49,390
saved; they're not saved in the current activation record The space where the
已保存；它们未保存在当前激活记录中

104
00:08:49,390 --> 00:08:55,900
results of e1 and the results of all, any of the arguments. Yeah, again, is saved in
E1的结果和所有、任意参数的结果。是的，再一次，被保存在

105
00:08:55,900 --> 00:09:01,420
the new activation record that we're building And so, the space for the, the
我们正在构建的新激活记录，因此，

106
00:09:01,420 --> 00:09:05,260
results of e1 through en is that those values are stored in new activation record
E1到EN的结果是这些值存储在新的激活记录中

107
00:09:05,260 --> 00:09:08,730
and that storage of current activation record and we're trying to compute the
以及当前激活记录的存储，我们正在尝试计算

108
00:09:08,730 --> 00:09:14,810
number of temporaries needed to evaluate inside of the current activation And then
当前激活内部需要评估的临时数，然后

109
00:09:14,810 --> 00:09:18,800
for integer, that doesn't take any space at all to require any temporaries I mean.
对于整数，我的意思是不需要任何空间就需要任何临时函数。

110
00:09:18,800 --> 00:09:23,920
So there's zero temporaries required for that and also for a variable reference so
所以不需要任何临时函数，也不需要变量引用，所以

111
00:09:23,920 --> 00:09:30,190
it requires no temporaries. So now let's go through our example and work out
它不需要临时的东西。现在让我们来看一下我们的示例，并计算出

112
00:09:30,190 --> 00:09:37,190
systematically using the equations. How many temporaries we will need? Okay? So,
系统地使用这些方程。我们需要多少临时人员？好吧?所以,

113
00:09:37,310 --> 00:09:44,310
here for this if then else, remember it was going to be the max over the number
在这里，如果是这样的话，记住它将是最大值除以这个数字

114
00:09:44,380 --> 00:09:51,090
required to evaluate e1, well that zero. One + the number to evaluate e2 which is
需要对E1求值，很好地说是零。1+评估e2的数字，该数字为

115
00:09:51,090 --> 00:09:55,800
the second expression in the predicate so that would be one, because the number one
谓词中的第二个表达式是1，因为数字1

116
00:09:55,800 --> 00:10:02,590
requires zero temporaries and the one, the we have one hold on to x, all right? And
需要零时间和一，我们只有一次抓住x，好吗？和

117
00:10:02,590 --> 00:10:09,590
then max over the branches. So, to evaluate zero requires Zero temporaries
然后最大限度地越过树枝。因此，计算零需要零时态

118
00:10:09,990 --> 00:10:16,260
and now. We have to compute. The number required here. Okay so once again to
现在呢。我们必须进行计算。这里需要的号码。好的，再来一次

119
00:10:16,260 --> 00:10:22,100
evaluate the first expression if and else requires zero temporaries to evaluate the
计算第一个表达式IF和ELSE需要零个时态才能计算

120
00:10:22,100 --> 00:10:29,100
second one we require one. One + the number required, one + zero to evaluate
第二个我们需要一个。1+所需数字，1+0评估

121
00:10:29,390 --> 00:10:35,350
that constant we got zero temporaries and now for the last expression how many will
这个常数，我们得到了零个时间，现在最后一个表达式有多少个

122
00:10:35,350 --> 00:10:42,350
this one will require. Well this is going to require zero for this guy. One for the
这一次需要。这对这个人来说需要零。一个用于

123
00:10:44,290 --> 00:10:50,760
second argument so to evaluate fib is going to require one temporary, okay and
第二个参数，所以计算fib需要一个临时的，好的，

124
00:10:50,760 --> 00:10:57,760
then it's going to be one plus over here. We have to hold on to the results there.
那么这里就加一分了。我们必须坚持那里的结果。

125
00:10:58,190 --> 00:11:03,190
The value of x - two so how much that going to require? That is going to require
x-2的值，那么需要多少钱呢？这将需要

126
00:11:03,190 --> 00:11:09,670
the max of zero and one + zero okay so this would be one alright so we have over
最大0和1+0，好的，这是1，好的，我们结束了

127
00:11:09,670 --> 00:11:16,670
here we have one + one = two okay and now we're taking the max over two and one. So
这里我们有1+1=2，好的，现在我们取最大值除以2和1。所以

128
00:11:19,360 --> 00:11:25,180
that's two, okay? And this is the last expression in the, our if and else. So
那是两个，好吗？这是，我们的if和Else中的最后一个表达式。所以

129
00:11:25,180 --> 00:11:29,680
clearly, this if then else here will require two temporaries okay? Because the
很明显，如果是这样的话，这里需要两个临时的时间，好吗？因为

130
00:11:29,680 --> 00:11:34,029
max over the number required for either part of the predicate, the then branch and
最大值超过谓词的任一部分所需的数量，即THEN分支和

131
00:11:34,029 --> 00:11:40,180
the else branch And now, this whole expression. Requires two temporaries and
Else分支，现在，整个表达式。需要两个临时的和

132
00:11:40,180 --> 00:11:44,540
that'll be the max of the four components of the outer if then else And so then for,
这将是外部If Then和Else的四个分量中的最大值，

133
00:11:44,540 --> 00:11:51,540
for the entire expression we get two temporaries. Once it computed the number
对于整个表达式，我们得到两个临时表达式。一旦它计算出这个数字

134
00:11:56,770 --> 00:12:00,430
of temporaries required to evaluate the function value, we can add that much space
计算函数值所需的时间，我们可以添加这么多空间

135
00:12:00,430 --> 00:12:04,300
to the activation record. So, now our activation record is going to require two
添加到激活记录中。所以，现在我们的激活记录将需要两个

136
00:12:04,300 --> 00:12:10,210
+ n + nt (e) elements And so, the two of course are for the return address for the
+n+nt(E)元素，因此，这两个元素当然是

137
00:12:10,210 --> 00:12:14,770
frame pointer. The n is for the n argument of the function And then, the rest of it
帧指针。n表示函数的n自变量，然后是函数的睡觉

138
00:12:14,770 --> 00:12:20,800
is just the space required for the temporaries And now we can talk about how
只是临时建筑所需的空间，现在我们可以谈谈

139
00:12:20,800 --> 00:12:24,430
we're going to layout the activation record. We'll leave the first part of it
我们要布置激活记录。我们把它的第一部分留下来

140
00:12:24,430 --> 00:12:29,310
the same, so everything up to the return address is laid out just before. First the
相同的，所以直到寄信人地址的所有东西都是在前面布置的。首先是

141
00:12:29,310 --> 00:12:34,779
color string pointer then the and arguments in reverse order, and then the
颜色字符串指针，然后按相反顺序显示和参数，然后是

142
00:12:34,779 --> 00:12:41,410
return address. And then after the return address come the and locations or the
回邮地址。然后在返回地址之后是和位置或

143
00:12:41,410 --> 00:12:44,850
nt(e), excuse me, locations for the temporaries.
NT(E)，打扰一下，临时人员的位置。

