0
00:00:01,050 --> 00:00:04,510
Now that we've dealt with the layout of an object's attributes, we can switch
既然我们已经处理了对象属性的布局，我们可以切换

1
00:00:04,510 --> 00:00:09,420
gears and talk about how we layout its methods and how we implement dynamic dispatch.
并讨论我们如何布局它的方法，以及我们如何实现动态调度。

2
00:00:09,420 --> 00:00:16,420
So, let's consider a dispatch called e.g where e here, let's say, is a class
那么，让我们考虑一个名为，例如，这里的e是一个类的调度

3
00:00:18,289 --> 00:00:24,409
b. Okay? So what do we wanted to have happen? Well, we want to invoke the g
B，好吗？那么我们希望发生什么呢？好的，我们想调用g

4
00:00:24,409 --> 00:00:29,419
method here in class b, okay? So that seems pretty straight forward. So now let's
方法，好吗？所以这看起来相当直截了当。所以现在让我们

5
00:00:29,419 --> 00:00:34,690
consider a slightly more complicated example. What if we are invoking e.f of if
考虑一个稍微复杂一点的例子。如果我们调用的是IF的E.F.

6
00:00:34,690 --> 00:00:41,690
we're calling the f method? Well, if we have a b object. Then we are going to want
我们要调用f方法？如果我们有一个b物体。那么我们就会想要

7
00:00:42,179 --> 00:00:49,179
to evoke this method, this f method, okay, which is the f method to find in b. But if
为了调用这个方法，这个f方法，好的，这是在b中找到的f方法，但是如果

8
00:00:49,530 --> 00:00:54,989
we have an a object, we want to be sure that we invoke this method, okay, this version
我们有一个a对象，我们想确保我们调用了这个方法，好的，这个版本

9
00:00:54,989 --> 00:01:01,579
of f. Alright, and so, this f down here is said to be overridden. Okay. So, we
好的，那么这里的这个f被认为是被覆盖的。好吧。所以，我们

10
00:01:01,579 --> 00:01:08,579
have redefined. Method f in class b and this definition replaces the method definition
重新定义了。类b中的方法f，并且此定义替换了方法定义

11
00:01:11,260 --> 00:01:15,430
that b would otherwise have inherited from a so in particular in class
如果不是这样，b就会继承a so，特别是在班级中。

12
00:01:15,430 --> 00:01:22,000
c, class c also have an f method okay and if we invoke the f method, if it turns out
类c也有一个f方法，如果我们调用f方法，如果结果是

13
00:01:22,000 --> 00:01:26,700
that e here is a type c then which method should get involved? Well it would be this
这里的e是类型c，那么应该使用哪种方法呢？嗯，应该是这样的。

14
00:01:26,700 --> 00:01:33,700
one. It would be the one defining class a so all three of these classes has an f method.
一。它将定义类a，因此所有这三个类都有一个f方法。

15
00:01:34,100 --> 00:01:40,140
If the, if we do a dynamic dispatch on either a c or a object or execute
如果我们对c或对象执行动态分派或执行

16
00:01:40,140 --> 00:01:46,840
the one defining class a. If we do the dispatch on the b object, we will execute
定义类a的那个。如果我们对b对象执行分派，我们将执行

17
00:01:46,840 --> 00:01:53,840
the method defined in class b. Now every class has a fixed set of methods including
类b中定义的方法。现在每个类都有一组固定的方法，包括

18
00:01:54,460 --> 00:01:58,960
the inherited methods. So if you, if you look, if I tell you the name of
继承的方法。所以如果你，如果你看，如果我告诉你

19
00:01:58,960 --> 00:02:05,960
a class, then you know exactly which methods it has. Those methods never change
类，那么您就确切地知道它有哪些方法。这些方法永远不会改变

20
00:02:05,990 --> 00:02:11,340
at runtime. Okay? So don't be confused here because overriding is something that's
在运行时。好吧?所以不要在这里感到困惑，因为凌驾于一切之上的东西

21
00:02:11,340 --> 00:02:15,730
done at compile time is basically a static property. South compiler can figure
在编译时完成基本上是一个静电属性。南方编译器可以计算出

22
00:02:15,730 --> 00:02:20,360
out even though you can redefine methods in subclasses the compiler can figure out
即使您可以在子类中重新定义方法，编译器也可以找出

23
00:02:20,360 --> 00:02:25,860
a compile time all the methods of a particular class. Methods never change while
A编译时特定类的所有方法。方法在执行以下操作时从不更改

24
00:02:25,860 --> 00:02:30,440
the prog ram is executing. Alright So, a dispatch tape of there's a table of
程序内存正在执行。好的，那么，一盘调度录像带上有一张桌子

25
00:02:30,440 --> 00:02:35,819
some sort is used to index these methods and this is just in the ray of method entry
使用某种排序来索引这些方法，这只是在方法条目的射线中

26
00:02:35,819 --> 00:02:40,069
point. So, essentially for every method of the class there's an entry in the
重点。因此，基本上对于类的每个方法，在

27
00:02:40,069 --> 00:02:44,640
ray for that method. And just like with attributes, the method f is going to
雷用那个方法。就像属性一样，方法f将

28
00:02:44,640 --> 00:02:51,640
live at the fixed offset. In the dispatch table for a class and all of its subclasses
生活在固定的偏移量上。在类及其所有子类的调度表中

29
00:02:52,280 --> 00:02:56,600
so once we determine the position that a method lives in. It lives
所以一旦我们确定了方法所处的位置。它活着

30
00:02:56,600 --> 00:03:03,600
in the dispatch table; it will stay there for any subclasses of that class. So let's
在调度表中；它将为该类的任何子类留在那里。所以让我们

31
00:03:04,959 --> 00:03:09,150
take a look at our example again and just a reminder the structure of the example we
再看一下我们的示例，只是提醒一下我们的示例的结构

32
00:03:09,150 --> 00:03:16,150
have class a and now we only really care about the method so class a define an f method
有a类，现在我们真正关心的是方法，所以a类定义了一个f方法

33
00:03:17,680 --> 00:03:24,680
and then we have class b which inherits from a. And that define the g method.
然后我们有类b，它继承自a，它定义了g方法。

34
00:03:26,590 --> 00:03:33,590
And then there was the class which also inherits from a which defines an h method.
然后还有一个类，它也是从定义h方法的a继承而来的。

35
00:03:35,780 --> 00:03:42,780
Alright so those three classes and these methods, Okay? And so the dispatch table
好的，这三个类和这些方法，好吗？因此调度表

36
00:03:44,540 --> 00:03:50,880
for class a only has one method in it so it's also at zero. We store a pointer
因为类a中只有一个方法，所以它也是零。我们存储一个指针

37
00:03:50,880 --> 00:03:57,360
to the code for the f method define an a, okay? So this is actually literally
f方法的代码定义a，好吗？所以这实际上是字面意思

38
00:03:57,360 --> 00:04:02,920
just a pointer to the first instruction of the code that will run method
只是指向将运行方法的代码的第一条指令的指针

39
00:04:02,920 --> 00:04:07,940
a. So this is a pointer to the caller side or the calling sequence or the
a.所以这是指向调用方的指针，或者是指向调用序列的指针，或者是指向

40
00:04:07,940 --> 00:04:14,940
label labeled instruction as the entry point for the method. Now, what about let's
将标记为Instruction的标签标记为该方法的入口点。现在，让我们

41
00:04:15,709 --> 00:04:21,579
take a look next actually at class c. Okay? So class inherits from a. So what's
接下来我们来看看c班，好吗？所以类继承自。那么

42
00:04:21,579 --> 00:04:25,059
going to happen with all the methods of a and they're going to be at the
所有的方法都会发生，他们会在

43
00:04:25,059 --> 00:04:31,800
same off sets. So in particular, the f method will appear at offset zero in class
同样的抵销。因此，特别要注意的是，f方法将出现在类中的偏移量为零的位置

44
00:04:31,800 --> 00:04:36,379
and this points to the same method as the one in a And so this inherits that method
中的方法指向相同的方法，因此它继承了该方法

45
00:04:36,379 --> 00:04:42,110
from a and then class c defines its own method h and so in the next position of the
，然后类c定义了它自己的方法h，因此在

46
00:04:42,110 --> 00:04:49,110
table goes the pointer to the code for h. And, you know, there have been more methods
表将指针指向h的代码。

47
00:04:49,479 --> 00:04:56,479
defined in this classes than they would have appeared you know, laid out in
在这个类中定义的，而不是它们本来会出现的，您知道的，在

48
00:04:56,710 --> 00:05:00,330
textual order just like for the attributes. So, if there have been, say, two
文本顺序与属性的顺序相同。所以，如果有，比方说，有两个

49
00:05:00,330 --> 00:05:05,610
methods defined in a, then there will be two entries here fo r the first method
中定义的方法，则第一个方法在此处将有两个条目

50
00:05:05,610 --> 00:05:10,339
and the second method define an a and then c define a three method then there will be
第二个方法定义a，然后c定义三个方法，那么将有

51
00:05:10,339 --> 00:05:17,339
three more entries in the table and so on. Okay. Now the interesting case is what happens
表中还有三个条目，依此类推。好吧。现在有趣的情况是发生了什么

52
00:05:18,370 --> 00:05:24,759
in class b. So in class b the f method is redefined and I forgot to indicate
在类b中。所以在类b中重新定义了f方法，但是我忘了指出

53
00:05:24,759 --> 00:05:29,199
that so let me just indicate that up here so the f method, we have a new definition
那么让我来说明一下，在这里，f方法，我们有了一个新的定义

54
00:05:29,199 --> 00:05:34,699
of the f method in class b. Okay so the important thing to see here is
类b中的f方法。好的，这里要看到的重要一点是

55
00:05:34,699 --> 00:05:40,569
that the pointer to the code for the f method lives in the same position. It's still
f方法的代码指针位于同一位置。它现在还在

56
00:05:40,569 --> 00:05:45,759
the first entry in the table, okay so the position of the f method in the dispatch
表中的第一个条目，好的，那么f方法在分派中的位置

57
00:05:45,759 --> 00:05:49,900
table for class b is exactly the same that never changes. What's difference
类b的表是完全相同的，永远不会改变。有什么不同

58
00:05:49,900 --> 00:05:55,159
is just the contents of that location. The first entry in the table here points to a
就是那个地方的东西。该表中的第一个条目指向一个

59
00:05:55,159 --> 00:06:00,039
different function. It points to the method that was defined in b instead of the
功能不同。它指向在b中定义的方法，而不是

60
00:06:00,039 --> 00:06:05,529
one that was defined in a. And then since b defines some additional methods or
在a中定义的方法。然后由于b定义了一些附加的方法或

61
00:06:05,529 --> 00:06:12,529
one additional method that gets laid out after the methods for a. You may recall a
的方法之后布局的另一个方法。您可能还记得

62
00:06:14,909 --> 00:06:19,689
while ago that we talked about the object header and we mentioned this thing called
而在前面，我们讨论了对象头，并且我们提到了名为

63
00:06:19,689 --> 00:06:22,860
the dispatch pointer so this would remind ourselves what goes in the object header.
调度指针，所以这会提醒我们对象头中有什么。

64
00:06:22,860 --> 00:06:28,800
There is the tag and then there is the size and then there was a dispatch pointer
先是标签，然后是大小，然后是分派指针

65
00:06:28,800 --> 00:06:35,800
so And then following dispatch pointer where all the, all the attributes of the class
因此，然后跟随调度指针，其中类的所有、所有属性

66
00:06:38,110 --> 00:06:44,039
And now this dispatch pointer is just a pointer to the table of methods for
现在这个分派指针只是一个指向的方法表的指针

67
00:06:44,039 --> 00:06:51,039
that class, okay? So this would be a pointer to the table. That contains all the
那节课，好吗？所以这将是指向该表的指针。它包含所有

68
00:06:51,210 --> 00:06:56,419
entries for the methods, all the entry points of the methods for that class. And
方法的条目，即该类的方法的所有入口点。和

69
00:06:56,419 --> 00:07:01,099
the reason for using this level of in direction and so, why do we have this pointer
使用这一级别的In Direction的原因，那么，为什么我们有这个指针

70
00:07:01,099 --> 00:07:05,749
to a separate table and so, why are the methods laid out like that when all
添加到一个单独的表中，那么，为什么所有的方法都是这样排列的呢？

71
00:07:05,749 --> 00:07:09,589
the attributes are just embedded directly in the class And we could, if we
属性只是直接嵌入到类中，如果我们

72
00:07:09,589 --> 00:07:15,999
wanted to just embed all the functions directly inside the object and, ad, you know,
我只想把所有的函数直接嵌入到对象中，而且，你知道，

73
00:07:15,999 --> 00:07:20,649
out this whole table inside t object and, and not have this extra pointer that
在t对象和内部取出整个表，并且没有这个额外的指针

74
00:07:20,649 --> 00:07:25,610
we have to, we have to maintain and follow And in the reason for this is th at the attributes
我们必须，我们必须保持和遵循，原因在于这些属性

75
00:07:25,610 --> 00:07:31,960
are, can be updated. Okay, So, the attributes for a and object can be unique
都是，可以更新的。好的，因此，AND对象的属性可以是唯一的

76
00:07:31,960 --> 00:07:36,309
object. Every object and have its own set of attributes so alright But the functions,
对象。每个对象都有自己的一组属性，所以好吧，但是函数，

77
00:07:36,309 --> 00:07:41,770
the methods for an object never change. And so the same object table can be
对象的方法永远不会更改。因此，相同的对象表可以

78
00:07:41,770 --> 00:07:48,639
shared Between all the objects of a given class. So if I have 100 a objects well
在给定类的所有对象之间共享。所以如果我有100a的物体

79
00:07:48,639 --> 00:07:53,379
then I might have 100 different version of the attributes and so each a objects
那么我可能有100个不同版本的属性，所以每个都是对象

80
00:07:53,379 --> 00:07:56,809
has its own copy of the attributes. But all those 100 a objects will
有自己的属性副本。但所有这100个a对象都会

81
00:07:56,809 --> 00:08:01,330
have the same methods and I can save a lot of space by having them share a common
具有相同的方法，并且我可以通过让它们共享一个公共空间来节省大量空间

82
00:08:01,330 --> 00:08:08,330
table of the methods And again every method of the class or every class is
表，同样，类的每个方法或每个类都

83
00:08:08,929 --> 00:08:15,270
a sign and offset and we'll call that Os of f. In the dispatch table compiled times.
符号和偏移量，我们将在分派表编译时间中调用f的O。

84
00:08:15,270 --> 00:08:18,800
So the job of the compiler to figure out all the methods of the class and
因此编译器的工作是找出类的所有方法和

85
00:08:18,800 --> 00:08:23,800
then assign each of those methods, a fixed position, a fixed offset in that dispatch
然后在派单中为这些方法中的每一个分配一个固定位置、固定偏移量

86
00:08:23,800 --> 00:08:30,800
table, So to wrap up, how do we implement dynamic dispatch? So let's say we
表，那么总而言之，我们如何实现动态调度呢？所以我们可以说我们

87
00:08:30,869 --> 00:08:37,469
have a dispatch to an expression e and we're calling the f method. So, here's the,
对表达式e进行分派，我们将调用f方法。所以，这就是，

88
00:08:37,469 --> 00:08:41,750
a slightly simplified version of the sequence of steps. So first, we evaluate the
步骤序列的略微简化的版本。因此，首先，我们评估

89
00:08:41,750 --> 00:08:47,949
expression e and that's going to give us back an object x. Okay, and then we are
表达式e，它会给我们返回一个对象x。好的，然后我们

90
00:08:47,949 --> 00:08:52,040
going to get the dispatch table for x, where that does come from. Well, it's in the
去拿x的调度表，它确实是从哪里来的。嗯，它在

91
00:08:52,040 --> 00:08:56,350
header of x so we can just take the object x itself and we know that in every
头，所以我们可以只取对象x本身，我们知道在每个

92
00:08:56,350 --> 00:09:03,350
object at the, in the third word there is a dispatch pointer for the, that's appropriate
对象，在第三个单词中，有一个用于的调度指针，这是合适的

93
00:09:03,420 --> 00:09:08,170
to the class of x. So, we take that table and then we look up the entry point
到x的类。所以，我们取那张表，然后我们查找入口点

94
00:09:08,170 --> 00:09:14,750
of f at the offset For f in that dispatch table And then we'll jump to that
的偏移量，然后我们跳到那个调度表中

95
00:09:14,750 --> 00:09:19,980
to that address, okay? That's the entry point of the function and, and when we do
去那个地址，好吗？这是函数和的入口点，当我们这样做时

96
00:09:19,980 --> 00:09:25,699
that, we're buying self to x. So the, the self parameter inside of the f method will
这就是说，我们把self买给x，所以f方法中的self参数将

97
00:09:25,699 --> 00:09:26,980
be the x object.
成为x对象。

