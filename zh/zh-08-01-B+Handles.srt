0
00:00:01,079 --> 00:00:03,810
At this point we know enough to state the second important
在这一点上，我们所知道的足以说明第二个重要的

1
00:00:03,810 --> 00:00:07,770
fact about bottom- up parsing. So in shift reduce parsing handles appear
关于自下而上解析的事实。因此在Shift Reduce中出现解析句柄

2
00:00:07,770 --> 00:00:12,759
only at the top of the stack Never in sight Side, and in fact this is what justifies
只有在堆栈的顶部，永远不会出现在看不见的一边，事实上，这就是为什么要证明这一点的原因

3
00:00:12,759 --> 00:00:16,840
using a stack because that string to the left of our focus point we know
使用堆栈是因为我们知道焦点左边的那个字符串

4
00:00:16,840 --> 00:00:19,930
that all the action will take place immediately to the left of the focus point.
所有的行动都将发生在焦点的左边。

5
00:00:19,930 --> 00:00:25,060
We won't have to dive down to the string to look at its [inaudible] and therefore
我们不必潜水到琴弦旁去看它的[听不见]，因此

6
00:00:25,060 --> 00:00:31,130
the stack will be sufficient. So here's an informal proof, that handles only
堆栈就足够了。所以这里有一个非正式的证据，它只处理

7
00:00:31,130 --> 00:00:34,580
appear at the top of the stack. And this is by induction on the number of reduce
显示在堆栈的顶部。这是通过对约简的数量进行归纳法得出的

8
00:00:34,580 --> 00:00:39,070
moves. So this is true initially because the stack is empty. And so, we don't,
动起来。最初这是正确的，因为堆栈是空的。所以，我们没有，

9
00:00:39,070 --> 00:00:42,080
you know, so the only possible reduction is at the top of the stack if there's
你知道，所以唯一可能的减少是在堆栈的顶部，如果有

10
00:00:42,080 --> 00:00:48,360
an epsilon move, to make. And immediately after we reduce, the right most
一个epsilon动作，去做。紧接着我们减少了，最正确的

11
00:00:48,360 --> 00:00:51,909
non terminal is going to be on top of the stack. So immediately after we perform
非终端将位于堆栈的顶部。所以我们表演完之后马上

12
00:00:51,909 --> 00:00:57,580
a reduction, we have a, our stack, and then we have a, non terminal. And then our
一个减法，我们有一个，我们的堆栈，然后我们有一个，非终结点。然后我们的

13
00:00:57,580 --> 00:01:04,580
vertical bar, And this is the right most non terminal. And since this is the right
竖条，这是最右边的非终端。既然这是正确的

14
00:01:05,600 --> 00:01:10,850
most derivation that means that the next handle has to be somewhere to the right. The
大多数派生，这意味着下一个句柄必须在右侧的某个位置。这个

15
00:01:10,850 --> 00:01:16,680
next handle has to be, It has to include something that, and you know possibly
下一个句柄必须是，它必须包括一些你可能知道的东西

16
00:01:16,680 --> 00:01:20,780
include some of this stuff. But it's either right here at the current focus
包括一些这样的东西。但它要么就在当前的焦点所在

17
00:01:20,780 --> 00:01:25,100
point, or it's to the right, Because we can't be doing any reductions to the left
点，或者它是向右的，因为我们不能向左做任何减量

18
00:01:25,100 --> 00:01:30,120
of the rightmost non-terminal. And so it's gonna require a sequence of shift moves
最右边的非终结点的。所以这需要一系列的换班动作

19
00:01:30,120 --> 00:01:33,530
to reach the next handle. So once we have this non-terminal on top of the stack,
才能到达下一个把手。所以一旦我们将这个非终端放在堆栈的顶部，

20
00:01:33,530 --> 00:01:37,030
it is by definition the rightmost non-terminal, and so the next handle has to
根据定义，它是最右边的非终端，因此下一个句柄必须

21
00:01:37,030 --> 00:01:43,979
be somewhere to the right of that. Therefore in shift reduce parsing handles
就在那右边的某个地方。因此，在Shift Reduce分析句柄中

22
00:01:43,979 --> 00:01:47,690
always appear at the top of the stack. Handles are never to the left of the right
始终显示在堆栈的顶部。手柄永远不会在右边的左边

23
00:01:47,690 --> 00:01:52,450
most knot terminal and this is why shift and reduce moves are sufficient. The shift
大多数结都是末端，这就是为什么Shift和Reduce移动就足够了。这种转变

24
00:01:52,450 --> 00:01:57,540
move only moves the vertical part to the right because we never need to move it left.
Move只将垂直部分向右移动，因为我们从来不需要向左移动它。

25
00:01:57,540 --> 00:02:01,720
And bottom of parsing algorithms are based on recognizing handles. So as we saw
而底层的解析算法是基于识别句柄的。所以正如我们所看到的

26
00:02:01,720 --> 00:02:05,190
in the example at the beginning of this video. Just because you have a right hand
在本视频开头的示例中。仅仅因为你有一只右手

27
00:02:05,190 --> 00:02:10,130
side on top of the stack that doesn't mean that it's a handle. And so we need to be smarter
在堆栈顶部的一侧，这并不意味着它是一个句柄。所以我们需要变得更聪明

28
00:02:10,130 --> 00:02:12,000
about where we perform our
关于我们在哪里表演我们的

