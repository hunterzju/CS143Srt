0
00:00:04,029 --> 00:00:07,439
In this video, we're going to continue our discussion of type checking and cool with
在这段视频中，我们将继续讨论类型检查，并通过

1
00:00:07,439 --> 00:00:14,439
the rules for type checking methods and method calls. So here's the situation, we
类型检查方法和方法调用的规则。所以情况是这样的，我们

2
00:00:15,690 --> 00:00:19,829
want to type check a method call, let's say that we have a dispatch on some
我想键入check a方法调用，假设我们在一些

3
00:00:19,829 --> 00:00:24,029
expression easier, and we're calling some method named F, and we have some arguments
表达式更简单，我们调用一些名为F的方法，我们有一些参数

4
00:00:24,029 --> 00:00:28,090
E one through E N. Well, so clearly we're gonna type check E zero, it's gonna have
从E 1到E N，很明显我们要输入检查E 0，它会有

5
00:00:28,090 --> 00:00:32,340
some type E zero, and similarly we're gonna type check all of the arguments and
一些类型为E的零，类似地，我们将键入check所有参数，然后

6
00:00:32,340 --> 00:00:36,710
they're gonna have some types, and then the question is, what is the return type
它们会有一些类型，然后问题是，返回类型是什么

7
00:00:36,710 --> 00:00:40,769
of this method call, what value, what kind of value do we get back after we call this
在调用这个方法之后，我们会得到什么值，会得到什么样的值

8
00:00:40,769 --> 00:00:46,129
method? And as you can probably see we're in a very similar situation here that we
方法呢？正如你可能看到的，我们在这里的情况非常相似，我们

9
00:00:46,129 --> 00:00:50,769
were in before when we were typing check the variable reference. We have this name
都在前面，当我们键入check变量引用时。我们有这个名字

10
00:00:50,769 --> 00:00:56,339
F and we don't know anything about what it does, we don't know the behavior of F is
我们对它的作用一无所知，我们不知道F的行为

11
00:00:56,339 --> 00:01:01,059
unless we have some information about F's behavior, we can't really say what kind of
除非我们有一些关于F的行为的信息，否则我们真的不能说是哪种

12
00:01:01,059 --> 00:01:07,600
value it is going to return. An added wrinkle in cool is that method object
它将返回的价值。在Cooler中增加了一条皱纹，那就是方法对象

13
00:01:07,600 --> 00:01:12,439
identifiers live in different name spaces. That is, it is possible in the same scope
标识符位于不同的名称空间中。也就是说，在相同的范围内是可能的

14
00:01:12,439 --> 00:01:17,659
to have a method called foo and also an object called foo and we won't get them
有一个名为foo的方法，还有一个名为foo的对象，但是我们不会得到它们

15
00:01:17,659 --> 00:01:21,659
confused. They are different enough and used differently enough in the language
很困惑。它们有很大的不同，在语言中的用法也有很大的不同

16
00:01:21,659 --> 00:01:24,990
that we can always tell when we're talking about the object foo and when we're
当我们谈论物体Foo的时候，我们总是可以分辨出，当我们

17
00:01:24,990 --> 00:01:28,909
talking about the method foo. But what this means in effect is that there's two
说到方法foo。但这实际上意味着有两个

18
00:01:28,909 --> 00:01:34,740
different environments. One for objects and one for methods and so in the type
不同的环境。一个用于对象，另一个用于类型中的方法，依此类推

19
00:01:34,740 --> 00:01:38,479
rules, this is going to be reflected by having a separate mapping a separate
规则，这将通过将单独的映射设置为单独的

20
00:01:38,479 --> 00:01:44,130
method environment that's going to record the signature of each of the methods. And
将记录每个方法的签名的方法环境。和

21
00:01:44,130 --> 00:01:48,210
a signature, as is a standard name that you'll probably hear used in other
签名，因为它是您可能在其他应用程序中听到的标准名称

22
00:01:48,210 --> 00:01:54,259
contexts, but the signature of a function is just its input and output types. And so
上下文，但是函数的签名仅仅是它的输入和输出类型。因此，

23
00:01:54,259 --> 00:01:58,920
this table, m, is gonna take the name of a class. It's gonna take the name of a
这张桌子，m，将以班级的名字命名。它将以一个

24
00:01:58,920 --> 00:02:04,229
method in that class and is just gonna tell us what are the argument types of the
方法，并且只会告诉我们

25
00:02:04,229 --> 00:02:08,950
methods. So all but the last type in the list here is one of the arguing types of
方法。因此，除了列表中的最后一种类型之外，这里的所有类型都是

26
00:02:08,949 --> 00:02:14,610
the method and then the last type is the result type. That's the type of the return
方法，然后最后一个类型是结果类型。这就是退货的类型

27
00:02:14,610 --> 00:02:18,330
value. So the way we are going to write the method signature is just as a tutor or
价值。因此，我们编写方法签名的方式只是作为一个导师或

28
00:02:18,330 --> 00:02:23,950
a list of types, the first, all but the last one taken together are the, are the
类型列表，第一个，除最后一个之外的所有类型都是，是

29
00:02:23,950 --> 00:02:27,819
types of the arguments in order. And then the very last one is the type of the
按顺序排列的参数类型。最后一个问题是

30
00:02:27,819 --> 00:02:34,370
result And so an entry like this in our method, environment just means that f has
结果，所以在我们的方法中，像这样的条目，环境只是意味着f具有

31
00:02:34,370 --> 00:02:38,360
a signature that looks like this. It takes in arguments, with the respective types
一个看起来像这样的签名。它接受具有各自类型的参数

32
00:02:38,360 --> 00:02:45,360
and it returns something of type t n plus one. So with the method environment added
它返回的是tn加1类型的东西。所以添加了方法环境之后

33
00:02:46,290 --> 00:02:50,870
to our rules, now we can write a rule for dispatch. So notice, first of all, that we
按照我们的规则，现在我们可以写一条规则来派遣了。所以请注意，首先，我们

34
00:02:50,870 --> 00:02:55,720
have these two mappings, one for object identifiers and one for method names on
有这两个映射，一个用于对象标识符，另一个用于方法名

35
00:02:55,720 --> 00:03:01,310
the left hand side of the turnstile. We have to propagate that method environment
旋转栅门的左手边。我们必须传播该方法环境

36
00:03:01,310 --> 00:03:06,540
through all the typing for the sub expressions and for the case of method
通过对子表达式和方法的所有类型进行

37
00:03:06,540 --> 00:03:12,439
dispatch, we just type The, type of the expression we're dispatching to e zero,
分派，我们只需键入，我们要分派到e0的表达式的类型，

38
00:03:12,439 --> 00:03:17,640
and all of the arguments and get types t one through t n, and then we look up the
以及所有的参数和获取类型t1到tn，然后我们查找

39
00:03:17,640 --> 00:03:24,390
type of f in the class t zero. So, what class are we dispatching to? Well, that's
类t 0中的f的类型。那么，我们要派到哪个班呢？嗯，那是

40
00:03:24,390 --> 00:03:28,680
gonna be to the class of e zero And so where do we look up m in our environment.
将会是e0的班级，那么在我们的环境中，我们应该在哪里查找m呢？

41
00:03:28,680 --> 00:03:34,200
Where there better be a method called F to find in class T0, and it must have some
在类T0中最好有一个名为F的方法来查找，并且它必须有一些

42
00:03:34,200 --> 00:03:39,430
signature with the right number of arguments. And then, the actual arguments
使用正确数量的参数签名。然后，实际的论点是

43
00:03:39,430 --> 00:03:44,010
that we're passing, the E1 through E-N, they're types have to be sub-types of the
我们正在通过的E1到E-N，它们的类型必须是

44
00:03:44,010 --> 00:03:49,269
declared formal parameter. So here, the signature of F. Says that, for example,
声明的形参。在这里，F.的签名是这样说的，例如，

45
00:03:49,269 --> 00:03:54,870
the first argument of f has type t one prime, and so we're going to require that
f的第一个参数的t类型是一个素数，所以我们需要

46
00:03:54,870 --> 00:04:00,409
the type of e one be some type t one such that t one is a sub type of t one prime.
e_1类型是某种类型t_1，使得t_1是t_1素数的子类型。

47
00:04:00,409 --> 00:04:05,829
And similarly for all the other arguments of the method call. And if all of that
对于该方法调用的所有其他参数也是如此。如果所有这些都是

48
00:04:05,829 --> 00:04:09,980
checks out, if that has a signature like this, and all the sub type requirements on
签出，如果它有这样的签名，以及上的所有子类型要求

49
00:04:09,980 --> 00:04:15,519
the actual arguments and the formal arguments match, then we're going to say
实际论点和形式论点相匹配，那么我们就说

50
00:04:15,519 --> 00:04:21,209
that the entire expression. [inaudible] Return something of type t n plus one the
整个表达方式。[听不见]返回类型为t，n加上1的

51
00:04:21,209 --> 00:04:28,030
return type of the method. The typing rule for static dispatch is very similar to the
该方法的返回类型。静电调度的键入规则与

52
00:04:28,030 --> 00:04:32,580
rule for regular dispatch. So recall that, syntactically, the only thing that's
定期派遣的规则。所以请记住，从句法上讲，唯一

53
00:04:32,580 --> 00:04:36,030
different is that the programmer writes the name of the class at which they wish
不同之处在于，程序员可以随心所欲地编写类的名称

54
00:04:36,030 --> 00:04:42,210
to run the, the method. So instead of running the method F as defined in the
要运行，该方法。因此，不是运行方法F，而是运行

55
00:04:42,210 --> 00:04:46,120
class E0, whatever that class happens to be, we're going to run whatever that
类E0，不管这个类是什么，我们都会运行

56
00:04:46,120 --> 00:04:51,340
method F happens to be in some ancestor class of the class of E0. And how is that
方法F恰好在E0类的某个祖先类中。那是怎么回事呢？

57
00:04:51,340 --> 00:04:55,740
expressed in the type rules? Well once again, we type E0 and all of the
是否在类型规则中表示？再一次，我们键入E0和所有

58
00:04:55,740 --> 00:05:02,000
arguments. And now we require that, whatever the type was we discovered for
争论。现在我们要求，无论我们发现的是什么类型

59
00:05:02,000 --> 00:05:08,710
E0, it has to be a sub-type of T. So T has to be an ancestor type in the class
E0，则它必须是T的子类型。因此，T必须是类中的祖先类型

60
00:05:08,710 --> 00:05:14,770
hierarchy of the type of E0. And moreover, that class T had better have a method
E0类型的层次结构。而且，T类最好有一个方法

61
00:05:14,770 --> 00:05:19,889
called F. That has the right number of our units, with the right kind of types, such
叫做F，它有合适数量的单元，有合适的类型，比如

62
00:05:19,889 --> 00:05:25,650
that all the type constraints work out, that the, actual argument types are sub
所有类型约束都起作用，实际的参数类型是子类型

63
00:05:25,650 --> 00:05:29,990
types of the corresponding formal argument types, and then if all of that is true,
类型，然后如果所有这些都为真，

64
00:05:29,990 --> 00:05:34,979
we'll be able to conclude that the entire dispatch expression has a type t n plus
我们将能够得出结论，整个分派表达式的类型为tn+

65
00:05:34,979 --> 00:05:38,110
one which is the return type of the method.
一个是该方法的返回类型。

