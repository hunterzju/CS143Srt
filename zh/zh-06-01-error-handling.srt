0
00:00:03,709 --> 00:00:07,069
In this video, we're going to take a rest a little bit and talk about how compilers
在这段视频中，我们将稍微看看睡觉，然后谈谈编译器是如何

1
00:00:07,069 --> 00:00:10,750
handle errors and in particular, what kind of error handling functionality is
处理错误，特别是什么类型的错误处理功能

2
00:00:10,750 --> 00:00:17,750
available in parsers. Compiler has two relatively distinct jobs. The first is to
在解析器中可用。编译器有两个相对不同的工作。第一个是

3
00:00:20,449 --> 00:00:25,939
translate valid programs. That is if it gets a program from a programmer that is
翻译有效的程序。也就是说，如果它从程序员那里获得程序，即

4
00:00:25,939 --> 00:00:30,319
correct, is a valid program, it needs to produce correct code for that program.
正确，是一个有效的程序，它需要为该程序生成正确的代码。

5
00:00:30,319 --> 00:00:37,319
Now, distinct from that task is the job of giving good feedback. For erroneous
现在，与这项任务不同的是提供良好反馈的工作。对于错误的

6
00:00:37,320 --> 00:00:41,320
program and even just detecting the invalid programs we don't want to compile
程序，甚至只检测我们不想编译的无效程序

7
00:00:41,320 --> 00:00:46,129
any program that isn't a valid program in the programming language. And programming
在编程语言中不是有效程序的任何程序。和编程

8
00:00:46,129 --> 00:00:51,789
languages have many different kinds of errors. Here's just a few. So for example,
语言有许多不同类型的错误。这里只有几个。举个例子，

9
00:00:51,789 --> 00:00:57,019
we might have lexical errors, that's for using characters that don't even appear in
我们可能会有词汇错误，这是因为我们使用的字符甚至没有出现在

10
00:00:57,019 --> 00:01:01,039
any balanced symbol in the language and these would be detected by lexical
语言中的任何平衡符号都会被词法检测到

11
00:01:01,039 --> 00:01:05,990
analysis phase. We could have syntax errors and this would be the parsing
分析阶段。我们可能会有语法错误，这就是解析

12
00:01:05,990 --> 00:01:10,299
errors when all the individual lexical units are correct but they're assembled in
当所有单独的词汇单元都是正确的，但它们被组合在

13
00:01:10,299 --> 00:01:15,890
some way that doesn't make sense and we don't know how to compile it. There could
这在某种程度上说不通，而且我们不知道如何编译它。可能会有

14
00:01:15,890 --> 00:01:20,020
be semantic errors for example when types mismatch. Here I've declared excess in
是语义错误，例如，当类型不匹配时。在这里我已经声明了超额

15
00:01:20,020 --> 00:01:23,840
integer and use it as a function and that would be the job of type checker to catch
整数，并将其用作函数，这将是类型检查器要捕获的工作

16
00:01:23,840 --> 00:01:30,840
those. And then Actually, there may be many errors in your program that are not
那些。实际上，您的程序中可能会有许多不是这样的错误

17
00:01:31,790 --> 00:01:36,360
errors of the programming language. The program you wrote is actually a valid
编程语言错误。您编写的程序实际上是有效的

18
00:01:36,360 --> 00:01:39,189
program but it doesn't do what you intended. You're likely bugging your
程序，但它没有执行您想要的操作。你很可能在窃听你的

19
00:01:39,189 --> 00:01:44,229
program and so while the compiler can detect many kinds of errors, it doesn't
程序，因此尽管编译器可以检测到许多类型的错误，但它不能

20
00:01:44,229 --> 00:01:48,430
detect all of them and, you know once we get past what the compiler can do, then
检测所有它们，您知道，一旦我们了解了编译器所能做的事情，那么

21
00:01:48,430 --> 00:01:55,430
it's up to testers and users to find the rest of the problems in the program. So,
这是由测试人员和用户来找到程序中问题的睡觉。所以,

22
00:01:56,460 --> 00:02:00,670
what are the requirements for a good error handling? Well, we want the [inaudible]
良好的错误处理有哪些要求？嗯，我们想要[听不见的]

23
00:02:00,670 --> 00:02:04,390
report errors accurately and clearly so that we can identify what the problem is
准确而清晰地报告错误，以便我们可以确定问题所在

24
00:02:04,390 --> 00:02:08,820
quickly and fix it. The compiler itself should recover from the error, error
快点把它修好。编译器本身应该从错误、错误

25
00:02:08,820 --> 00:02:13,280
quickly. So when it hits an error, it shouldn' t take a long time to make a
快点。因此，当它遇到错误时，应该不会花很长时间。

26
00:02:13,280 --> 00:02:17,110
[inaudible] on what to do before proceeding. And finally, we don't want
[听不见]在继续之前要做什么。最后，我们不希望

27
00:02:17,110 --> 00:02:21,160
error handling to slow down the compilation of valid code. That is, we
用于减慢有效代码编译速度的错误处理。就是我们

28
00:02:21,160 --> 00:02:26,110
shouldn't pay a price for the error handling if we're not really using it. I'm
如果我们不是真的在使用错误处理，就不应该为它付出代价。我

29
00:02:26,110 --> 00:02:31,000
going to talk about three different kinds of error handling. Panic mode and error
我们将讨论三种不同类型的错误处理。死机模式和错误

30
00:02:31,000 --> 00:02:36,530
productions are the two that are used in current compiler. So these are actually
产生式是当前编译器中使用的两种。所以这些实际上是

31
00:02:36,530 --> 00:02:42,530
things that people use today. Automatic local or global correction is an idea that
今天人们使用的东西。自动局部或全局校正是一种

32
00:02:42,530 --> 00:02:46,250
was pursued excessively in the past. And I think it's historically quite interesting
在过去被过分追求。我认为这在历史上是很有趣的

33
00:02:46,250 --> 00:02:52,250
particularly as a contrast what people do today and also why people try to do it a
特别是作为对比，今天的人们做什么，也是为什么人们试图这样做的原因

34
00:02:52,250 --> 00:02:58,670
long ago. [inaudible] is the simplest and most popular method of error recovery
很久以前了。[听不见]是最简单、最流行的错误恢复方法

35
00:02:58,670 --> 00:03:03,090
that's widely used and the basic ideas that when an error is detected, the parser
它被广泛使用，其基本思想是当检测到错误时，解析器

36
00:03:03,090 --> 00:03:08,290
is going to begin discarding tokens until one that has a clear role in the language
将开始丢弃令牌，直到一个在语言中具有明确角色的令牌

37
00:03:08,290 --> 00:03:11,780
is found and that's going to try to restart itself and continue from that
将尝试重新启动并从该位置继续

38
00:03:11,780 --> 00:03:17,120
point on. And these tokens, the ones that it's looking for are called the
指向。而这些令牌，它正在寻找的那些被称为

39
00:03:17,120 --> 00:03:22,910
Synchronizing Tokens. And these are just tokens that have a well-known role in the
正在同步令牌。这些只是一些令人熟知的代币，在

40
00:03:22,910 --> 00:03:27,460
language and so that we can reliably identify where we are. So, a typical
这样我们就可以可靠地识别我们所在的位置。所以，一个典型的

41
00:03:27,460 --> 00:03:31,060
strategy might be to try to skip to the end of a statement or to the end of a
策略可能是尝试跳到语句末尾或

42
00:03:31,060 --> 00:03:35,600
function if an error is found in a statement or function and then begin
函数(如果在语句或函数中发现错误)，然后开始

43
00:03:35,600 --> 00:03:40,490
parsing either the next statement or the next function. So let's look at a simple
解析下一条语句或下一函数。那么让我们来看一个简单的

44
00:03:40,490 --> 00:03:45,340
hypothetical example of panic mode error recovery. So here's an expression. Clearly
假设的死机模式错误恢复示例。这是一个表达式。很明显

45
00:03:45,340 --> 00:03:50,070
it has a problem. We shouldn't have two plus signs in a row so something has gone
它有一个问题。我们不应该连续有两个加号，所以出了点问题

46
00:03:50,070 --> 00:03:54,790
wrong here at the second plus and what's going to happen is the parser is going to
第二个加号出错，接下来会发生的是解析器将

47
00:03:54,790 --> 00:03:57,940
come along. The parser is going to be proceeding from left to right. It's gonna
跟我来。解析器将从左向右前进。它将会是

48
00:03:57,940 --> 00:04:01,180
see the open-paren, it's gonna see the number one, it's gonna see the plus
看开场-帕伦，它会看到第一名，它会看到加号

49
00:04:01,180 --> 00:04:04,980
everything is good and then it's gonna see the second plus and it's not gonna know
一切都很好，然后它会看到第二个加号，它不会知道

50
00:04:04,980 --> 00:04:10,160
what to do. It's going to realize. That it's stuck and that there's no expression
该怎么做。它会意识到。它卡住了，没有表情

51
00:04:10,160 --> 00:04:15,610
in the language that has two p lus signs in a row and it needs to do something to
在具有连续两个手势的语言中，它需要做些什么来

52
00:04:15,610 --> 00:04:19,620
recover. It's encountered a parsing error and it has to take some error action at
恢复健康。它遇到了解析错误，它必须在以下位置采取一些错误操作

53
00:04:19,620 --> 00:04:24,629
this point. So in panic mode recovery, what it's going to do is it's going to hit
这一点。所以在恐慌模式恢复中，它要做的是

54
00:04:24,629 --> 00:04:28,620
the panic button. So right at this point, it's going to say I give up, I'm not
紧急按钮。所以在这一点上，我会说我放弃了，我不会

55
00:04:28,620 --> 00:04:33,810
parsing normally anymore. It goes into a different mode. Where is simply throwing
不再正常解析。它会进入不同的模式。在哪里简单地扔

56
00:04:33,810 --> 00:04:39,860
away input until it finds something that it recognizes and for example, we could
离开输入，直到它找到它能识别的东西，例如，我们可以

57
00:04:39,860 --> 00:04:43,939
say that the policy in this particular, for this particular kind of error, is to
假设在这种特殊情况下，对于这种特殊的错误，政策是

58
00:04:43,939 --> 00:04:48,560
skip ahead to the next integer and then try to continue. So, we'll just throw away
向前跳到下一个整数，然后尝试继续。所以，我们就把它扔掉

59
00:04:48,560 --> 00:04:53,479
the plus in this case and then it would restart here at the two, expecting to see
在这种情况下的加号，然后它会在这两个点重新开始，期望看到

60
00:04:53,479 --> 00:04:58,389
another integer. Try to finish off this expression and it would treat that as one
另一个整数。尝试结束此表达式，它会将其视为

61
00:04:58,389 --> 00:05:01,500
+ two and then the parenthesis would match and the rest of the expression would parse
+2，然后圆括号将匹配，表达式的睡觉将被解析

62
00:05:01,500 --> 00:05:08,500
just fine. Now in tools such Bison, which is widely used parser generator and one
挺好的。现在在诸如Bison这样的工具中，这是一个被广泛使用的解析器生成器

63
00:05:08,550 --> 00:05:15,400
that you may use for the project, there is a special terminal symbol called error to
，有一个特殊的端子符号，称为ERROR TO

64
00:05:15,400 --> 00:05:20,819
describe how much input to skip and the productions that are given in Bison look
描述要跳过多少输入以及在Bison Look中给出的产品

65
00:05:20,819 --> 00:05:26,860
like this. So you would say at the possibilities for e are that e could be an
像这样。所以你会说e的可能性是，e可能是一个

66
00:05:26,860 --> 00:05:32,770
integer, e could be an. The sum of the two e's, two expressions, it could be a
整数，e可以是一个。两个e的和，两个表达式，它可能是一个

67
00:05:32,770 --> 00:05:39,759
parenthesized expression or if none of this work, okay. So these are the normal
带括号的表达式，或者如果这些都不起作用，好的。所以这些都是正常的

68
00:05:39,759 --> 00:05:46,759
productions. Alright, If none of those work, then we could try some of these
制作。好吧，如果这些都不管用，那么我们可以试试这些

69
00:05:47,629 --> 00:05:51,909
productions that have error in them. And error is a special symbol for Bison and it
其中有错误的制作。错误是野牛和它的特殊象征

70
00:05:51,909 --> 00:05:55,900
says, well, these are the alternatives to try if these things over here didn't work.
他说，如果这里的这些东西不起作用，这些都是可以尝试的选择。

71
00:05:55,900 --> 00:06:01,020
So, if you find an error. Let's focus on this one right here so if this says that
所以，如果你发现一个错误。我们把重点放在这里，所以如果这上面写着

72
00:06:01,020 --> 00:06:07,779
if you find an error while you're trying to parse an e. Okay, we haven't actually
如果您在尝试解析e时发现错误。好的，我们实际上还没有

73
00:06:07,779 --> 00:06:11,979
said how that works yet. We'll see that in the future videos but conceptually, the
已经说过这是怎么回事了。我们将在未来的视频中看到这一点，但从概念上讲，

74
00:06:11,979 --> 00:06:17,669
parser is trying to recognize one of these kinds of expressions here. It's in a state
解析器正在尝试识别其中一种表达式。它处于一种状态

75
00:06:17,669 --> 00:06:20,949
where it thinks it wanted to see an integer or a + or a parenthesized
其中，它认为希望看到整数、+或圆括号

76
00:06:20,949 --> 00:06:25,090
expression and if that isn't working out i f it get stuck well then hit the panic
表达，如果这不起作用，如果它被很好地卡住了，那么就惊慌失措

77
00:06:25,090 --> 00:06:29,330
button and you can declare that it's in error state and it can throw away all the
按钮，您可以声明它处于错误状态，并且它可以丢弃所有

78
00:06:29,330 --> 00:06:34,289
input. This error will match all the input up to the next integer. And then this
输入。此错误将匹配直到下一个整数的所有输入。然后是这个

79
00:06:34,289 --> 00:06:39,349
whole thing could be counted as an e. As one of these things and then we will try
整件事都可以算作e。作为其中的一件事，然后我们会试一试

80
00:06:39,349 --> 00:06:44,819
to continue the parsing. Similarly, if we encounter an error somewhere inside a pair
以继续解析。类似地，如果我们在一对中的某处遇到错误

81
00:06:44,819 --> 00:06:50,659
of match parenthesis, well, we could just throw away the whole thing and just reset
我们可以把整件事扔掉，然后重置

82
00:06:50,659 --> 00:06:53,789
at the parenthesis boundaries and they continue parsing. So these are two
在括号边界处，它们继续解析。所以这是两个

83
00:06:53,789 --> 00:06:59,779
possible error recovery strategies if we find an error for this particular kind of
如果我们发现这种特定类型的错误，可能的错误恢复策略

84
00:06:59,779 --> 00:07:06,360
symbol in the grammar. And you can have these error, These productions that
语法中的符号。你可以有这些错误，这些作品

85
00:07:06,360 --> 00:07:12,360
involved the error token for, for as many different kinds of symbols in the language
涉及语言中任意多个不同类型的符号的错误标记

86
00:07:12,360 --> 00:07:18,749
as you like. Another common strategy is to use what are known as error productions
随你便。另一种常见的策略是使用所谓的错误产生

87
00:07:18,749 --> 00:07:23,419
and this specify known common mistakes that programmers make adjust as
这指定了已知的常见错误，程序员会根据这些错误进行调整

88
00:07:23,419 --> 00:07:28,120
alternative productions in the grammar. So here's a simple example, let's say we were
语法中的替代产生式。这里有一个简单的例子，让我们假设我们是

89
00:07:28,120 --> 00:07:32,370
working on a programming language or compiler for a programming language that
使用编程语言或用于编程语言的编译器，该编程语言

90
00:07:32,370 --> 00:07:37,669
was used by a lot of mathematicians and instead of writing Five x like computer
被许多数学家使用，而不是像计算机一样写5x

91
00:07:37,669 --> 00:07:44,120
scientists do, these guys always wanted to write five x to just juxtapose the five
科学家是这样做的，这些家伙总是想写五个x来把五个并列在一起。

92
00:07:44,120 --> 00:07:48,050
and the x to look more like normal mathematical notation. And they complain
而x看起来更像是普通的数学符号。他们抱怨说

93
00:07:48,050 --> 00:07:50,949
that this is always giving them parser errors. If the parser is just complaining
这总是会给他们带来解析器错误。如果解析器只是在抱怨

94
00:07:50,949 --> 00:07:54,979
over and over again then this is not a well formed expression. Well, we could
一遍又一遍，这不是一个很好的表达。嗯，我们可以

95
00:07:54,979 --> 00:07:59,460
just go in to our grammar and add a production that made of, of well form. We
只需进入我们的语法，添加一个由，形式良好的产品组成的产品。我们

96
00:07:59,460 --> 00:08:04,419
could just say well now it's legal, if I have that one kind of expression is just
我只能说，现在这是合法的，如果我有一种表达方式，那就是

97
00:08:04,419 --> 00:08:08,089
to have two expressions that [inaudible] opposed next to each other with no
有两个[听不见的]紧挨着的表达，没有

98
00:08:08,089 --> 00:08:14,680
intervening operator. And this, has a disadvantage obviously of complicating the
介入操作员。而这显然有一个不利之处，那就是使

99
00:08:14,680 --> 00:08:18,180
grammar. If we do this a lot our grammar is gonna get a lot harder to understand.
语法。如果我们这样做太多，我们的语法会变得更难理解。

100
00:08:18,180 --> 00:08:23,779
It's gonna be a lot harder to maintain and essentially all this is doing is promoting
它将更难维护，基本上所有这些都是在推广

101
00:08:23,779 --> 00:08:29,219
common mistakes to alternative syntax but this is used in practice. Peo ple do this
常见的错误，以替代语法，但这是在实践中使用。请大家这样做

102
00:08:29,219 --> 00:08:34,250
sort of thing and you will see for example when you use TCC and other production C
例如，当您使用TCC和其他产品C++时，您将会看到

103
00:08:34,250 --> 00:08:39,080
compilers they will often warn you about things you're not supposed to do but
编译器他们会经常警告你一些你不应该做的事情，但是

104
00:08:39,080 --> 00:08:43,040
they'll accept them anyway and this is essentially the mechanism by which they do
他们无论如何都会接受的，这基本上就是他们这样做的机制

105
00:08:43,039 --> 00:08:50,040
that. Last strategy I want to talk about a little bit is error correction. So, so far
那。最后，我想谈一谈纠错策略。那么到目前为止

106
00:08:51,390 --> 00:08:55,570
we've just talked about strategies for detecting errors but we could also try to
我们刚刚讨论了检测错误的策略，但是我们也可以尝试

107
00:08:55,570 --> 00:08:59,700
fix errors that is if the program has mistakes in it, the compiler could try to
修复错误，即如果程序中有错误，编译器可以尝试

108
00:08:59,700 --> 00:09:03,970
help the program out and say oh, you obviously didn't mean to write that. Let
帮助程序，然后说，哦，你显然不是故意要写的。让我们

109
00:09:03,970 --> 00:09:09,450
me try to find a program for you that, that works. And, these kind of corrections
我试着为你找一个能行得通的程序。而且这种修正，

110
00:09:09,450 --> 00:09:13,430
in some sense we wanted to find programs that are nearby, programs that aren't too
从某种意义上说，我们希望找到附近的程序，不太靠近的程序

111
00:09:13,430 --> 00:09:18,700
different from the programs at the, that the programmer supplied but we couldn't
与程序员提供但我们不能提供的程序不同

112
00:09:18,700 --> 00:09:23,010
compile correctly. And there's a few different things that you can do to the
正确编译。这里有几个不同的事情，你可以对

113
00:09:23,010 --> 00:09:27,540
things that people have tried are things like token insertions and deletions. So
人们尝试过的东西是像插入和删除令牌这样的东西。所以

114
00:09:27,540 --> 00:09:32,390
here you'd like to minimize the edit distance. That would be the metric that
在这里，您希望最小化编辑距离。这就是衡量标准，

115
00:09:32,390 --> 00:09:37,740
you would use to determine whether a program was close to the original program,
您将使用来确定程序是否接近原始程序，

116
00:09:37,740 --> 00:09:41,580
that the programmer supplied. You could also do exhaustive search within some
程序员提供的。您还可以在一些

117
00:09:41,580 --> 00:09:48,100
bounce to try all possible programs that are close to the program that was
弹出以尝试所有可能的程序，这些程序与之前

118
00:09:48,100 --> 00:09:53,890
supplied. And, a couple of disadvantages to this actually, number of disadvantages.
供应的。实际上，这有几个缺点，有几个缺点。

119
00:09:53,890 --> 00:09:56,960
You can imagine that this is hard to implement. It, it's actually quite
你可以想象这是很难实现的。它，它其实挺

120
00:09:56,960 --> 00:10:01,140
complex. This will slow down the parsing of correct programs because we need to
很复杂。这将减慢正确程序的解析速度，因为我们需要

121
00:10:01,140 --> 00:10:07,160
keep enough state around that we can manage the search or, or the editing in
保持足够的状态，以便我们可以在中管理搜索或/或编辑

122
00:10:07,160 --> 00:10:11,900
the case of that way actually doing counter and error and of course nearby is
这种方式实际执行计数器和错误的情况，当然是附近的情况是

123
00:10:11,900 --> 00:10:16,740
not really, is not really that clear what that means and various notions of nearby
不是真的，不是很清楚那是什么意思，以及附近的各种概念

124
00:10:16,740 --> 00:10:21,280
may or may not actually take us to a program of the, the programmer would
可能会也可能不会真正带我们去看一个程序，程序员会

125
00:10:21,280 --> 00:10:26,650
actually be happy with. The best one example of error correction is the
实际上很高兴和你在一起。纠错的最佳示例之一是

126
00:10:26,650 --> 00:10:31,720
compiler PL [crosstalk]. This is PL [inaudible] compiler, that's the PL part
编译器PL[串扰]。这是PL[听不见]编译器，那是PL部分

127
00:10:31,720 --> 00:10:37,250
and the C stands for either correction or Cornell which is where the compiler was
C代表更正或Cornell，这就是编译器所在的位置

128
00:10:37,250 --> 00:10:41,700
built and PL [crosstalk] is well-known for being willing to compile absolutely
Build and PL[相声]以愿意绝对编译而闻名

129
00:10:41,700 --> 00:10:46,000
anything. You could, you could give it the phone book. You can and people did give it
什么都行。你可以，你可以把电话簿给它。你可以而且人们确实给了它

130
00:10:46,000 --> 00:10:51,380
things like speech from Hamlet soliloquy and it would print out a lot of error
就像哈姆雷特的独白一样，它会打印出很多错误

131
00:10:51,380 --> 00:10:55,020
messages. Sometimes, these error messages would be very funny to read. And it would,
留言。有时，阅读这些错误消息会非常有趣。它将会，

132
00:10:55,020 --> 00:11:01,410
in the end, do correction and produce always a valid running PL [inaudible]
最后，进行校正并始终产生有效的运行PL[听不见]

133
00:11:01,410 --> 00:11:06,440
program. And you might ask why do people bother with that? It doesn't seem but that
程序。你可能会问，人们为什么要为这个烦恼呢？看起来不像，但是

134
00:11:06,440 --> 00:11:11,430
may not seem very compelling To us today. And have to realize that when this work
今天对我们来说可能不是很有说服力。并且必须意识到，当这项工作奏效时

135
00:11:11,430 --> 00:11:16,560
was done back in the 1970s people live in a very different world. There was a very
是在20世纪70年代完成的，人们生活在一个非常不同的世界里。有一个非常大的

136
00:11:16,560 --> 00:11:23,100
slow recompilation cycle. It could take a whole day To get your program To compile
重新编译周期较慢。编译您的程序可能需要一整天的时间

137
00:11:23,100 --> 00:11:26,880
and run, you would essentially submit your program in the morning and you might not
然后运行，你基本上会在早上提交你的程序，而你可能不会

138
00:11:26,880 --> 00:11:31,990
get results back until the afternoon. And, with that kind of turnaround cycle, Even
下午之前把结果拿回来。而且，有了这样的周转周期，即使

139
00:11:31,990 --> 00:11:35,860
one syntax error in your program was devastating. You can lose a whole day
程序中的一个语法错误是毁灭性的。你可能会损失一整天

140
00:11:35,860 --> 00:11:41,150
because you mistype the keyword and having the compiler try to take a stab at finding
因为您输入了错误的关键字，并让编译器尝试查找

141
00:11:41,150 --> 00:11:44,630
a working program for you if the correction was small and you save an
如果校正很小，并且您保存了一个工作程序，则会为您提供一个工作程序

142
00:11:44,630 --> 00:11:48,240
entire day, you know to think it can fix that one small mistake you made and give
一整天，你都知道它可以弥补你犯下的一个小错误

143
00:11:48,240 --> 00:11:52,050
you a valid run, that was actually a useful thing to do. And so the goal then
你跑得很好，这实际上是一件很有用的事情.所以我们的目标是

144
00:11:52,050 --> 00:11:56,280
was to find as many errors in one cycle as possible. They would try, they would try
就是在一个周期内找出尽可能多的错误。他们会试着，他们会试着

145
00:11:56,280 --> 00:12:00,940
to find as many errors to try to recover. Find as many errors as possible. Give you
查找尽可能多的错误以尝试恢复。找出尽可能多的错误。给你

146
00:12:00,940 --> 00:12:05,230
as good feedback as possible so you could fix as many errors, avoid as many retry
尽可能好的反馈，以便您可以修复尽可能多的错误，避免尽可能多的重试

147
00:12:05,230 --> 00:12:11,530
cycles as possible. And, and even possibly automatically correct the program. So that
尽可能的循环。甚至有可能自动修正程序。所以

148
00:12:11,530 --> 00:12:16,580
you could see if the correction were right and, and then possibly the, the results
你可以看到修正是否正确，然后可能会看到结果。

149
00:12:16,580 --> 00:12:19,390
you got back were useful on the [inaudible] to do even more debugging
你回来后对[听不见的]做更多的调试很有用

150
00:12:19,390 --> 00:12:23,450
before the next round. Now today, we're in a completely different situation. We were
在下一轮之前。今天，我们处于一个完全不同的情况。我们是在

151
00:12:23,450 --> 00:12:28,010
very fast, almost interactive recompilation cycle for many projects and
许多项目的重新编译周期非常快，几乎是交互式的

152
00:12:28,010 --> 00:12:31,360
as a result, users generally aren't interested in finding many errors. They
因此，用户通常对查找许多错误不感兴趣。他们

153
00:12:31,360 --> 00:12:36,740
ten d to correct only one error per cycle. Compilers still report many errors, I'll
10d以在每个周期内仅纠正一个错误。编译器仍然报告许多错误，我将

154
00:12:36,740 --> 00:12:40,290
give you lots and lots of errors but my observation certainly might have it.
给你带来了很多错误，但我的观察肯定是有错的。

155
00:12:40,290 --> 00:12:44,100
Personally, what I see many other people do is they only fix the first one because
就我个人而言，我看到很多其他人只修好第一个，因为

156
00:12:44,100 --> 00:12:49,040
it's the most reliable and the one that definitely needs to be fixed before,
这是最可靠的，也是肯定需要修复的，

157
00:12:49,040 --> 00:12:53,290
before you can try to compile again. If the compilation is fast enough, that's
然后才能再次尝试编译。如果编译速度足够快，那就是

158
00:12:53,290 --> 00:12:57,070
probably the most proactive thing to do. And as result, complex error recovery
可能是最积极主动的做法。因此，复杂的错误恢复

159
00:12:57,070 --> 00:13:00,510
today is just less compelling than it was a few decades ago.
与几十年前相比，今天的情况没有那么令人信服。

