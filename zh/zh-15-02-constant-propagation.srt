0
00:00:04,569 --> 00:00:08,650
In this video we are going to continue our discussion on global data flow analysis by
在本视频中，我们将通过以下方式继续讨论全局数据流分析

1
00:00:08,650 --> 00:00:15,650
taking a look at how global constant propagation works in detail. To begin,
详细了解一下全局常量传播是如何工作的。首先，

2
00:00:16,820 --> 00:00:21,400
let's review what the conditions are to do global constant propagation. So to replace
让我们回顾一下做全局常数传播的条件是什么。所以要替换掉

3
00:00:21,400 --> 00:00:25,820
a use of a variable x by a constant k, we have to know the following property. That
当变量x被常数k使用时，我们必须知道以下性质。那

4
00:00:25,820 --> 00:00:31,480
on, that on every path to the use of x, the last assignment to the variable x is,
在使用x的每条路径上，变量x的最后一个赋值是，

5
00:00:31,480 --> 00:00:36,140
x equals the constant k, okay? And this has to be true again on every path to the
X等于常数k，好吗？在通往世界的每一条道路上，这一点都必须是正确的。

6
00:00:36,140 --> 00:00:43,140
use of x. Now, global constant propagation can be performed at any point where this
使用x。现在，全局常量传播可以在此位置的任何点执行

7
00:00:43,730 --> 00:00:48,160
property holds. What we're going to look at in this video, is the case of computing
财产保有。我们将在这段视频中看到的是计算机的情况

8
00:00:48,160 --> 00:00:53,899
the property for a single variable x at all program points. So we're going to take
所有程序点的单个变量x的属性。所以我们要把

9
00:00:53,899 --> 00:00:56,609
one, we're going to focus on one variable x and we're going to compute whether it's
首先，我们将重点放在一个变量x上，然后我们将计算它是否

10
00:00:56,609 --> 00:01:02,070
a constant at every program point. It's easy to extend the algorithm to compute
每个程序点的常量。该算法易于扩展，便于计算

11
00:01:02,070 --> 00:01:06,860
this property for all variables. One very simple but very efficient way to do that
所有变量的此属性。要做到这一点，有一种非常简单但非常有效的方法

12
00:01:06,860 --> 00:01:13,860
is just to repeat the computation once for each variable in the method body. The way
只需对方法体中的每个变量重复计算一次。这条路

13
00:01:15,210 --> 00:01:19,880
we are going to compute the information that we want is to associate one of the
我们将计算我们想要的信息，将其中一个

14
00:01:19,880 --> 00:01:25,790
following values with the variable x at every point in the program. And, let's
在程序中的每一点用变量x追随值。还有，让我们

15
00:01:25,790 --> 00:01:31,920
start with the last one here we will assign x this special value here which is
从这里的最后一个开始，我们将在这里为x指定这个特定值，它是

16
00:01:31,920 --> 00:01:38,920
pronounced top if x is not a constant. So if we can't figure out whether x is a
如果x不是常量，则读作top。所以如果我们不能确定x是否是

17
00:01:39,200 --> 00:01:43,140
constant at a particular point in the program, then we'll just say x is top at
常量，那么我们就说x在

18
00:01:43,140 --> 00:01:49,610
that point. And, this is going to be our safe situation. It's always okay to say we
这一点。而且，这将是我们的安全状况。我们总是可以说我们

19
00:01:49,610 --> 00:01:54,820
don't know what the value of x is and when we say that x has a value top, and we
我不知道x的值是多少，当我们说x有一个值顶的时候，我们

20
00:01:54,820 --> 00:01:58,969
could say, we, we were essentially saying we don't know whether x is a constant or
可以说，我们，我们本质上是说我们不知道x是常数还是

21
00:01:58,969 --> 00:02:03,340
not at this point in the program, x could have any value. Alright? Now, another
在程序的这一点上不是，x可以有任何值。好吗？现在，又来了一个

22
00:02:03,340 --> 00:02:08,429
possibility is that we will say that x is some constant c, okay? So this is a
可能我们会说x是某个常数c，好吗？所以这是一个

23
00:02:08,429 --> 00:02:12,450
particular constant and if we say that x is a constant c at a program point, that
特定的常数，如果我们说x是某个程序点的常数c，那么

24
00:02:12,450 --> 00:02:17,549
means, in fact, at that program point, we believe o r we have proven that x is
意思是，实际上，在那个程序点上，我们相信或者我们已经证明了x是

25
00:02:17,549 --> 00:02:24,549
always that constant. Now, there is a third possibility which is not immediately
总是这样不变。现在，还有第三种可能性，但不是马上

26
00:02:24,980 --> 00:02:30,669
intuitive, perhaps. But, as we will see, plays a very important role in algorithms
也许是直觉上的。但是，正如我们将看到的，在算法中扮演着非常重要的角色

27
00:02:30,669 --> 00:02:36,109
for, for global constant propagation. And in fact, in all global data flow analysis,
对于，对于全局常量传播。事实上，在所有的全球数据流分析中，

28
00:02:36,109 --> 00:02:43,109
and that is bottom, okay? So this value is pronounced bottom and intuitively the idea
这是最低点，好吗？所以这个值发音为Bottom，直观地说就是这个概念

29
00:02:43,829 --> 00:02:48,799
anyway that is kind of opposite of top, alright? And the interpretation of bottom
不管怎么说，这是与TOP相反的，好吗？以及对“底”的解读

30
00:02:48,799 --> 00:02:55,799
is going to be that this statement never executes, alright? So, when we don't know
就是这个语句永远不会执行，好吗？所以，当我们不知道

31
00:02:55,980 --> 00:03:01,480
whether a statement is even executed at all we will say that x at that point has a
无论语句是否执行，我们都会说x在那个点上有一个

32
00:03:01,480 --> 00:03:06,510
value bottom. Meaning that, as far as we know that point in the program is never
值最低。也就是说，据我们所知，程序中的这一点永远不会

33
00:03:06,510 --> 00:03:09,810
reached. It doesn't matter what the value of x is at that point because that
已到达。在那个点上x的值是多少并不重要，因为

34
00:03:09,810 --> 00:03:15,000
statement never executes. Alright, so we're going to assign x one of these three
语句永远不会执行。好的，我们把x分配给这三个中的一个

35
00:03:15,000 --> 00:03:22,000
kinds of values. Either bottom, some constant, or top. Let's begin by working
各种价值观。要么是底部、某个常量，要么是顶部。让我们从工作开始吧

36
00:03:22,410 --> 00:03:27,220
through an example by hand and our goal is going to be for every program point to
通过一个手工示例，我们的目标是为每个程序点

37
00:03:27,220 --> 00:03:32,229
decide whether x could be a constant definitely not a constant, or whether we
决定x是否可以是一个常数，而不是一个常数，或者我们

38
00:03:32,229 --> 00:03:38,669
think that statement might not ever execute, okay? So, execution will begin at
我觉得那句话可能永远不会执行，好吗？所以，行刑将从

39
00:03:38,669 --> 00:03:44,010
the top of this control flip graph. So this the entry point and before executions
此控件翻转图形的顶部。所以这是行刑前的入口点

40
00:03:44,010 --> 00:03:48,400
begins, we don't anything about the value of x. So, I'm not making any assumptions
开始，我们没有关于x的值的任何东西，所以，我不做任何假设

41
00:03:48,400 --> 00:03:53,850
about what code came before this basic block and so to be safe, I will say that
关于这个基本挡路之前的代码，为了安全起见，我会说

42
00:03:53,850 --> 00:03:59,009
at this point, x has some unknown value. We don't know what the value of x is, it
在这一点上，x有一些未知值。我们不知道x的值是多少，是吗？

43
00:03:59,009 --> 00:04:05,650
could be anything. So x = T, is the property that we want entry to the first
可能是任何东西。所以x=T，是我们想要输入到第一个

44
00:04:05,650 --> 00:04:11,540
basic block. Now after the assignment x = three, that was indicated there, where
基本挡路。现在，在赋值x=3之后，这是在那里显示的，其中

45
00:04:11,540 --> 00:04:15,030
what point we're talking about. So, after the assignment x = three, we'll definitely
我们谈论的是什么观点。所以，在赋值x=3之后，我们肯定会

46
00:04:15,030 --> 00:04:19,509
will know that x is the constant three. Alright, now there's something here that's
就会知道x是常数3。好的，现在这里有一些东西

47
00:04:19,509 --> 00:04:22,400
worth pointing out which is that our program points, the points that we're
值得一提的是，我们的程序点，我们正在

48
00:04:22,400 --> 00:04:29,070
attaching this knowledge to or these, these facts to are in between the statem
将此知识附加到或这些，这些事实处于状态之间

49
00:04:29,070 --> 00:04:33,200
ents. So, when I say x = three at this program point, what I mean is that after
恩茨。所以，当我在这个程序点上说x=3的时候，我的意思是在

50
00:04:33,200 --> 00:04:39,000
x, after this assignment has executed, x = three, but before this predicate of the
x，在执行此赋值之后，x=3，但在

51
00:04:39,000 --> 00:04:45,280
conditional has executed, I know that x = three, okay? So, the program points are in
有条件的已经执行了，我知道x=3，好吗？所以，程序点在

52
00:04:45,280 --> 00:04:50,190
between statements and there's a program point before and after every statement.
在语句之间，每条语句前后都有一个程序点。

53
00:04:50,190 --> 00:04:54,530
Alright, so the next thing that happens is this conditional branch. Notice that the
好的，接下来发生的就是这个条件分支。请注意，

54
00:04:54,530 --> 00:04:59,590
branch doesn't update x, doesn't even refer to x so after the branch executes
分支不更新x，甚至不引用x，所以在分支执行之后

55
00:04:59,590 --> 00:05:05,260
we'll definitely knows that x = three on both branches. Alright, now let's do the
我们肯定知道在两个分支上x=3。好的，现在我们来做

56
00:05:05,260 --> 00:05:09,180
right hand branch. The next thing that happens is the assignment to y that would
右手分支。接下来发生的事情是对y的赋值，该赋值将

57
00:05:09,180 --> 00:05:13,810
not affect the value of x. So after the assignment to y, we'll still know that x =
不会影响x的值。所以在对y赋值之后，我们仍然知道x=

58
00:05:13,810 --> 00:05:19,010
three, alright? Now let's take a look at the left hand branch so the first thing
三个，好吗？现在让我们看看左边的分支，所以第一件事

59
00:05:19,010 --> 00:05:22,690
that happens over here is another assignment to y. Well that won't affect
发生在这里的是y的另一项任务，这不会影响

60
00:05:22,690 --> 00:05:27,650
the value of x. After the assignment of Y we'll know that x = three. And now comes
x的值。在Y赋值之后，我们就知道x=3。现在又来了

61
00:05:27,650 --> 00:05:32,380
to the assignment of x, alright. So after this assignment happens at this program
对于x的赋值，好的。所以在这个项目完成这项任务之后

62
00:05:32,380 --> 00:05:35,060
point we're going to know that the value of x is different. We're going to know
这一点，我们将会知道，x的值是不同的。我们就会知道

63
00:05:35,060 --> 00:05:41,940
that x = four, alright. So, now after this statement we know x = four and after this
x=4，好的。现在，在这个陈述之后，我们知道x=4，在这个之后

64
00:05:41,940 --> 00:05:46,990
statement over here we know x = three, alright? Now what do we know then about
在这里我们知道x=3，好吗？那么我们现在知道些什么呢？

65
00:05:46,990 --> 00:05:53,330
what happens before this statement, okay? The a = two x and I just want to point
在这份声明之前会发生什么，好吗？a=2x，我只想指出

66
00:05:53,330 --> 00:05:57,460
out here. I said that there's a program point before and after every statement And
在外面。我说每个语句前后都有一个程序点，

67
00:05:57,460 --> 00:06:02,400
so this program point here, which is before this assignment to a is different
所以这里的这个程序点，在这个赋值给a之前是不同的

68
00:06:02,400 --> 00:06:09,400
from the program points that are after x = four and y = zero. So intuitively, after x
从x=4和y=0之后的程序点。所以直观地说，在x之后

69
00:06:09,700 --> 00:06:14,639
= four we know that we're still on this path over here on the left and so we know
=4我们知道我们仍然在左边的这条路上，所以我们知道

70
00:06:14,639 --> 00:06:18,520
that x = four and over here after y = zero, we still know that we're on this
x=4，这里y=0之后，我们仍然知道我们在这上面

71
00:06:18,520 --> 00:06:25,520
path is x = three. But, when we reach the point before a = two x, we no longer
路径是x=3。但是，当我们到达a=2x之前的点时，我们就不再

72
00:06:25,900 --> 00:06:30,060
know which path we're coming from. This is the point of the merge of these two paths
知道我们从哪条路来。这是这两条路径的合并点

73
00:06:30,060 --> 00:06:34,810
that both lead to this statement. And what can we say about the value of x here?
这两件事都导致了这份声明。那么，关于x的值，我们能说些什么呢？

74
00:06:34,810 --> 00:06:40,800
Well, there is no constant that we can assign to x because on o ne path x is
我们没有可以赋给x的常量，因为在一条路径上x是

75
00:06:40,800 --> 00:06:44,670
three and on the other path, x is four. And so what we have to say here is that
在另一条路径上，x是4。所以我们在这里要说的是

76
00:06:44,670 --> 00:06:51,270
before this assignment executes, a = x, sorry, x = T. We don't know what the value
在此赋值执行之前，a=x，抱歉，x=T。我们不知道

77
00:06:51,270 --> 00:06:55,400
of x is. Another way of saying it is we know we, we don't know that x is a
就是。换句话说，我们知道我们，我们不知道x是一个

78
00:06:55,400 --> 00:07:00,060
constant, alright. So, after the assignment executes it doesn't affect the
常量，好的。因此，在执行赋值之后，它不会影响

79
00:07:00,060 --> 00:07:07,060
value of x, we will also have that x = T. Now notice that once we have the global
值，我们也会得到x=T。现在请注意，一旦我们有了全局

80
00:07:08,910 --> 00:07:13,260
constant information, once we know for every program point, what the state of x
常量信息，一旦我们知道了每个程序点，x的状态是什么

81
00:07:13,260 --> 00:07:19,570
is, it's going to be very easy to perform the optimization. We simply look at the
就是，执行优化将会非常容易。我们只需查看

82
00:07:19,570 --> 00:07:24,830
information associated with the statement and then it will tell us whether x is a
与该语句相关联的信息，然后它将告诉我们x是否是

83
00:07:24,830 --> 00:07:29,130
constant when that statement executes or not. And if x is a constant at that point,
该语句执行或不执行时的常量。如果x在那个点是一个常数，

84
00:07:29,130 --> 00:07:34,770
then we can replace that use of x by the constant. And crucial question of course
然后我们可以用常量来代替x的用法。当然也是一个至关重要的问题

85
00:07:34,770 --> 00:07:39,020
is how do we compute these properties. So, we did this example by hand but how in a
我们如何计算这些性质。所以，我们手工完成了这个示例，但是如何在

86
00:07:39,020 --> 00:07:43,800
systematic fashion, an arbitrary control flow graph do we actually compute these
系统方式，任意控制流图，我们真的要计算这些吗

87
00:07:43,800 --> 00:07:49,710
properties for x for every program point? Now we're ready to talk about data flow
每个程序点的x的属性？现在我们准备好讨论数据流了

88
00:07:49,710 --> 00:07:53,740
analysis algorithms and there's one basic principle that you see in all of these
分析算法，你可以在所有这些算法中看到一个基本原则

89
00:07:53,740 --> 00:07:58,180
algorithms that's worth mentioning right away. And that's that the analysis of a
值得一提的是算法。这就是对一个

90
00:07:58,180 --> 00:08:03,800
complicated program can be expressed as a combination of very simple rules that
复杂的程序可以表示为非常简单的规则的组合，这些规则

91
00:08:03,800 --> 00:08:09,370
relate the change in information between adjacent statements. So we're just going
将相邻语句之间的信息更改关联起来。所以我们要走了

92
00:08:09,370 --> 00:08:14,590
to focus on local rules and the way we're going to build our global data flow
将重点放在本地规则和我们将构建全球数据流的方式上

93
00:08:14,590 --> 00:08:19,860
analysis is actually by a combination of rules that look only at a single statement
分析实际上是通过规则的组合进行的，这些规则只关注单个语句

94
00:08:19,860 --> 00:08:26,540
and its neighbors. The idea behind the rules is going to be the push or transfer
以及它的邻居。规则背后的想法将是推动或转移

95
00:08:26,540 --> 00:08:30,860
information from one statement to the next And so for each statement s, we're going
信息从一条语句传递到下一条语句，因此对于每个语句s，我们将

96
00:08:30,860 --> 00:08:34,889
to compute information about the value of x immediately before and after s. Remember
来计算关于紧接在s之前和之后的x值的信息。记住

97
00:08:34,889 --> 00:08:39,789
that's where, those are the program points that we want to attach information to. So
这就是我们要附加信息的程序点。所以

98
00:08:39,789 --> 00:08:43,320
in particular we're going to have a function C. It stands for constant
特别地，我们将有一个函数C，它代表常量

99
00:08:43,320 --> 00:08:47,760
information and C will take three arguments, takes the name of the variable,
信息，而C将接受三个参数，获取变量的名称，

100
00:08:47,760 --> 00:08:51,460
x. It takes the stat ement that we're talking about, the particular statement in
x，它采用我们正在讨论的统计数据，其中的特定语句

101
00:08:51,460 --> 00:08:55,920
the program that we're looking at. And then either in or out and this is what
我们现在看到的这个项目。然后要么进去，要么出去，这就是

102
00:08:55,920 --> 00:09:02,040
distinguishes the value of x before s executes versus the value of x after s
区分执行%s之前的x值和执行%s之后的x值。

103
00:09:02,040 --> 00:09:08,670
executes. We're going to be defining a set of transfer functions that push
执行。我们将定义一组传递函数

104
00:09:08,670 --> 00:09:13,040
information or transfer information from one statement to another. And in the rules
信息或将信息从一条语句传送到另一条语句。在规则中

105
00:09:13,040 --> 00:09:17,870
for constant propagation we need to talk about a statement and its predecessors. So
为了不断传播，我们需要讨论语句及其前身。所以

106
00:09:17,870 --> 00:09:22,610
we're going to say that every statement s has some set of immediate predecessors p1
我们会说每个语句s都有一组直接的前置语句p1

107
00:09:22,610 --> 00:09:27,450
through pn, alright? So, it's either of these statements that lead in one step to
通过pn，好吗？因此，这两条陈述中的任何一条都会导致一个步骤

108
00:09:27,450 --> 00:09:34,360
the statement s. Let's do our first rule. So we have a statement s and it has some
陈述是这样的。让我们来做我们的第一条规则。所以我们有一个语句%s，它有一些

109
00:09:34,360 --> 00:09:41,360
set of predecessor statements, P1, P2, P3, P4. And the situation that we're
前置语句集，P1、P2、P3、P4。我们现在的情况是

110
00:09:41,650 --> 00:09:48,630
interested in here is, let's assume that x is top at the program point after one of
这里感兴趣的是，让我们假设x是程序点处的顶部，在下列其中之一之后

111
00:09:48,630 --> 00:09:53,510
these predecessors. So, after some predecessor, it doesn't matter which one,
这些前辈。所以，在一些前任之后，不管是哪一个，

112
00:09:53,510 --> 00:09:59,180
if it happens that x is top at the program point after that predecessor, well, then x
如果恰好x在程序点处位于该前一步之后的顶端，那么，那么x

113
00:09:59,180 --> 00:10:04,500
has to be top before the execution of s, okay? So that's what this rule says. It
在处决s之前必须排在首位，好吗？所以这条规则就是这么说的。它

114
00:10:04,500 --> 00:10:11,500
says if the out of any predecessor for x is top, then the in of s for x is also
表示如果x的任何前身中的out是top，那么x的s的in也是。

115
00:10:12,710 --> 00:10:18,029
top. Alright, and this makes sense. It says that if we don't know whether x is a
头顶。好的，这就说得通了。它说如果我们不知道x是否是一个

116
00:10:18,029 --> 00:10:23,240
constant on some path that leads to s, well then, we don't know that x is a
通向s的某个路径上的常数，那么，我们不知道x是a

117
00:10:23,240 --> 00:10:27,870
constant at s. Because for all we know, execution came down that particular, came
常量。因为据我们所知，行刑是从那个特定的地方开始的

118
00:10:27,870 --> 00:10:31,630
from that particular predecessor and so, we can't make any prediction about whether
因此，我们不能对此做出任何预测

119
00:10:31,630 --> 00:10:38,620
s is, whether x is a constant before s executes. Now let's look at another
s是，在s执行之前x是否为常量。现在我们来看另一个

120
00:10:38,620 --> 00:10:45,320
situation. Let's say that x is some constant C after the execution of some
情况。让我们假设x是某个常数C，在执行了一些

121
00:10:45,320 --> 00:10:50,010
predecessor. And that on a, after another predecessor a distinct predecessor x is a
前任。在a上，在另一个前身之后，截然不同的前身x是a

122
00:10:50,010 --> 00:10:57,010
different constant D. So D is not equal to C. Well then what do we know about x at
不同的常数D，所以D不等于C，那么我们知道x在

123
00:10:57,320 --> 00:11:04,130
the program point before s executes? Well, we don't know anything, x has to be top,
是否执行%s之前的程序点？嗯，我们什么都不知道，x必须在上面，

124
00:11:04,130 --> 00:11:08,779
because we don't know which constant, s will be, since we don't know which path
因为我们不知道哪个常数s会是，因为我们不知道哪条路径

125
00:11:08,779 --> 00:11:13,380
will reach s at run time. And this is the situation that we saw in the example we
将在运行时到达%s。这就是我们在示例中看到的情况

126
00:11:13,380 --> 00:11:20,380
did by hand. Another possibility is that the predecessors all agree on what the
是手工完成的。另一种可能性是，前辈们都同意

127
00:11:23,080 --> 00:11:27,960
value of x could be. So let's say that we have, you know, predecessor here and that
x的值可能是。所以让我们说，你知道，我们的前任在这里和那里

128
00:11:27,960 --> 00:11:32,149
after it executes x is known to be the constant C and x is known to be the
在它执行之后，已知x是常数C，x是

129
00:11:32,149 --> 00:11:35,310
constant C after this predecessor and x is known to be the constant C after this
在该前身之后的常数C，并且已知x是在此之后的常数C

130
00:11:35,310 --> 00:11:38,490
predecessor. There's one other possibility. Let's say that after this
前任。还有一种可能性。我们假设在这之后

131
00:11:38,490 --> 00:11:45,020
predecessor over here, all we know is that x is bottom, okay? And so what the rule
这里的前身，我们所知道的就是x是底部，好吗？那么规则是什么呢？

132
00:11:45,020 --> 00:11:51,899
says is that if we have this situation where either x has the property bottom
意思是，如果我们有这样的情况，其中任何一个x都有属性底部

133
00:11:51,899 --> 00:11:55,300
after a predecessor or all the predecessors agree on the particular
在一位或所有前任就特定事项达成一致之后

134
00:11:55,300 --> 00:12:01,610
constant that x could be, then before at the program point before s executes, we
x可能是常量，那么在s执行之前的程序点，我们

135
00:12:01,610 --> 00:12:08,220
know that x is going to guarantee to be the constant C. And if you think about it
知道x将保证是常数C，如果你想一想

136
00:12:08,220 --> 00:12:12,750
for a second, it's easy to see why this is correct. First of all, clearly if we come
有一秒钟，很容易看出为什么这是正确的。首先，很明显如果我们来

137
00:12:12,750 --> 00:12:17,410
along one of the paths where x is known to be the constant C, since they all agree
沿着其中x已知为常数C的路径之一，因为它们都一致

138
00:12:17,410 --> 00:12:23,800
and then when we get to s, x will definitely have the value C. What about
当我们到s的时候，x肯定会有c的值，那么呢？

139
00:12:23,800 --> 00:12:27,240
the bottom case? Well, remember what that means. That means that this statement is
最下面的箱子呢？嗯，记住那是什么意思。这意味着这句话是

140
00:12:27,240 --> 00:12:32,560
never reached so there's some predecessor P here which never executes. Which means
从未达到，所以这里有一些前身P，它永远不会执行。这意味着

141
00:12:32,560 --> 00:12:38,089
if P never executes then we could never reach S along this path from P. So the
如果P从不执行，那么我们永远不能从P沿着这条路径到达S。

142
00:12:38,089 --> 00:12:42,370
only paths that will reach s are the ones where x is known to be a constant,
仅将到达s的路径是已知x为常数的路径，

143
00:12:42,370 --> 00:12:49,360
alright? So that's why it's okay in this situation say that x, if control if
好吗？所以这就是为什么在这种情况下，假设x，如果控制

144
00:12:49,360 --> 00:12:54,480
execution reaches s at all its guaranteed to reach it in a state where x is the
执行达到s保证在x是

145
00:12:54,480 --> 00:13:01,480
constant C. One last possibility is let's say that x is bottom for all the
常数C。最后一种可能性是，假设x是所有

146
00:13:01,930 --> 00:13:07,700
predecessors, okay? And what does that mean? Well, that means that every
前辈们，好吗？那是什么意思？嗯，这意味着每个人

147
00:13:07,700 --> 00:13:13,350
predecessor of S never executes so they're all unreachable. And therefore if every
S的前身从不执行，因此它们都是不可访问的。因此如果每个人

148
00:13:13,350 --> 00:13:18,850
predecessor of x never executes s itself can never execute, and so we can conclude
x的前身永远不会执行，s本身也永远不会执行，所以我们可以得出结论。

149
00:13:18,850 --> 00:13:25,850
that entry to s, x is bottom. The first four rules that we just looked at relate
s的条目，x是底部。我们刚才看到的前四条规则与

150
00:13:26,120 --> 00:13:32,140
the out of one statement to the in of the next. We also have to have rules that
从一个语句的输出到下一个语句的输入。我们还必须有规则，

151
00:13:32,140 --> 00:13:36,959
relate the in of a statement to the out of the same statement. So we have to push
将语句的in与同一语句的out关联起来。所以我们必须推动

152
00:13:36,959 --> 00:13:41,260
information from the input of a statement to the output of the same statement. So,
从语句的输入到同一语句的输出的信息。所以,

153
00:13:41,260 --> 00:13:46,610
once again, there are several cases. And let's take a look at an easy one first. If
再说一次，有几个案例。让我们先来看一个简单的问题。如果

154
00:13:46,610 --> 00:13:51,800
x is bottom on an entry s, if the program point before s well, that says that at
X是条目s的底部，如果s之前的程序指针很好，也就是说在

155
00:13:51,800 --> 00:13:57,420
the, that s is never reached, that s never executes. And therefore, x will be bottom
那个，那是永远不会到达的，那是永远不会执行的。因此，x将是底部

156
00:13:57,420 --> 00:14:02,730
after s, after s as well. So if the program point before s is never reached,
在s之后，也在s之后。因此如果s之前的程序点从未到达，

157
00:14:02,730 --> 00:14:08,890
the program point after s definitely can't be reached either. Another possibility is
s之后的程序点肯定也达不到。另一种可能性是

158
00:14:08,890 --> 00:14:14,209
that we're assigning x to constant C in this statement. In that case the out of
在这条语句中，我们将x赋给常数C。在这种情况下，不在的情况下

159
00:14:14,209 --> 00:14:18,990
the statement is going to be equal to C. Alright, so it doesn't matter what the
该语句将等于C。好的，因此

160
00:14:18,990 --> 00:14:24,830
state of x was before the statement, after we execute the statement, x will be the
x的状态在语句之前，在我们执行语句之后，x将是

161
00:14:24,830 --> 00:14:29,100
constant C. And I should say there is a conflict with the previous rule. Okay, it
常量C，我应该说这与之前的规则有冲突。好的，它

162
00:14:29,100 --> 00:14:34,899
could be that x is bottom, before the statement. So rule six, has lower priority
可能是x在语句之前是底部。因此，规则6具有较低优先级

163
00:14:34,899 --> 00:14:40,490
than rule five. So we, so if we could say that x is bottom after the statement, we
比第五条规则更重要。所以我们，所以如果我们可以说x是语句后面的底部，我们

164
00:14:40,490 --> 00:14:44,040
would prefer you to say that so rule five would be applied first, and then if rule
我更希望你这样说，所以第五条规则将首先适用，然后如果规则

165
00:14:44,040 --> 00:14:50,850
five does not apply. So if x is some other constant D or x = T, then we would apply
五个不适用。因此，如果x是其他常数D或x=T，那么我们将应用

166
00:14:50,850 --> 00:14:56,070
this rule and we would conclude that x is the constancy afterwards and that makes
这条规则，我们会得出结论，x是之后的常量，这使得

167
00:14:56,070 --> 00:15:01,510
sense. If x is d or x is the, is top that means that control, as far as we know, can
理智。如果x是d，或者x是顶部，这意味着，就我们所知，控件可以

168
00:15:01,510 --> 00:15:05,040
reach this statement. And then what we're saying here is that well, after the
达成这一声明。然后我们在这里说的是，在

169
00:15:05,040 --> 00:15:07,640
execution of this statement, if control can reach this statement after the
方法之后，如果控制可以到达此语句，则执行此语句

170
00:15:07,640 --> 00:15:14,640
execution of it, x is guaranteed to be the constant C. Another possibility is that we
执行它，x保证是常数C。另一种可能是我们

171
00:15:15,410 --> 00:15:19,529
have an assignment to x but the right hand side is more complicated than a constant.
对x进行赋值，但是右侧比常量复杂得多。

172
00:15:19,529 --> 00:15:24,709
So this case is for everything other than the constant assignment. Okay, so this F
所以这种情况适用于除常量赋值之外的所有情况。好的，所以这个F

173
00:15:24,709 --> 00:15:30,010
here just stands for some more complicated expression than just a simple constant.
这里只代表一些比简单常量更复杂的表达式。

174
00:15:30,010 --> 00:15:32,750
And in this case we, we're just going to say we don't know what the value is, we're
在这种情况下我们，我们只能说我们不知道它的价值是什么，我们

175
00:15:32,750 --> 00:15:37,850
not going to try to guess what the result of that computation is and we'll just say
不去尝试猜测计算的结果，我们就说

176
00:15:37,850 --> 00:15:43,660
that x = T. X, w e don't know what the value of x is after the execution of this
那个x=T.x，我们不知道这个执行后x的值是多少

177
00:15:43,660 --> 00:15:48,279
statement. And once again, rule five takes precedence so if rule five applies, then
声明。再一次，第五条规则优先，所以如果第五条规则适用，那么

178
00:15:48,279 --> 00:15:52,630
we would apply then, then we would use that rule instead of rule seven. But, if
然后我们会应用，然后我们会使用那个规则而不是规则七。但是，如果

179
00:15:52,630 --> 00:15:59,630
control can reach this statement, so up here x = C or x = T. Then we'll apply rule
控件可以达到此语句，因此在这里x=C或x=T，然后我们将应用规则

180
00:16:01,529 --> 00:16:08,529
seven and conclude that x is top after the statement. And finally Rule eight, another
7，并在语句后得出x是顶部的结论。最后是第八条规则，另一条

181
00:16:09,399 --> 00:16:14,420
possibility is that we're assigning to some variable other than x. And in that
可能是我们给x以外的某个变量赋值。

182
00:16:14,420 --> 00:16:21,420
case, if x = k before the statement then we just keep that value. Okay, so whatever
在这种情况下，如果在语句前x=k，那么我们就保留这个值。好的，所以不管怎样

183
00:16:24,360 --> 00:16:28,890
x was before the statement bottom, a constant or top, if the assignment is to
X在语句Bottom之前，如果赋值为，则为常量或TOP

184
00:16:28,890 --> 00:16:33,589
some other variable other than x then x will have the same property after the
除x以外的某些其他变量在x之后将具有相同的属性

185
00:16:33,589 --> 00:16:40,589
statement executes. Now, we can put these rules together into an algorithm. For
语句执行。现在，我们可以将这些规则放到一个算法中。为

186
00:16:40,839 --> 00:16:44,360
every entry point, for every entry, statement to the program, we're going to
程序的每个入口点，每个条目，每个语句，我们都要

187
00:16:44,360 --> 00:16:49,690
say on entry that we don't know anything about the value of x. So the program point
在条目上说我们对x的值一无所知。所以程序指针

188
00:16:49,690 --> 00:16:56,120
before that entry point we're gonna say that x has an unknown value, top. And then
在这个入口点之前，我们会说x有一个未知值，top。然后

189
00:16:56,120 --> 00:17:03,120
everywhere else we're going to say that the value of x, is bottom, okay. And this
在其他任何地方，我们都会说x的值是最低的，好的。还有这个

190
00:17:03,279 --> 00:17:09,169
is actually important so we're going, what this intuitively is doing is its saying
实际上很重要，所以我们要去，直观地说这是在做什么

191
00:17:09,169 --> 00:17:13,709
well, as far as we know except for the entry point to the program, which can
嗯，据我们所知，除了程序的入口点，它可以

192
00:17:13,709 --> 00:17:17,459
definitely be executed, we don't know whether any of the other statements in the
肯定会被执行，我们不知道

193
00:17:17,459 --> 00:17:21,409
control flow graph are actually ever executed and so we're going to assume
实际上曾经执行过控制流图，所以我们假设

194
00:17:21,409 --> 00:17:25,909
initially, that they're not. And we're just going to say that x has the value
起初，他们不是。我们只想说x的值是

195
00:17:25,909 --> 00:17:31,789
bottom everywhere except at an entry point And now what we're going to do is a kind
除了入口点以外的任何地方都是底部，现在我们要做的是一种

196
00:17:31,789 --> 00:17:36,100
of constraint satisfaction algorithm. We're going to pick some statement that
约束满足算法。我们将挑选一些语句，

197
00:17:36,100 --> 00:17:39,989
doesn't satisfy one of the rules, one through eight. And then we're going to
不符合其中一条规则，从一到八。然后我们要去

198
00:17:39,989 --> 00:17:43,679
update it using the appropriate rules. So we'll look for places in the control flow
使用适当的规则更新它。因此，我们将在控制流中查找位置

199
00:17:43,679 --> 00:17:47,330
graph where the information is inconsistent according to the rules and
根据规则信息不一致的图，以及

200
00:17:47,330 --> 00:17:54,330
then we'll update, the information to make it consistent with the rules. Let's take a
然后我们会更新信息，使其符合规则。让我们拿一张

201
00:17:54,330 --> 00:17:59,119
look at our example again. So, we're going to start out by saying x = T at the entry
再看看我们的例子。所以，我们首先在入口处说x=T

202
00:17:59,119 --> 00:18:03,539
point, and then we're going to have all of our other program points And let me
点，然后我们将有我们所有的其他程序点，让我

203
00:18:03,539 --> 00:18:08,039
indicate them here. Okay, so these are all the other program points that we have to
把他们指到这里。好的，这些都是我们必须要做的其他程序点

204
00:18:08,039 --> 00:18:14,350
be concerned with. And there again, there's a program point before and after
关心……再说一遍，在这之前和之后都有一个节目点

205
00:18:14,350 --> 00:18:21,350
every statement. And we are going to say the x = bottom for all of these. So, again
每一份声明。我们会说所有这些的x=Bottom。所以，再一次

206
00:18:27,830 --> 00:18:33,549
what this means is, that as far as we know, control doesn't reach any of these
这意味着，据我们所知，控制权并不能到达其中的任何一个

207
00:18:33,549 --> 00:18:38,489
points. We have not yet proven to ourselves that any of these statements can
分数。我们还没有向自己证明这些陈述中的任何一个都可以

208
00:18:38,489 --> 00:18:43,559
execute. And now we just look around in the program and try to find places, where
执行。现在我们只是在程序中四处看看，试着找到一些地方，

209
00:18:43,559 --> 00:18:46,779
the information is inconsistent according to the rules, and then we update the
根据规则信息不一致，然后我们更新

210
00:18:46,779 --> 00:18:51,739
information. Let me switch colors here. So, when we begin, the information is
信息。让我在这里换一下颜色。所以，当我们开始的时候，信息是

211
00:18:51,739 --> 00:18:57,549
consistent everywhere except at this first statement because if x is T before and
除了这第一个语句之外，所有地方都是一致的，因为如果x在和之前是T

212
00:18:57,549 --> 00:19:02,809
we're assigning x to value three. Well, then we should not have x = bottom as the
我们将x赋给值3。那么我们不应该把x=Bottom作为

213
00:19:02,809 --> 00:19:08,600
result. In fact this should be x = three. It should be the appropriate information
结果。实际上，这应该是x=3。它应该是适当的信息

214
00:19:08,600 --> 00:19:12,909
here and once we update that, then we see that this next statement is inconsistent
在这里，一旦我们更新了它，我们就会看到下一条语句是不一致的

215
00:19:12,909 --> 00:19:16,210
because now we know this statement is reachable. We have a statement here and
因为现在我们知道这个声明是可以实现的。我们这里有一份声明

216
00:19:16,210 --> 00:19:22,169
we're concluding that the point after is not reachable which is not, not correct
我们得出的结论是，后面的点是不能到达的，这是不，不正确的

217
00:19:22,169 --> 00:19:26,419
according to the rules. So that I believe that this is an application of rule eight.
按照规定。所以我相信这是第八条规则的应用。

218
00:19:26,419 --> 00:19:32,009
We have a statement here that doesn't refer to x as and so whatever the value of
我们在这里有一条语句，它没有将x称为，所以不管值是多少

219
00:19:32,009 --> 00:19:36,179
x was before the statement becomes the value of x after the statement so that
x在语句之前变成语句后的x值，因此

220
00:19:36,179 --> 00:19:43,179
becomes x = three. And then, now we can see that this information is inconsistent.
变成x=3。然后，现在我们可以看到这个信息是不一致的。

221
00:19:43,879 --> 00:19:49,320
The out of the statement here, is not consistent with the in of the statement
这里的Out of the Statement，与该语句的In不一致

222
00:19:49,320 --> 00:19:52,950
here. In this case, you know, it's just one predecessor. And so, the, the value
这里。在这种情况下，你知道，它只是一个前身。所以，这个，这个价值

223
00:19:52,950 --> 00:19:57,159
should be the same so x should be three. At this point And similarly x should be
应该是一样的，所以x应该是3。在这一点上，类似地，x应该是

224
00:19:57,159 --> 00:20:00,609
three at this point. Here we have an assignment to a variable other than x.
在这一点上是三个人。这里我们对x以外的变量进行赋值。

225
00:20:00,609 --> 00:20:05,119
That should, information should be the same before and after the statements, same
也就是说，语句前后的信息应该是一样的，应该是一样的

226
00:20:05,119 --> 00:20:10,499
thing here. Now we have an assignment x. The point before that assignment is
这里的东西。现在我们有一个赋值x。赋值之前的点是

227
00:20:10,499 --> 00:20:16,759
reachable and so sin ce this is a constant assignment we should know that x is that
由于这是一个常量赋值，我们应该知道x是

228
00:20:16,759 --> 00:20:23,759
constant after the assignment. So here again we have a in and out issue so the
赋值后的常量。所以在这里我们又有了进进出出的问题

229
00:20:23,899 --> 00:20:29,210
out of this statement is not consistent with the in of this statement. So this is
OUT OUT此语句与此语句的IN不一致。那么这就是

230
00:20:29,210 --> 00:20:33,999
going to have to be updated but now, what should this be? Well, we have two
将不得不更新，但是现在，这应该是什么呢？嗯，我们有两个

231
00:20:33,999 --> 00:20:38,039
inconsistent predecessors and so this has to be top and then finally, an assignment
不一致的前置任务，所以这必须是最上面的，最后是一个赋值

232
00:20:38,039 --> 00:20:43,779
to x, sorry, an assignment to a state, to a variable other than x so the information
很抱歉，赋值给一个州，赋值给x以外的变量，所以信息

233
00:20:43,779 --> 00:20:49,139
should just propagate across. And that, same is updated like this so now x is
应该直接传播到。同样的，也是这样更新的，所以现在x是

234
00:20:49,139 --> 00:20:54,649
known to be top afterwards. And now, if we look around at all the program points,
后来被认为是最好的。现在，如果我们看看所有的节目点，

235
00:20:54,649 --> 00:20:58,659
we'd see that all the information is consistent. All the rules, if you, if you,
我们会发现所有的信息都是一致的。所有的规则，如果你，如果你，

236
00:20:58,659 --> 00:21:02,389
if you check whether the information before and after a statement or across a
如果检查语句前后或跨

237
00:21:02,389 --> 00:21:06,229
statement. I'm sorry, or between predecessors and successors is correct,
声明。我很抱歉，或者说前任和继任者之间的关系是正确的，

238
00:21:06,229 --> 00:21:09,599
it's correct everywhere according to the rules and so we're done.
按照规则，到处都是对的，所以我们就完了。

