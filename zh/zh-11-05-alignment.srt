0
00:00:04,270 --> 00:00:08,910
In this brief video we're going to talk about alignment. A very low level but very
在这段简短的视频中，我们将讨论对齐。非常低的水平，但是非常低

1
00:00:08,910 --> 00:00:13,260
important detail of machine architecture that every compiler writer needs to be
每个编译器编写者都需要具备的机器体系结构的重要细节

2
00:00:13,260 --> 00:00:20,260
aware of. First, let's review a few properties of Contemporary machines.
意识到了。首先，让我们回顾一下当代机器的一些特性。

3
00:00:23,020 --> 00:00:30,020
Currently, most modern machines are either 32 or 64 bit meaning you have the 32 or 64
目前，大多数现代计算机不是32位就是64位，这意味着您可以使用32位或64位

4
00:00:30,320 --> 00:00:36,590
bits in a word and the word is actually subdivided into smaller units. We would
字中的比特和该字实际上被细分为更小的单元。我们会

5
00:00:36,590 --> 00:00:42,050
say that there are eight bits in a bye and then four or eight byes in word depending
假设在BYE中有8位，然后在字中有4或8个BYE，视情况而定

6
00:00:42,050 --> 00:00:48,579
whether it's a 32 or 64 bit machine. And other important property is that machines
无论是32位机器还是64位机器。其他重要的属性是机器

7
00:00:48,579 --> 00:00:54,460
can be either byte or word addressable. Meaning that in the native language of the
可以是字节或字可寻址的。也就是说，在他们的母语中

8
00:00:54,460 --> 00:01:00,510
machine in machine code it may be possible to either name only entire words or it may
机器代码中的机器，可以只命名整个单词，也可以

9
00:01:00,510 --> 00:01:07,510
be possible to reference memory at the granule area of individual bytes. They say
可以在单个字节的区块区域引用内存。他们说

10
00:01:07,880 --> 00:01:14,729
that data is word aligned if it begins at a word boundary. So if we think about.
如果该数据开始于字边界，则该数据是字对齐的。所以如果我们想一想。

11
00:01:14,729 --> 00:01:21,389
Data in memory or the organization in the memory and is laid out into bytes. And
存储器中的数据或存储器中的组织，并以字节为单位进行布局。和

12
00:01:21,389 --> 00:01:28,389
let's say. That this is a 32-bit machines so that four bytes make a word and one
比方说。这是一台32位的机器，所以四个字节就是一个字加一个字

13
00:01:28,709 --> 00:01:34,289
word begins here and the next word begins here and if data is allocated on a word
字从这里开始，下一个字从这里开始，如果在一个字上分配了数据

14
00:01:34,289 --> 00:01:40,060
boundary, say, it needs more bytes then that would be a word a line a piece of
边界，比方说，它需要更多的字节，而不是一个字、一行、一段

15
00:01:40,060 --> 00:01:44,240
data. If a piece of data begins in the middle of the word, so let's say for
数据。如果一段数据开始于单词的中间，那么让我们假设

16
00:01:44,240 --> 00:01:48,740
example that begins here, and we have some data that's allocated here, this data is
从这里开始的示例，我们在这里分配了一些数据，这些数据是

17
00:01:48,740 --> 00:01:55,169
not word aligned, doesn't begin on a word boundary And the important property or the
不是单词对齐，不是从单词边界开始，并且重要属性或

18
00:01:55,169 --> 00:02:00,989
important issue is that most machines have some alignment restrictions. So these
重要的问题是，大多数机器都有一些对齐限制。所以这些都是

19
00:02:00,989 --> 00:02:07,219
restrictions come in one of two forms. So, on some machines, if the data is not
限制有两种形式之一。因此，在某些机器上，如果数据不是

20
00:02:07,219 --> 00:02:11,770
properly aligned, meaning that you tried to reference data that isn't aligned the
正确对齐，这意味着您试图引用未对齐的数据

21
00:02:11,770 --> 00:02:17,470
way the machines requires, then the machine may just fail to execute that
机器需要的方式，那么机器可能就不能执行该操作

22
00:02:17,470 --> 00:02:23,640
instruction. Your program may hang or even the machine may hang and it's, but, the
指示。您的程序可能会挂起，甚至机器可能会挂起，但是

23
00:02:23,640 --> 00:02:27,740
important thing is that program will not execute correctly. So there's a, it's
重要的是程序不会正确执行。所以有一个，它是

24
00:02:27,740 --> 00:02:34,740
incorrect to not have the data aligned properly. Now, there are other machines
没有正确对齐数据是不正确的。现在，还有其他的机器

25
00:02:34,950 --> 00:02:39,010
that well, actually al low you to put the data anywhere you like but at a
那好，实际上允许你把数据放在你喜欢的任何地方，但不是放在

26
00:02:39,010 --> 00:02:43,920
significantly cause And maybe that accessing data that is aligned in word
可能会导致访问Word中对齐数据

27
00:02:43,920 --> 00:02:50,220
boundaries is cheaper than accessing that's on non-word boundaries And these
边界比访问非单词边界上的边界更便宜，这些

28
00:02:50,220 --> 00:02:57,220
performance penalties Are often dramatic so it can easily be ten times lower to
性能损失通常是戏剧性的，因此可以很容易地将其降低到

29
00:02:59,460 --> 00:03:06,460
access missile line data than to access data that has the alignment favored by
访问导弹线路数据，而不是访问具有以下有利对齐方式的数据

30
00:03:07,070 --> 00:03:13,400
that particular machine. So let's take a look at an example where data alignment
那台特殊的机器。那么让我们来看一个数据对齐的示例

31
00:03:13,400 --> 00:03:17,850
issue tend to come up. One of the most common situations where we have to worry
问题往往会浮出水面。我们必须担心的最常见的情况之一

32
00:03:17,850 --> 00:03:23,320
about the alignment is in the allocation of strings. So let's say we have this
关于对齐是在字符串的分配上。所以让我们假设我们有这个

33
00:03:23,320 --> 00:03:29,540
string, the string Hello and then we want to put it in memory. So let me draw our
字符串，字符串Hello，然后我们想把它放到内存中。所以让我把我们的

34
00:03:29,540 --> 00:03:36,540
memory as a linear sequence of bytes so I'll mark out some bytes here. And let's
内存是一个线性字节序列，所以我在这里标出一些字节。让我们

35
00:03:40,500 --> 00:03:45,330
assume this is a 32-bit machine so let me make the word boundaries a little bit
假设这是一台32位的机器，那么让我稍微定义一下字边界

36
00:03:45,330 --> 00:03:52,330
heavier boundaries. So, one, two, three, four. Okay. So, there are the, the word
更重的界限。所以，一，二，三，四。好吧。所以，有这个，这个词

37
00:03:54,330 --> 00:03:58,880
boundaries And now let's say there were we are trying to have aligned data, a word
边界，现在假设我们正在尝试将数据对齐，一个词

38
00:03:58,880 --> 00:04:02,620
aligned data and so allocate this string beginning in the word boundary. So, the
对齐的数据，因此从单词边界开始分配此字符串。所以呢，这个

39
00:04:02,620 --> 00:04:09,069
each character will go on the first byte when e, then l, then l, then o. And now,
当e，然后l，然后l，然后o时，每个字符将在第一个字节上。现在，

40
00:04:09,069 --> 00:04:14,190
we may have terminating null depending on how strings are implemented. And let's
根据字符串的实现方式，我们可能会有终止NULL。让我们

41
00:04:14,190 --> 00:04:20,799
assume that we do. And this is fine placement of the strings extremely begins
假设我们是这样做的。这是非常好的琴弦摆放方式

42
00:04:20,798 --> 00:04:27,180
in the word boundary and. That assess by presumably any alignment restrictions of
在“边界和”这个词中。它大概通过任何对齐限制来评估

43
00:04:27,180 --> 00:04:34,180
the machine and now the question is where does the next data item go? So we could
现在的问题是下一个数据项要到哪里去？这样我们就可以

44
00:04:34,240 --> 00:04:39,840
begin the next data item right in the next available byte and that would be good if
从下一个可用字节开始下一个数据项，如果

45
00:04:39,840 --> 00:04:43,729
we are very concerned about not wasting memory. But, I noticed that, that data
我们非常关心不浪费内存。但是，我注意到，那些数据

46
00:04:43,729 --> 00:04:48,370
item will then be were aligned. We may either run into correctness or performance
然后项目将被对齐。我们可能会遇到正确的问题，也可能会遇到性能问题。

47
00:04:48,370 --> 00:04:54,060
problems if the machine has restrictions on the alignment. So, the simple solution
如果机器对齐有限制，则会出现问题。所以，简单的解决方案

48
00:04:54,060 --> 00:04:58,800
here is to simply skip to the next word boundary and allocate the next data item
这里只需跳到下一个词边界并分配下一个数据项

49
00:04:58,800 --> 00:05:05,800
whenever it is on the next word beginning at the next word boundary. And what
只要它在从下一个词边界开始的下一个词上。还有什么

50
00:05:06,680 --> 00:05:13,199
happens to this two bytes here, well these bytes are just junks. T hey're not used at
发生在这两个字节上，好吧，这些字节都是垃圾。它不是用在

51
00:05:13,199 --> 00:05:17,099
all, they never reference by the program. It doesn't matter what they're value is
所有的，他们从来没有被程序引用过。它们的价值是什么并不重要

52
00:05:17,099 --> 00:05:21,819
because the program should never refer to them. It's just unused memory. And note
因为程序永远不应该引用它们。这只是未使用的内存。并请注意

53
00:05:21,819 --> 00:05:26,779
that if we didn't have the terminating zero then there would be the terminating,
如果我们没有终止零点，那么就会有终止点，

54
00:05:26,779 --> 00:05:33,559
no character then and then would be three unused bytes after the string. So to
那么没有字符，那么字符串之后将是三个未使用的字节。所以要

55
00:05:33,559 --> 00:05:37,419
summarize this is the general strategy for dealing with alignment when you have
总结一下，这是在以下情况下处理对齐的一般策略

56
00:05:37,419 --> 00:05:42,689
alignment restrictions. Data begins on the boundaries, typically word boundaries that
对齐限制。数据开始于边界，通常是

57
00:05:42,689 --> 00:05:49,469
are required and if the particular data that you're allocating has a none integral
是必需的，并且如果要分配的特定数据具有非整数

58
00:05:49,469 --> 00:05:53,990
length. Meaning that it doesn't end directly on the next required boundary and
长度。这意味着它不会直接结束在下一个所需的边界上，并且

59
00:05:53,990 --> 00:05:58,699
you just skip over whenever bytes are in between to get the data, the next data
您只需跳过介于两个字节之间的任何时间来获取数据，即下一个数据

60
00:05:58,699 --> 00:06:00,569
that's going to be allocated on the correct boundary.
这将被分配到正确的边界上。

