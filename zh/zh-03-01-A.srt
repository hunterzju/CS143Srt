0
00:00:01,900 --> 00:00:05,190
Welcome back. This is the first video in our long series of the
欢迎回来。这是我们长长的系列视频中的第一个

1
00:00:05,190 --> 00:00:12,190
implementation of compilers, The call from last time that a compiler has five phases.
编译器的实现，从上次调用到编译器有五个阶段。

2
00:00:14,009 --> 00:00:18,400
We're gonna begin by talking about lexical analysis and this will probably take us
我们将从讨论词汇分析开始，这可能需要我们

3
00:00:18,400 --> 00:00:21,480
three to four videos to get through at least and then we'll, we will be moving on
三到四个录像带至少要通过，然后我们会，我们会继续

4
00:00:21,480 --> 00:00:28,320
in order to the other phases. Let's start by looking at a small code fragment. The
以便进入其他阶段。让我们从看一小段代码开始。这个

5
00:00:28,320 --> 00:00:34,090
goal of lexical analysis is to divide this piece of code up. Into lexical units so
词法分析的目标是划分这段代码。转换成词汇单位，因此

6
00:00:34,090 --> 00:00:40,860
things like the keyword if the variable names i, n, j and the relational operator
例如关键字，如果变量名为i，n，j和关系运算符

7
00:00:40,860 --> 00:00:45,370
double-equals and so on. Now as a human being this is. As we discussed last time
两个相等，以此类推。现在，作为一个人类，这就是。正如我们上次讨论的那样

8
00:00:45,370 --> 00:00:50,940
this is a very easy thing to do because there are all kinds of visual clues about
这是一件非常容易做的事情，因为有各种各样的视觉线索

9
00:00:50,940 --> 00:00:55,120
where the units lie Where the boundaries between the different units lie but a
单元所在的位置是不同单元之间的边界所在的位置，但是

10
00:00:55,120 --> 00:01:01,260
program like lexical analyzer. It doesn't have that kind of luxury. In fact what
词法分析器之类的程序。它没有那种奢华。实际上是什么

11
00:01:01,260 --> 00:01:05,119
the, what the likes of analyzer will see is something that looks more like this. So
像分析器这样的人会看到更像这样的东西。所以

12
00:01:05,119 --> 00:01:10,970
here I overwritten, the code out just as a string, with all the white space symbols
在这里，我用所有的空格符号覆盖了代码，它只是一个字符串

13
00:01:10,970 --> 00:01:14,540
included and is from, from this representation, this is a linear string,
包括并且来自该表示，这是一个线性字符串，

14
00:01:14,540 --> 00:01:18,540
you can think of this as bytes in the file that the lexical analyzer has to work and
您可以将其视为文件中的字节，词法分析器必须

15
00:01:18,540 --> 00:01:22,640
it's going to mark through, placing dividers between the different units. So,
它将会打通，在不同的单元之间放置分隔符。所以,

16
00:01:22,640 --> 00:01:27,140
it will recognize that there's a division there, between the white space and the
它将认识到在那里有一个分界线，在空白和

17
00:01:27,140 --> 00:01:32,280
keyword. Then a division after the keyword and there's more a wide space, the open
关键字。然后在关键字后面进行划分，还有更大的空白处，即空白处

18
00:01:32,280 --> 00:01:36,370
paren, the i, another wide space, double equals and so on and it goes through
帕伦，i，另一个宽空格，双等，以此类推，它通过

19
00:01:36,370 --> 00:01:43,280
drawing these lines diving up. The, the string into its lexical unit, So I won't
画这些线往上潜。将字符串转换成它的词汇单元，所以我不会

20
00:01:43,280 --> 00:01:50,280
finish the whole thing but you should get the idea. Now, it doesn't just place these
把整件事做完，但你应该明白其中的意思。现在，它不仅仅是把这些

21
00:01:50,810 --> 00:01:55,250
dividers in the string however. It doesn't just recognize the substrings. It also
不过，字符串中的分隔符。它不仅识别子字符串。它还

22
00:01:55,250 --> 00:02:01,659
needs to classify the different elements of the string according to their role. We
需要根据不同的角色对字符串的不同元素进行分类。我们

23
00:02:01,659 --> 00:02:08,170
call these token classes. Or sometimes, I'll just call it the class of the token.
将这些令牌类称为令牌类。或者，有时我会简单地称它为令牌的类。

24
00:02:08,169 --> 00:02:15,170
And in English, these roles are things like noun, verb, adjective. Okay and there
在英语中，这些角色是名词、动词、形容词。好的，还有这里

25
00:02:18,069 --> 00:02:23,620
is, ther e are many more or at least or some more. And in the programming
就是，还有更多，或者至少更多。并且在编程中

26
00:02:23,620 --> 00:02:30,620
language, the classes, the token classes would be things like identifiers,
语言、类、令牌类可能是标识符之类的东西，

27
00:02:34,730 --> 00:02:41,730
Keywords. I, and then individual pieces of syntax like an open paren or a close
关键字。i，然后是各个语法片段，如开放的Paren或关闭的

28
00:02:44,200 --> 00:02:51,200
paren, those are the classes by themselves. A, numbers. And again, there
帕伦，那些都是自己的课。A，数字。再一次，在那里

29
00:02:53,540 --> 00:02:58,799
are more classes but there's a thick set of classes and each one of these
有更多的类，但是有一组密集的类，其中的每一个

30
00:02:58,799 --> 00:03:05,799
corresponds to some set of strings that could appear in a program. So token
对应于可能出现在程序中的某组字符串。所以令牌

31
00:03:07,279 --> 00:03:14,279
classes correspond to sets of strings, And [inaudible] strings can be described
类对应于字符串集，并且可以描述[听不见的]字符串

32
00:03:14,409 --> 00:03:19,689
relatively straightforwardly so for example. The token class of identifiers in
例如，相对直截了当地说。中的标识符令牌类

33
00:03:19,689 --> 00:03:23,999
most programming languages might be something like strings of letters or
大多数编程语言可能是类似于字符串或

34
00:03:23,999 --> 00:03:28,609
digits, starting with a letter. So for example, a variable name or identifier
数字，以字母开头。例如，变量名或标识符

35
00:03:28,609 --> 00:03:35,609
could be something like a1 or it could be f00 or it could be, b17, all of those
可能是A1，也可能是f00，也可能是B17，所有这些

36
00:03:37,749 --> 00:03:41,169
would be, be valid identifiers and often, often they'll be additional characters
是有效的标识符，并且通常是附加字符

37
00:03:41,169 --> 00:03:45,689
that allowed identifiers but that's the basic idea, Very, very often The main
这允许使用标识符，但这是基本思想，通常主要是

38
00:03:45,689 --> 00:03:52,689
restriction identifiers that they have to start, with a letter, An integer and
它们必须以字母、整数和

39
00:03:52,879 --> 00:03:56,359
typical definition of an integer is a non-empty string of digits. So, something
整数的典型定义是非空的数字字符串。所以，有些东西

40
00:03:56,359 --> 00:04:02,650
like zero or twelve. Okay. One followed by two I should say is actually a string of
比如0或12。好吧。一后面跟着两个，我应该说实际上是一串

41
00:04:02,650 --> 00:04:07,900
number in this case. And, and yeah, it is actually whether admit some numbers you
在这种情况下是号码。而且，是的，实际上是你是否接受了一些数字

42
00:04:07,900 --> 00:04:13,059
might not think of. Things like 001 would be a valid representation of a number or
可能想不到。像001这样的东西将是数字或

43
00:04:13,059 --> 00:04:20,059
even 00 could be a valid integer according to this definition. Keywords are typically
根据该定义，偶数00可以是有效的整数。关键字通常是

44
00:04:20,899 --> 00:04:27,300
just a fix set of reserved words and so here I've listed a few, else, if, begin,
只有一组固定的保留字，所以我在这里列出了几个，其他的，如果，BEGIN，

45
00:04:27,300 --> 00:04:34,120
and so on. And then white space as itself a token class so we actually have to say
诸若此类。然后空格本身就是一个令牌类，所以我们实际上不得不说

46
00:04:34,120 --> 00:04:38,889
in that string which is the representation of the program what every character in
在表示程序字符串中，每个字符

47
00:04:38,889 --> 00:04:43,870
that string, what token or what token class it's a part of. What every substring
该字符串、哪个令牌或它是哪个令牌类的一部分。每个子字符串

48
00:04:43,870 --> 00:04:48,360
is a part of and that includes the white space. So, for example if we have a series
是的一部分，包括空白。例如，如果我们有一系列

49
00:04:48,360 --> 00:04:52,830
of three blanks, if I say if and then an open paren and I have three blanks in
三个空格中，如果我说如果，然后一个空格，帕伦和我有三个空格

50
00:04:52,830 --> 00:04:59,830
here, these three blank s would be grouped together as white space. So the goal of
在这里，这三个空格将组合在一起作为空格。所以我们的目标是

51
00:05:03,569 --> 00:05:08,680
lexical analysis is to classify substrings of the program according to their role.
词法分析是根据程序的子字符串的角色对其进行分类。

52
00:05:08,680 --> 00:05:15,349
This is the, the token class, okay? Is it a keyword, a variable identifier, And then
这是令牌课，好吗？它是关键字、变量标识符，然后

53
00:05:15,349 --> 00:05:21,199
to communicate these tokens, to the parser. So, drawing a picture here, let's
将这些令牌传递给解析器。那么，在这里画一幅画，让我们

54
00:05:21,199 --> 00:05:28,199
switch colors. The lexical analyzer communicates with the parser. Okay and the
切换颜色。词法分析器与解析器通信。好的，还有

55
00:05:33,370 --> 00:05:39,949
functionality here is that, the lexical analyzer takes in a string. Typically
这里的功能是，词法分析器接受一个字符串。通常

56
00:05:39,949 --> 00:05:45,210
stored up, also just a sequence of bytes and then when [inaudible] to the parser is
存储起来，也只是一个字节序列，然后当解析器[听不到]时

57
00:05:45,210 --> 00:05:52,210
sequence or pairs which are the token class. And substring which I would say
作为令牌类的序列或对。以及我想说的子字符串

58
00:05:53,169 --> 00:05:59,479
string here, that, that, of which is the sets of string which is a part of the
字符串在这里，那个，那个，其中是字符串的集合，它是

59
00:05:59,479 --> 00:06:05,770
input along with the class the role that it plays in the in the language, and this
与班级一起输入它在语言中扮演的角色，这

60
00:06:05,770 --> 00:06:12,770
pair together is called a token. So for example, if my string is that f00 = 42,
组合在一起称为令牌。例如，如果我字符串是f00=42，

61
00:06:17,360 --> 00:06:24,360
all right, then that will go to the lexical analyzer and that will come, I'll
好的，然后这些会被送到词汇分析器那里，那会来的，我会

62
00:06:24,460 --> 00:06:31,460
write down here, three tokens. And these would be identifier. Who? Operator say
在这里写下，三个代币。这些将是标识符。谁?操作员说

63
00:06:38,669 --> 00:06:45,669
equals. And. Integer, excuse me 42. And here I just left these things as strings
相等。和。整数，打扰一下42。在这里，我只是把这些东西留作字符串

64
00:06:54,360 --> 00:06:58,099
to, to emphasize that these are strings. So this is not the number 42 at this point
为了强调这些都是字符串。所以在这一点上这不是42号

65
00:06:58,099 --> 00:07:03,840
in time, it's, it's the string 42 which is a plays an integer role in the programming
在时间上，它是字符串42，它在编程中扮演一个整数角色

66
00:07:03,840 --> 00:07:07,789
language. And then these, and when the price that takes this input is this
语言。然后是这些，当接受这一投入的价格是这样的

67
00:07:07,789 --> 00:07:13,120
sequence of pairs. So the lexical analyzer essentially runs over the input string and
配对序列。因此，词法分析器基本上会遍历输入字符串，并且

68
00:07:13,120 --> 00:07:19,990
chunks it up into the sequence of pairs where each pair is a token class and a
将其分块成对序列，其中每对都是一个令牌类和一个

69
00:07:19,990 --> 00:07:26,379
substring of the original input. As we turn to the example from the beginning of
原始输入的子字符串。当我们从一开始就看这个例子时，

70
00:07:26,379 --> 00:07:30,909
the video, here it is written out as a string. And our goal now is to lexically
视频，这里是以字符串的形式写出来的。我们现在的目标是在词汇上

71
00:07:30,909 --> 00:07:37,139
analyze this fragment of code. We want to go through and identify the substrings
分析这段代码。我们要检查并标识子字符串

72
00:07:37,139 --> 00:07:41,710
that are tokens and also their token classes. So, to do this, we're gonna need
它们是令牌，也是它们的令牌类。所以，要做到这一点，我们需要

73
00:07:41,710 --> 00:07:46,900
some token classes. So let's give ourselves some of those to work with.
一些令牌类。因此，让我们给自己一些这样的东西来工作吧。

74
00:07:46,900 --> 00:07:53,900
We'll need white space. And, and so this is sequences of blanks, new lines tab,
我们需要空格。这是一系列的空格，换行符，

75
00:07:55,419 --> 00:08:02,419
things like that with the keywords. And we'll need variables which we'll call
关键字之类的东西。我们需要我们称之为变量的变量

76
00:08:05,129 --> 00:08:12,129
identifiers. And we'll need integers and now I'll call those numbers. Here and then
标识符。我们需要整数，现在我给这些数字取名。此时此刻

77
00:08:17,840 --> 00:08:24,840
we're going to have some other operations some other classes things like open paren
我们会有一些其他的操作，一些其他的类，比如Open Paren

78
00:08:26,099 --> 00:08:30,840
close paren, and semi colon and these are interesting. These three ae interesting
关闭Paren和分号，这些都很有趣。这三个很有趣

79
00:08:30,840 --> 00:08:36,640
because they're single character token classes that is, is a set of strings but
因为它们是单字符令牌类，也就是说，是一组字符串，但是

80
00:08:36,640 --> 00:08:40,400
is only, is only one string in the set so the open paren corresponds to exact
是唯一的，则集合中只有一个字符串，因此打开的Paren对应于Exact

81
00:08:40,400 --> 00:08:44,960
[inaudible] strings that contain only open paren. So often the punctuation marks of
[听不见]仅包含打开的Paren的字符串。通常情况下，标点符号

82
00:08:44,960 --> 00:08:51,000
the language are in token classes all by themselves. Another piece of punctuation
这些语言都是单独出现在符号类中的。另一条标点符号

83
00:08:51,000 --> 00:08:54,940
that we'll add here is, is assignments. That will be a token class by itself
我们在这里要添加的是任务。这本身将是一个令牌类

84
00:08:54,940 --> 00:09:01,460
because it's such an important operation. But, the double equals will class as a
因为这是一个非常重要的手术。但是，双等分将被归类为

85
00:09:01,460 --> 00:09:07,890
relational operator with this class as an operator put it up here. Alright, So now
将这个类作为运算符的关系运算符放在这里。好的，那么现在

86
00:09:07,890 --> 00:09:13,690
what we're going to do is we're gonna go through and tokenized this string and I'm
我们要做的是，我们要检查并标记化这个字符串，我

87
00:09:13,690 --> 00:09:19,090
going to write down for each substring. What class it is. You know, I'm just gonna
我要写下每个子字符串。这是什么班？你知道吗，我正要

88
00:09:19,090 --> 00:09:25,510
use the first letter here of the class. It's indicated just to save time so I
在这里用班级的第一个字母。指示只是为了节省时间，所以我

89
00:09:25,510 --> 00:09:30,780
don't have to write everything up. Hence, we change colors so we can do this in a
没必要把每件事都写下来。因此，我们更改颜色，以便可以在

90
00:09:30,780 --> 00:09:37,780
different color. So, the first token here is white space token and then that
不同的颜色。所以，这里的第一个令牌是空格令牌，然后是

91
00:09:37,940 --> 00:09:43,720
followed by the F keyword. So, okay, And then we have a blank here which is another
后跟关键字F。所以，好的，然后我们这里有一块空白，这是另一块

92
00:09:43,720 --> 00:09:49,660
white space and then the open paren which is its own token class so I'll just leave
空格，然后是开放的Paren，这是它自己的令牌类，所以我就离开

93
00:09:49,660 --> 00:09:56,660
it to identify itself there and then we have an identifier. Okay, White space and
它在那里标识自己，然后我们就有了一个标识符。好的，空格和

94
00:09:58,530 --> 00:10:04,820
then an operator, the double-equals. Another blank so that's white space
然后是一个运算符，即双等式。另一个空格，所以那是空格

95
00:10:04,820 --> 00:10:10,470
followed by another identifier followed by close parens, Again, a punctuation mark in
后面紧跟另一个标识符，后跟右括号，同样是中的标点符号

96
00:10:10,470 --> 00:10:14,840
a token class by itself. And then we have three white space characters so those are
令牌类本身。然后我们有三个空格字符，所以它们是

97
00:10:14,840 --> 00:10:21,840
group together as a white space token, Followed by another identifier and more
作为空格标记组合在一起，后跟另一个标识符等

98
00:10:23,700 --> 00:10:30,230
white space and then another single character token, the assignment operator,
空格，然后是另一个单字符标记、赋值运算符

99
00:10:30,230 --> 00:10:36,310
white space and a number, And then sem i colon again and punctuation mark and a
空格和数字，然后是sem i冒号，再加上标点符号和a

100
00:10:36,310 --> 00:10:42,470
token class by itself. Two white space characters can group together. What
令牌类本身。两个空格字符可以组合在一起。什么

101
00:10:42,470 --> 00:10:49,030
follows in is a keyword, so it gets classified as in the keyword token class.
后面是一个关键字，因此它被归类为Keyword Token类中的关键字。

102
00:10:49,030 --> 00:10:56,030
Another run of white space characters and then another identifier. There's actually
又一串空格字符，然后是另一个标识符。实际上有一个

103
00:10:57,910 --> 00:11:04,300
a blank there where we almost covered it up without marks. The assignment operator
一片空白，我们几乎没留下任何痕迹就把它遮住了。赋值运算符

104
00:11:04,300 --> 00:11:11,300
by itself in a token class, white space, a number, and finally the semi colon by
在标记类中本身、空格、数字，最后是分号by

105
00:11:12,380 --> 00:11:18,760
itself. And there is our tokenization. We've identified the substrings and we've
它本身。这就是我们的象征化。我们已经确定了子串，我们已经

106
00:11:18,760 --> 00:11:21,820
also labeled each one with its token class.
还用它的令牌类给每一个都贴上了标签。

