0
00:00:03,590 --> 00:00:07,859
Welcome back. In this video we're gonna begin our discussion of semantic analysis
欢迎回来。在这段视频中，我们将开始讨论语义分析

1
00:00:07,859 --> 00:00:14,859
with the topic of scope. The motivating problem for talking about scope is that we
以范围为主题。谈论范围的动机问题是我们

2
00:00:16,289 --> 00:00:21,100
want to be able to match identifier declarations with the uses of those
我希望能够将标识符声明与这些声明的使用相匹配

3
00:00:21,100 --> 00:00:24,570
identifiers. We need to know which variable we're talking about when we see
标识符。我们需要知道当我们看到

4
00:00:24,570 --> 00:00:29,640
variable X if variable X might have more than one definition in the program. And
如果变量X在程序中可能有多个定义，则为变量X。和

5
00:00:29,640 --> 00:00:33,910
this is an important aesthetic analysis step in most programming languages,
这是大多数编程语言中重要的美学分析步骤，

6
00:00:33,910 --> 00:00:39,600
including, [inaudible]. So here are a couple of examples taken from cool. This
包括，[听不见]。这里有几个取自COOL的例子。这

7
00:00:39,600 --> 00:00:44,570
definition Y, this declaration Y that it's a string will be matched with this used
定义Y，此声明Y表示它是一个字符串，将与此使用的

8
00:00:44,570 --> 00:00:48,899
and so we'll know at this point here that Y is supposed to be a string and you'll
所以我们现在就知道Y应该是一根弦，你会

9
00:00:48,899 --> 00:00:53,969
get some kind of an air for a compiler because you're trying to add a string and
为编译器获得某种形式的空气，因为您正在尝试添加一个字符串，并且

10
00:00:53,969 --> 00:01:00,239
a number. In the second example Here's a declaration of Y And then in the body of
一个数字。在第二个示例中，这里是Y的声明，然后在

11
00:01:00,239 --> 00:01:04,170
the [inaudible] we, we don't see any use of Y And that, by itself is not an error.
[听不见的]我们，我们看不到Y的任何用处，这本身并不是一个错误。

12
00:01:04,170 --> 00:01:07,280
It's perfectly fine to declare a variable that you don't use. Although you could
声明一个不使用的变量完全可以。尽管你可以

13
00:01:07,280 --> 00:01:11,499
imagine generating a warning for that, that doesn't actually cause the program to
想象一下为此生成警告，这实际上不会导致程序

14
00:01:11,499 --> 00:01:16,829
behave badly, But instead what we see here is a use of X and there's no matching
行为不佳，但我们在这里看到的是X的使用，没有匹配

15
00:01:16,829 --> 00:01:21,049
definitions. So the question is where is the definition of X? We can't see it And
定义。所以问题是X的定义在哪里？我们看不到它，而且

16
00:01:21,049 --> 00:01:25,099
if there is no outer definition of X then we'll get and undefined or undeclared
如果没有X的外部定义，那么我们将获取未定义或未声明的

17
00:01:25,099 --> 00:01:32,099
variable error here at this point. So these two examples illustrate the idea of
此时此处出现变量错误。这两个例子说明了

18
00:01:32,740 --> 00:01:36,479
scope. The scope of an identifier is that portion of a program in which the
范围。标识符的作用域是程序中

19
00:01:36,479 --> 00:01:41,450
identifier is accessible. And just know that the same identifier may refer to
标识符是可访问的。并且只知道相同的标识符可能指的是

20
00:01:41,450 --> 00:01:45,359
different things and different parts of the program. And different scopes for the
不同的东西和节目的不同部分。和不同的作用域

21
00:01:45,359 --> 00:01:50,749
same name can't overlap. So whenever the variable x, for example, means, it can
同名不能重叠。所以无论何时变量x，例如，意味着，它可以

22
00:01:50,749 --> 00:01:55,649
only refer to one thing in an given part of the program. And identifiers can have
在程序的给定部分中只引用一件事。并且标识符可以具有

23
00:01:55,649 --> 00:01:58,609
restricted scope. There are lots of examples, I'm sure you're familiar with
受限制的范围。有很多例子，我相信你一定很熟悉

24
00:01:58,609 --> 00:02:05,380
them, of identifiers whose scope is less than the entire program. Most programming
它们是指范围小于整个程序的标识符。大多数编程

25
00:02:05,380 --> 00:02:09,759
languages today have what is called static s cope. And cool is an example of a
今天的语言有所谓的静电的应对方式。而Cool就是一个例子，

26
00:02:09,758 --> 00:02:13,439
statically scoped language. The characteristic of static scoping is that
静态作用域语言。静电作用域的特点是

27
00:02:13,439 --> 00:02:17,790
the scope of the variable depends only on the program text, not on any kind of
变量的作用域仅取决于程序文本，而不取决于任何类型的

28
00:02:17,790 --> 00:02:22,049
runtime behavior. So what the program actually does at runtime doesn't matter.
运行时行为。所以程序在运行时实际做什么并不重要。

29
00:02:22,049 --> 00:02:28,510
The scope is defined purely syntactically from the way you wrote the program. Now it
作用域完全是根据您编写程序的方式从语法上定义的。现在它

30
00:02:28,510 --> 00:02:32,840
may come as a surprise that there is any alternative to static scoping. In fact,
除了静电作用域之外，还有任何其他选择，这可能会让人感到惊讶。事实上,

31
00:02:32,840 --> 00:02:37,659
probably every language that you have used up to now has had static scoping But there
到目前为止，您使用的每种语言可能都有静电作用域，但是

32
00:02:37,659 --> 00:02:42,069
are a few languages that are, what are called, dynamically scoped. And for a long
有几种语言，也就是所谓的动态作用域。在很长一段时间里

33
00:02:42,069 --> 00:02:45,959
time actually there was an argument about whether static scoping was better than
事实上，关于静电作用域是否比

34
00:02:45,959 --> 00:02:50,120
dynamic scoping. Although today, I think, it is pretty clear that static scoping
动态作用域。虽然今天，我认为，很明显，静电作用域

35
00:02:50,120 --> 00:02:56,629
camp has, has won this discussion But historically, at least, LISP was an
坎普赢得了这场讨论，但至少从历史上看，LISP是一种

36
00:02:56,629 --> 00:03:02,370
example of a dynamically scoped language. And it has switched, in the meantime. This
动态作用域语言的示例。与此同时，它已经发生了变化。这

37
00:03:02,370 --> 00:03:07,280
is actually a long time ago now that it changed, to static scoping. Another
其实已经是很久以前的事了，现在改成了静电作用域。另一个

38
00:03:07,280 --> 00:03:11,569
language which is now mostly of historical interest, it isn't really used anymore,
现在最具历史价值的语言，现在已经不再使用了，

39
00:03:11,569 --> 00:03:16,189
called Snowball, also had, dynamic scoping. And the characteristic of dynamic
叫雪球，也有，动态范围。以及动态性的特点

40
00:03:16,189 --> 00:03:20,769
scoping is that the scope of a variable depends on the execution behavior of the
作用域是指变量的作用域取决于

41
00:03:20,769 --> 00:03:27,239
program. So let's take a look at an example of [inaudible]. So, here we have
程序。那么让我们来看一个[听不见]的例子。所以，我们这里有

42
00:03:27,239 --> 00:03:33,530
some [inaudible] code, and, a couple of different declarations of X, and also,
一些[听不见的]代码，几个不同的X声明，还有，

43
00:03:33,530 --> 00:03:38,579
some different uses of X. Let me erase these. [inaudible] underline so I can use
X的一些不同用法。让我把它们擦掉。[听不见]下划线以便我可以使用

44
00:03:38,579 --> 00:03:43,299
the color to indicate, binding. So, let's take a look at this definition. The
要指示的颜色，绑定。那么，让我们来看看这个定义。这个

45
00:03:43,299 --> 00:03:48,090
question is which of these uses of x, we have three uses of x, actually refer to
问题是，在x的这些用法中，我们有三种用法，实际上指的是x的哪三种用法

46
00:03:48,090 --> 00:03:52,340
that definition. So, it is, in fact, these two, the ones that are outside of the
这个定义。所以，实际上是这两个，在宇宙之外的那两个

47
00:03:52,340 --> 00:03:57,609
inner let. These actually refer to this definition. So, here if you refer to x,
内部信封。这些实际上指的是这个定义。所以，在这里，如果你指的是x，

48
00:03:57,609 --> 00:04:04,609
you get the value zero But, this other definition here. The inner definition of
你得到的值是0，但是，这里有另一个定义。的内在定义

49
00:04:04,900 --> 00:04:11,900
x, is, is used by this use of x. So this use of x, gets this va-, this meaning of
x，is，由x的这个用法使用。所以x的这个用法得到这个va-，这个意思是

50
00:04:12,249 --> 00:04:15,709
x, which in this case, returns the value one. And what's going on here is that
X，在本例中，它返回值1。这里发生的事情是

51
00:04:15,709 --> 00:04:20,069
we're using the most closely, what's called the most closely nested rule. So a
我们使用的是最紧密的，也就是所谓的最紧密嵌套的规则。所以一个

52
00:04:20,069 --> 00:04:25,650
variable binds to the definition that is most closely enclosing it of the same
变量绑定到与其最接近的定义

53
00:04:25,650 --> 00:04:30,340
name. So this x the closest enclosing definition of x is this one, but for these
名字。所以这个x最接近的封闭定义是这个，但是对于这些

54
00:04:30,340 --> 00:04:37,340
two x's, the closest and only enclosing definition of x is this outer one. So in
两个x，最接近也是唯一封闭的x的定义是这个外层的。所以在

55
00:04:39,380 --> 00:04:44,410
dynamically scoped language, a variable would refer to the closest binding in the
动态作用域语言中，变量将引用

56
00:04:44,410 --> 00:04:48,840
execution of the program, meaning the most recent binding of the variables, so here's
程序的执行，这意味着变量的最新绑定，所以这里是

57
00:04:48,840 --> 00:04:53,310
an example, let's say we have a function G, and G defines a variable A, and here's
举个例子，假设我们有一个函数G，G定义了一个变量A，这里是

58
00:04:53,310 --> 00:04:56,830
it initialized say to four, and then it calls another function Another function
它将比方说初始化为4，然后调用另一个函数另一个函数

59
00:04:56,830 --> 00:05:01,090
that isn't in the same syntactic scope. So here I've written F right next to G but
这不在相同的句法范围内。所以这里我在G旁边写了F，但是

60
00:05:01,090 --> 00:05:05,620
actually F could be in some completely other part of the code and F refers to A.
实际上，F可能在代码的某个完全不同的部分，而F指的是A。

61
00:05:05,620 --> 00:05:11,030
And the question is, what is the value of A here? Well. If it's if we dynamically
问题是，这里A的值是多少？井。如果我们动态地

62
00:05:11,030 --> 00:05:15,500
scoped then it's going to be the value that was defined in G and here F of X will
作用域，那么它将是在G中定义的值，这里X的F将

63
00:05:15,500 --> 00:05:20,490
actually return four, that will be the result of this call because this reference
实际返回4，这将是此调用的结果，因为此引用

64
00:05:20,490 --> 00:05:27,039
to A. We'll refer to this binding or this definition of A and G. And, we can't say
A，我们将引用这个约束或A和G的这个定义，而且我们不能说

65
00:05:27,039 --> 00:05:30,360
much more about how dynamics, how dynamics scope works until we talk in a little more
更多关于动力学是如何工作的，动力学范围是如何工作的，直到我们更深入地讨论

66
00:05:30,360 --> 00:05:34,629
detail about how languages are implemented. So we'll talk about dynamic
有关语言如何实现的详细信息。所以我们将讨论动态

67
00:05:34,629 --> 00:05:41,629
scope again a little later on in the course. In Cool, identifier bindings are
本课程稍后再讲一遍。在Cool中，标识符绑定是

68
00:05:42,660 --> 00:05:46,830
introduced by a variety of mechanisms. Now there are class declarations, which
由多种机制引入。现在有了类声明，其中

69
00:05:46,830 --> 00:05:50,879
introduce class names. Method definitions, which introduce method names, And then
介绍类名。方法定义，它引入方法名称，然后

70
00:05:50,879 --> 00:05:55,550
there is several different ways to introduce object, object identifiers. And
有几种不同的方式来引入对象，对象标识符。和

71
00:05:55,550 --> 00:05:59,509
these are the [inaudible] expressions, [inaudible] parameters of functions,
这些是[听不见的]表达式、[听不见的]函数参数、

72
00:05:59,509 --> 00:06:03,080
attribute definitions in classes, and finally in the branches of case
类中的属性定义，最后是Case分支中的属性定义

73
00:06:03,080 --> 00:06:10,080
expressions. It's important to understand that not all identifiers follow the most
表情。重要的是要了解，并不是所有的标识符都遵循最多

74
00:06:10,110 --> 00:06:15,000
closely nested rule that we outlined before. So for example a rather, rather
我们之前概述的紧密嵌套规则。所以举个例子来说，相当，相当

75
00:06:15,000 --> 00:06:20,520
large exception to this rule is class definitions in Cool. So class definitions
此规则的最大例外是Cool中的类定义。所以类定义

76
00:06:20,520 --> 00:06:25,409
cannot be nested. And in fact they are globally visibl e throughout the program.
不能嵌套。事实上，它们在整个计划中都是全球可见的。

77
00:06:25,409 --> 00:06:28,729
And what does that mean? That means that a class name is defined everywhere If it's
那是什么意思？这意味着在任何地方都会定义一个类名，如果它是

78
00:06:28,729 --> 00:06:32,759
defined anywhere in the program, that class name is available for use anywhere
在程序中的任何位置定义，该类名都可以在任何地方使用

79
00:06:32,759 --> 00:06:36,169
in the program or everywhere in the program. And in particular, a class name
在程序中或程序中的任何地方。尤其是类名

80
00:06:36,169 --> 00:06:41,139
can be used before it is defined. So as an example, take a look at this fragment of
可以在定义它之前使用。因此，作为一个示例，请看一下以下片段

81
00:06:41,139 --> 00:06:47,389
cool code here. And here we see that in class foo, we declare y to be of type var
这里的代码很酷。在这里我们可以看到，在类foo中，我们将y声明为var类型

82
00:06:47,389 --> 00:06:52,199
and then later on we declare class var. This is perfectly fine cool code. The fact
然后稍后我们声明class var。这是非常好的很酷的代码。事实是

83
00:06:52,199 --> 00:06:57,689
that var is used before it is defined has no effect on whether the program is
在定义变量之前使用该变量不会影响程序是否

84
00:06:57,689 --> 00:07:04,689
correct. This is a completely legal cool code Similarly with attribute names.
对，是这样。这是一个完全合法的很酷的代码，与属性名称类似。

85
00:07:04,699 --> 00:07:08,720
Attribute names are global within the class in which they are defined, so, I,
属性名称在定义它们的类中是全局的，因此，i

86
00:07:08,720 --> 00:07:13,300
that means they can be used again before they are defined. So for example, I can
这意味着在定义它们之前可以再次使用它们。例如，我可以

87
00:07:13,300 --> 00:07:18,729
define a class foo, and I can define a method that uses attribute a, and then
定义一个类foo，我可以定义一个使用属性a的方法，然后

88
00:07:18,729 --> 00:07:24,789
later on, only later on, do I define what attribute a is, and that is perfectly
稍后，只有稍后，我才定义属性a是什么，这是非常完美的

89
00:07:24,789 --> 00:07:30,379
legal. So normally The list attribute definitions before method definitions, but
合法的。所以通常列表属性定义在方法定义之前，但是

90
00:07:30,379 --> 00:07:34,060
that's not required. A actually the method and attributory definitions can come in
这不是必须的。A实际上方法和属性定义可以在

91
00:07:34,060 --> 00:07:38,150
any order we like, within a class, and in-particular an attribute can be used
可以在类中使用我们喜欢的任何顺序，尤其是属性

92
00:07:38,150 --> 00:07:45,139
before it is defined. Finally method names have quite complex rules. For example, a
在定义它之前。最后，方法名称有相当复杂的规则。例如，一个

93
00:07:45,139 --> 00:07:49,250
method doesn't have to be defined in the class in which it is used. It could just
方法不必在使用它的类中定义。它可能只是

94
00:07:49,250 --> 00:07:54,530
be defined in some pairing class. And also methods can be redefined. So it's possible
在某个配对类中定义。而且还可以重新定义方法。所以有可能

95
00:07:54,530 --> 00:07:59,189
to what's called overwriting of a method and give a method a new definition Even
所谓的方法重写，甚至给方法一个新的定义

96
00:07:59,189 --> 00:08:03,020
though it has been defined before. We don't actually have the language yet to
虽然它以前已经被定义过了。我们实际上还没有相应的语言

97
00:08:03,020 --> 00:08:07,389
talk about these rules with any precision but we'll be going into this in future videos.
请尽可能精确地谈论这些规则，但我们将在未来的视频中对此进行深入探讨。

