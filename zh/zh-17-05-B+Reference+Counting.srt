0
00:00:00,900 --> 00:00:04,400
We're now ready to wrap up our discussion of automatic memory management.
现在我们准备结束对自动内存管理的讨论。

1
00:00:04,400 --> 00:00:07,840
And so I just want to make a few, high level points here. First of all,
所以我只想在这里提出几个高层次的观点。首先，

2
00:00:07,840 --> 00:00:13,480
there's no question that automatic memory management is a great thing. It prevents very
毫无疑问，自动内存管理是一件很棒的事情。它可以防止非常

3
00:00:13,480 --> 00:00:19,189
serious storage bugs, some of the most difficult bugs in programming, and when
严重的存储错误，编程中一些最困难的错误，以及何时

4
00:00:19,189 --> 00:00:24,349
you're writing in the garbage collected language you really have just a
你在用垃圾收集的语言写东西，你真的只有一个

5
00:00:24,349 --> 00:00:28,390
whole class of things you don't have to worry about and so it is certainly a more
你不用担心的所有事情，所以它肯定是一个更多的

6
00:00:28,390 --> 00:00:35,390
productive way to program. So if, if your problem, your program is really a good fit
高效的编程方式。所以，如果你的问题是，你的程序真的很适合

7
00:00:36,000 --> 00:00:40,750
for automatic memory management then you'd be crazy not to use a system that provided
对于自动内存管理，如果不使用提供以下功能的系统，那就太疯狂了

8
00:00:40,750 --> 00:00:44,480
that kind of support. Now, the disadvantage of automatic memory management
那种支持。现在，自动内存管理的缺点是

9
00:00:44,480 --> 00:00:48,530
is that it reduces programmer control. So you don't have control anymore
是它减少了程序员的控制。所以你不再有控制权了

10
00:00:48,530 --> 00:00:53,760
over the layout of data and memory, and you don't have control over when the memory
控制数据和内存的布局，而您无法控制内存何时

11
00:00:53,760 --> 00:00:57,700
is reallocated. So, you neither have control over where the data is in memory
是重新分配的。因此，您既无法控制数据在内存中的位置

12
00:00:57,700 --> 00:01:02,500
and you have only a very limited amount of control over how much memory your
而且您只能非常有限地控制您的内存的大小

13
00:01:02,500 --> 00:01:08,520
program is using, okay? And so if these two things don't matter, if your, if
程序在使用，好吗？所以如果这两件事都不重要，如果你，如果

14
00:01:08,520 --> 00:01:13,430
your application is not extremely data intensive where the precisely out of data
您的应用程序的数据密集度不是很高，因为

15
00:01:13,430 --> 00:01:18,280
memory and how much data is residing in memory is important then garbage collection
内存以及有多少数据驻留在内存中比垃圾收集更重要

16
00:01:18,280 --> 00:01:22,960
will likely work very well. But there are applications particularly high end
可能会工作得很好。但是有一些应用特别高端

17
00:01:22,960 --> 00:01:28,000
data processing and scientific applications which use a lot of data and need
使用大量数据和需求的数据处理和科学应用

18
00:01:28,000 --> 00:01:32,420
to make very, very efficient use of the memory where garbage collection actually
为了非常、非常有效地使用内存，实际上垃圾收集

19
00:01:32,420 --> 00:01:38,030
becomes too inefficient to do a good job and people in those domains still
变得效率太低，无法做好工作，这些领域的人仍然

20
00:01:38,030 --> 00:01:44,710
use manual memory management. But there are some other issues. So, in real time applications
使用手动内存管理。但还有其他一些问题。因此，在实时应用程序中

21
00:01:44,710 --> 00:01:48,299
the pauses can be problematic. So, if you have a program that
停顿可能会带来问题。所以，如果你有一个程序，

22
00:01:48,299 --> 00:01:52,810
needs to meet guaranteed deadlines, many embedded systems that are interacting
需要满足保证的最后期限，许多正在交互的嵌入式系统

23
00:01:52,810 --> 00:01:57,970
with the outside world say controlling dangerous machinery and things like that they
与外界打交道，比如说控制危险的机器之类的东西

24
00:01:57,970 --> 00:02:03,210
have to have response times that are guaranteed to make sure that nothing terrible
必须有保证的响应时间，以确保不会有什么可怕的事情发生

25
00:02:03,210 --> 00:02:08,170
happens. And, and you know, introducing a automatic memory management
时有发生。而且，你知道，引入了自动内存管理

26
00:02:08,169 --> 00:02:12,170
system that might pause for arbitrary amounts of time you know, makes that a very
您知道，系统可能会暂停任意时间，这使得它非常

27
00:02:12,170 --> 00:02:17,519
problematic things guaranty. So, you don't always see garbage selection used in
有问题的事情可以保证。因此，您并不总是看到垃圾选择在

28
00:02:17,519 --> 00:02:22,680
real time applications. Although there has been a lot a progress in the last several
实时应用程序。尽管在过去的几年里已经取得了很大的进步

29
00:02:22,680 --> 00:02:28,359
years on real time garbage collectors. Another issue for every programmer who uses
多年的实时垃圾收集器。对于每个使用

30
00:02:28,359 --> 00:02:33,120
automatic memory management probably will have to face is the problem of memory
自动内存管理可能不得不面对的是内存问题

31
00:02:33,120 --> 00:02:38,180
leaks. So, while automatic memory management prevents you from corrupting your
漏水了。因此，虽然自动内存管理可以防止您损坏您的

32
00:02:38,180 --> 00:02:44,840
memory, it really doesn't prevent you from hanging on to too much data and possibly
内存，它真的不能阻止您保留太多数据，而且可能

33
00:02:44,840 --> 00:02:48,999
affecting the performance of your program dramatically. So, memory leaks are
极大地影响程序的性能。因此，内存泄漏是

34
00:02:48,999 --> 00:02:52,799
possible in garbage collected languages and I would say they are even likely. Said,
在垃圾收集语言中是可能的，我想说它们甚至是可能的。说,

35
00:02:52,799 --> 00:02:57,469
you know, the fact that you're not as aware or not as forced to be aware of how
你知道，事实上你没有意识到或者没有被迫意识到

36
00:02:57,469 --> 00:03:02,120
the memory is being used makes it easier to have memory leaks. And the kind
正在使用的内存更容易发生内存泄漏。而且是那种

37
00:03:02,120 --> 00:03:08,230
of memory leak that you will have in say, a Java program is that you'll have some you
内存泄漏的可能性，比如说，Java程序就是您会有一些

38
00:03:08,230 --> 00:03:14,180
know, some variable say x that points to some data structure and this data structure
知道吗，一些变量比如x指向某个数据结构和这个数据结构

39
00:03:14,180 --> 00:03:19,150
is gigantic, okay? So lets say that this is the abstract syntax tree, in
是巨大的，好吗？假设这是抽象语法树，在

40
00:03:19,150 --> 00:03:25,699
a compiler, alright? Now there may come a point in the computation where you don't need
一个编译器，好吗？现在，计算中可能会出现一个点，您不需要

41
00:03:25,699 --> 00:03:30,430
the abstract syntax tree anymore. So let's say that we have converted to an intermediate
不再使用抽象语法树。所以让我们假设我们已经转换成一个中间体

42
00:03:30,430 --> 00:03:35,309
language and from the abstract syntax tree and now all our processing
语言和抽象语法树，现在我们所有的处理

43
00:03:35,309 --> 00:03:38,480
for the rest of the compilation is going t be on the intermediate language
因为睡觉的汇编将会在中间语言上进行

44
00:03:38,480 --> 00:03:41,999
representation and generating code from that, we never go back and look at the abstract
表示并由此生成代码，我们再也不会回头看抽象

45
00:03:41,999 --> 00:03:47,099
syntax tree again. Well, the compiler I mean, excuse me, the, the garbage
又是语法树。嗯，编译器我是说，打扰一下，垃圾

46
00:03:47,099 --> 00:03:50,129
collector doesn't know that you are not going to use the abstract syntax tree
收集器不知道您不会使用抽象语法树

47
00:03:50,129 --> 00:03:54,109
again in the future. And if you have a variable that's pointing to this gigantic
在未来还会有一次。如果你有一个变量指向这个巨大的

48
00:03:54,109 --> 00:03:58,049
data structure even if you are not using it, it's gong to hang around and
数据结构，即使您不使用它，它也会继续存在

49
00:03:58,049 --> 00:04:02,870
is going to be using up memory. And so the right thing to do is when you reach a point
将会耗尽内存。所以正确的做法是当你到达一个点的时候

50
00:04:02,870 --> 00:04:06,699
in program where you are not going to use this data structure anymore is to assign
在您将不再使用此数据结构程序中，指定

51
00:04:06,699 --> 00:04:11,809
x the null value. You want to assign x to null at that point and essentially
x空值。您希望在该点将x赋值为NULL，并且本质上

52
00:04:11,809 --> 00:04:15,599
dropping this pointer to the data structure. And now the garbage collector,
将此指针放到数据结构中。现在是垃圾收集器，

53
00:04:15,599 --> 00:04:18,810
whatever form it is, mark and sweeps, Stop and copy or reference counting
无论是什么形式，标记和清扫、停止并复制或引用计数

54
00:04:18,810 --> 00:04:22,129
will be able to see that this is no longer reachable and will collect that
将能够看到这不再是可访问的，并将收集

55
00:04:22,129 --> 00:04:27,080
big structure. And this is very, very common in, in production Java programs to
很大的结构。在生产Java程序中，这是非常、非常常见的

56
00:04:27,080 --> 00:04:32,840
have these kinds of memory leaks where you just have pointers that you forgot about to
有这种类型的内存泄漏，您只是忘记了

57
00:04:32,840 --> 00:04:39,550
data that you're no longer going to use. So as a whole, I have conveyed in the
您将不再使用的数据。所以作为一个整体，我在

58
00:04:39,550 --> 00:04:44,289
last few lectures, garbage collection is a very important technique. Every programmer
上几节课，垃圾收集是一项非常重要的技术。每个程序员

59
00:04:44,289 --> 00:04:50,150
should be aware of its benefits and costs and it's also very interesting aspect of programming
应该意识到它的好处和成本，这也是编程的一个非常有趣的方面

60
00:04:50,150 --> 00:04:53,479
language implementation. There are much more advanced garbage collecting
语言实现。有更先进的垃圾收集技术

61
00:04:53,479 --> 00:04:57,889
algorithms than we have discussed in these lectures and the primary dimensions along
算法，比我们在这些课程中讨论的算法和主要维度

62
00:04:57,889 --> 00:05:01,169
which people have thought about improving garbage collection, that is making garbage
人们想过要改进垃圾收集，那就是制造垃圾

63
00:05:01,169 --> 00:05:06,449
collection concurrent. That means allowing the program to continue to run while other
收款并发。这意味着允许程序在其他程序运行的同时继续运行

64
00:05:06,449 --> 00:05:10,740
collection is happening. So the collector is working in the background actively while
正在进行收集。因此收集器在后台积极工作，同时

65
00:05:10,740 --> 00:05:16,599
the program is running. Another thing that's very common actually in, in production
程序正在运行。另外一件事实际上在，在生产中是非常普遍的

66
00:05:16,599 --> 00:05:21,099
collectors is to what's called a generational collector. And the basic idea
收藏家就是所谓的世代收藏家。它的基本理念是

67
00:05:21,099 --> 00:05:28,090
here is that we don't want to keep going over lo oking at objects that are very
这就是我们不想一直看着那些非常重要的物体

68
00:05:28,090 --> 00:05:32,500
long lived on every collection. So, collections happen very frequently and there
长寿地生活在每一个收藏品上。因此，收集非常频繁地发生在那里

69
00:05:32,500 --> 00:05:36,189
will be some objects that just live for very long time, the big data structures
将是一些只存活很长时间的对象，即大数据结构

70
00:05:36,189 --> 00:05:40,979
that hang around for most of the program. And once we have seen them, in
在节目的大部分时间里都挂着。一旦我们看到他们，在

71
00:05:40,979 --> 00:05:44,479
a couple of collections we probably can assume that they're going to be around for
几个收藏品，我们大概可以假设它们将会在

72
00:05:44,479 --> 00:05:49,099
a few more collections. And so in a generational collection sorry in a generational
再来几个收藏品。所以在代际集合中，抱歉在代际集合中

73
00:05:49,099 --> 00:05:52,539
collector older objects, objects that have been around for a while
收集器较旧的对象，已存在一段时间的对象

74
00:05:52,539 --> 00:05:56,889
are put in a seperate area and they're collected less frequently. And this just allows
被放在一个单独的区域，它们被收集的频率较低。而这正好允许

75
00:05:56,889 --> 00:06:01,379
the collector to focus on the objects that are most likely to be garbage
收集器将重点放在最有可能是垃圾的对象上

76
00:06:01,379 --> 00:06:06,659
which are the recently allocated objects. We already talked a little bit about Realtime.
它们是最近分配的对象。我们已经略微谈到了实时技术。

77
00:06:06,659 --> 00:06:10,259
So there are collectors that try to bound the length or the, bound the length
所以有收集器试图限制长度或限制长度

78
00:06:10,259 --> 00:06:15,759
of the maximum pause, the maximum interruption to the program. And finally parallel
在最大暂停中，是对程序的最大中断。最后是并行的

79
00:06:15,759 --> 00:06:19,580
collectors. So collector systems where the garbage, there's actually several
收藏家。所以垃圾收集器系统，实际上有几个

80
00:06:19,580 --> 00:06:24,199
garbage collectors running at the same time and somehow coordinating their actions.
垃圾收集器同时运行，并以某种方式协调它们的操作。

