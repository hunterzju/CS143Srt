0
00:00:01,569 --> 00:00:05,009
In this video, we're gonna talk about regular languages which are used to
在这段视频中，我们将谈论常规语言，这些语言用于

1
00:00:05,009 --> 00:00:12,009
specify the lexical structure of programming languages. To briefly review
指定编程语言的词汇结构。简要回顾一下

2
00:00:14,190 --> 00:00:18,640
the lexical structure of a programming language is a set of token classes. And
编程语言的词汇结构是一组令牌类。和

3
00:00:18,640 --> 00:00:24,060
each one of the token classes consists of some set of strings. Now we need a way to
每个令牌类都由某组字符串组成。现在我们需要一种方法

4
00:00:24,060 --> 00:00:28,789
specify which set of strings belongs to each token class and the usual tool or
指定哪组字符串属于每个令牌类和常用工具，或者

5
00:00:28,789 --> 00:00:34,550
doing that is to use regular languages. So in this video we're going to present like
这样做就是使用常规语言。因此在这段视频中，我们将呈现如下内容

6
00:00:34,550 --> 00:00:39,120
regular languages and define what they are and then in subsequent videos we're going
并定义它们是什么，然后在后面的视频中我们将介绍

7
00:00:39,120 --> 00:00:45,170
to look at some examples using them in actual programming languages. To define
来看一些在实际编程语言中使用它们的示例。要定义

8
00:00:45,170 --> 00:00:52,170
the regular languages, we generally use something called regular expressions. And
对于正则语言，我们通常使用一种叫做正则表达式的东西。和

9
00:00:53,120 --> 00:00:57,649
each regular expression team now it's a set. There are two basic regular
每个正则表达式团队现在都是一个集合。有两个基本规则

10
00:00:57,649 --> 00:01:02,359
expressions. If I write the single character C, that's an expression and what
表情。如果我写下单个字符C，那就是一个表达式

11
00:01:02,359 --> 00:01:09,359
at the notes is a language containing one string. Which is the single character C,
音符上有一种包含一个字符串的语言。它是单个字符C，

12
00:01:12,170 --> 00:01:19,040
okay, That's one basic form so for any single character I get a language with a
好的，这是一种基本形式，所以对于任何单个字符，我都会得到一种带有

13
00:01:19,040 --> 00:01:23,250
one string language with just and then the only string is that character. Another
一种字符串语言，带有Just，然后唯一的字符串是该字符。另一个

14
00:01:23,250 --> 00:01:30,250
basic building block of regular languages is the regular expression epsilon which is
构建正则语言的基础挡路是正则表达式ε，它是

15
00:01:30,259 --> 00:01:36,180
the language. That contains again just a single string, this time the empty string.
语言。它同样只包含单个字符串，这次是空字符串。

16
00:01:36,180 --> 00:01:41,960
And, one thing that's important to keep in mind is that epsilon is not the empty
而且，有一件重要的事情要记住，ε不是空洞的

17
00:01:41,960 --> 00:01:45,840
language, okay? So this is not correspond to the empty string and the empty set of
注意用语，好吗？因此，这与空字符串和空集

18
00:01:45,840 --> 00:01:52,469
strings. It is a language that has a single string namely the empty string.
弦。它是一种只有一个字符串的语言，即空字符串。

19
00:01:52,469 --> 00:01:58,240
Besides the two base regular expressions, there are three compound regular
除了两个基本正则表达式之外，还有三个复合正则表达式

20
00:01:58,240 --> 00:02:04,430
expressions and we'll just go through them here in order. The first is a + b which
表达式，我们将在这里按顺序介绍它们。第一个是a+b，它

21
00:02:04,430 --> 00:02:10,540
corresponds to the union of the languages a and b. So this would be the set a such
对应于语言a和b的并集。所以这将是集合a这样

22
00:02:10,539 --> 00:02:16,410
that a is in the language of big A, little a is in the language of big A union,
A是大A的语言，小A是大A联盟的语言，

23
00:02:16,410 --> 00:02:21,450
little b such that b is in the language of little b so just the union of the two sets
小b，这样b就是小b的语言，所以就是两个集合的并集。

24
00:02:21,450 --> 00:02:27,410
of strings. Concatenation is like string concatenation. So if I have two languages,
一串弦。连接类似于字符串连接。所以如果我有两种语言，

25
00:02:27,410 --> 00:02:33,860
a and b, or two regula r expressions, a and b, then, the concatenation of a and b
a和b，或两个正则表达式a和b，然后是a和b的连接。

26
00:02:33,860 --> 00:02:40,100
Is equal to all of the strings. Little a concatenate with little b where a is drawn
等于所有字符串。小a与小b连接在a所在的位置

27
00:02:40,100 --> 00:02:45,910
from the language big A and little b is drawn from the language big B. And so this
“大A”和“小B”是从“大B”的语言中提取出来的，所以这就是“大B”。

28
00:02:45,910 --> 00:02:50,210
is cross sporadic operation. Choose a string from a. Choose a string from
是交叉零星行动。从中选择字符串。从中选择字符串

29
00:02:50,210 --> 00:02:56,710
capital B and then combine, put them together with the string from a first and
大写B，然后组合，把它们放在一起的字符串从第一个和

30
00:02:56,710 --> 00:03:01,170
choosing strings at all possible ways from all possible combined strings and that's
从所有可能的组合字符串中以所有可能的方式选择字符串，这就是

31
00:03:01,170 --> 00:03:06,170
the language a concatenated with b. And finally there's a kind of looping
语言a和b连接在一起，最后有一种循环

32
00:03:06,170 --> 00:03:12,830
[inaudible]. This is pronounced a star or is called the Kleene iteration and, or the
[听不见]。这发音为一颗星，或称为Kleene迭代，或

33
00:03:12,830 --> 00:03:19,830
Kleene closure. And a star is equal to the union. For i greater than = zero of a to
克莱恩闭合。一颗星等于联盟。对于i大于=0的a到

34
00:03:22,560 --> 00:03:28,040
the i, a to the i-th power. What's that mean? Well, a to the i-th power is just a
i，a的i次方。那是什么意思？嗯，a的i次方只是一个

35
00:03:28,040 --> 00:03:35,040
to concatenated with itself By times. So this is, [inaudible]. And note that
通过时间与自己连接起来。所以这是，[听不见]。请注意，

36
00:03:35,760 --> 00:03:41,260
because i can be = zero, one of the possibilities here is a to the zero, so a
因为i可以=0，这里的一种可能性是a到0，所以a

37
00:03:41,260 --> 00:03:45,840
concatenate with itself zero times and what is that, well that's the language
与自身连接零次，那是什么，好吧，这就是语言

38
00:03:45,840 --> 00:03:50,430
epsilon. So that's the language contain the empty string. So the empty string is
埃普西隆。这就是包含空字符串的语言。因此，空字符串是

39
00:03:50,430 --> 00:03:57,430
always an element of a star. To summarize the last couple of slides the regular
永远是明星的元素。总结一下最后几张幻灯片

40
00:04:00,930 --> 00:04:04,900
expressions over some alphabet sigma. The smallest of that expressions that include
一些字母符号上的表达式。包括以下表达式中最小表达式

41
00:04:04,900 --> 00:04:11,840
the following. So, let's define it so, the regular expression r are equal to epsilon
以下内容。让我们这样定义它，正则表达式r等于ε

42
00:04:11,840 --> 00:04:17,169
is always a regular expression. Or, another possibility is the single
始终是正则表达式。或者，另一种可能性是单人

43
00:04:17,168 --> 00:04:24,169
character c where c is an element of our alphabet, okay? So this is important the
字符c，其中c是我们字母表中的一个元素，好吗？所以这一点很重要

44
00:04:24,220 --> 00:04:28,950
regular expressions define with respect to some alphabet. So we have to pick a family
正则表达式根据某些字母表定义。所以我们得选一个家庭

45
00:04:28,950 --> 00:04:34,480
of characters that will form the base cases of the regular expression and here,
将形成正则表达式的基本情况的字符，并且在这里，

46
00:04:34,480 --> 00:04:37,530
you know? We have one base regular expression for each character in the
你知道?中的每个字符都有一个基本正则表达式。

47
00:04:37,530 --> 00:04:42,930
alphabet. And then we have the compound expressions. So, another possibility Is
字母表。然后我们有复合表达式。所以，另一种可能性是

48
00:04:42,930 --> 00:04:47,050
that a regular expression is the union of two regular expressions. Another one is
正则表达式是两个正则表达式的并集。另一个是

49
00:04:47,050 --> 00:04:52,410
that the concatenation of two regular expressions. And the last one is that it
两个正则表达式的连接。最后一个就是它

50
00:04:52,410 --> 00:04:59,410
could be the iteration of a regular expre ssion. So these five cases are the set of
可能是正则表达式的迭代。那么这五个案例就是

51
00:04:59,520 --> 00:05:06,330
regular expressions over a given alphabet. Now this syntax here for describing the
给定字母表上的正则表达式。现在，这里的语法用于描述

52
00:05:06,330 --> 00:05:11,330
regular expressions with these vertical bars and these different cases on the
带有这些竖线和这些不同大小写的正则表达式

53
00:05:11,330 --> 00:05:15,100
right hand side in this recursive definition of r, If you haven't seen this
在r的递归定义的右侧，如果您还没有看到这个

54
00:05:15,100 --> 00:05:19,330
before, this is called the grammar. And that's not important for this lecture.
在此之前，这被称为语法。这对这堂课来说并不重要。

55
00:05:19,330 --> 00:05:23,990
It's not what this, this lecture is about but we're talking about grammars when we
这不是这个，这堂课讲的是什么，但是我们谈论的是语法，当我们

56
00:05:23,990 --> 00:05:30,990
get to parsing. Next I'd like to do a few examples of actually building regular
开始解析。接下来，我想做几个实际构建规则的示例

57
00:05:31,600 --> 00:05:35,850
languages, writing the mountain and thinking about what they mean. And as we
语言，写山，思考它们的意思。当我们

58
00:05:35,850 --> 00:05:38,450
said, whenever we're talking about a regular language, we first have to say
说，当我们谈到常规语言时，我们首先要说

59
00:05:38,450 --> 00:05:43,420
what the alphabet is. And so, for these examples let's just use the alphabet zero
字母表是什么。因此，对于这些例子，让我们使用字母表0

60
00:05:43,420 --> 00:05:48,750
and one. So these are going to be languages which consists of strings of 0s
还有一个。所以这些将是由0字符串组成的语言

61
00:05:48,750 --> 00:05:53,620
and 1s. And let's start with a very simple example. Let's think about the language
和1。让我们从一个非常简单的例子开始。让我们来考虑一下语言

62
00:05:53,620 --> 00:06:00,620
one star And what language that to note. So, well, we know the definition of star.
一颗星和要注意的语言。所以，好吧，我们知道恒星的定义。

63
00:06:01,900 --> 00:06:08,900
If you remember, that was the union over i greater than = zero of one to the i. Okay.
如果你们还记得的话，那是i上的和大于=1到i的0，好的。

64
00:06:11,490 --> 00:06:17,280
And what is that equal to? Well, that's just one. Repeated i that's what the
这等于什么呢？嗯，这只是其中之一。我重复了一遍，这就是

65
00:06:17,280 --> 00:06:24,280
concatenation of one to the i means, okay. It means one concatenated with itself i
把1连成I的意思，好的。它的意思是一个与它自己连接起来的东西

66
00:06:24,600 --> 00:06:30,960
and so this is going to be the empty string. That's one concatenated with
所以这将是空字符串。这是一个与之相连的

67
00:06:30,960 --> 00:06:36,450
itself zero followed by one followed by eleven followed by one concatenated with
其本身为0，然后是1，然后是11，然后是与连接的1

68
00:06:36,450 --> 00:06:41,690
itself three followed by one concatenated with itself four followed by one
其本身三接一与自身连接四接一

69
00:06:41,690 --> 00:06:47,150
concatenated with itself any number of times. Okay, And this, and so we can see
与其自身连接了任意次数。好的，还有这个，所以我们可以看到

70
00:06:47,150 --> 00:06:54,150
that this is just equal to all strings Of 1s, All right? Now let's do a second
这正好等于所有1的字符串，好吗？现在让我们做一秒钟

71
00:06:56,590 --> 00:07:03,590
example let's think about the language one. Plus zero concatenated with the
让我们考虑一下语言一。加零，并与

72
00:07:10,240 --> 00:07:17,240
language one, okay? And remember how concatenation works is across products we
语言一，好吗？请记住，串联是如何在我们的产品之间工作的

73
00:07:18,110 --> 00:07:23,270
take every string in the first expression and combining with every string in the
将第一个表达式中的每个字符串与

74
00:07:23,270 --> 00:07:30,270
second expression. So this is going to be equal to the strings a b where a is drawn
第二个表达式。所以这将等于画出a的字符串a

75
00:07:32,120 --> 00:07:39,120
from one + zero and b is drawn from one. All right? And, what can that be when
从1+0开始，b从1开始。好的?而且，那会是什么呢？

76
00:07:40,730 --> 00:07:45,490
there's two traces for a. A could be one or zero and b could be one so in fact this
a有两个轨迹，a可以是1也可以是0，b可以是1，所以实际上这是

77
00:07:45,490 --> 00:07:51,560
is equal to the set one, one and the strings one, one, the second [inaudible]
等于集合一，一和弦一，一，二[听不见]

78
00:07:51,560 --> 00:07:58,560
of the strings one, one and one zero. All right? Let's do another examples, slightly
一，零的弦。好的?让我们再举一个例子，稍微

79
00:07:58,889 --> 00:08:03,900
more complex. Let's build up here to having two iterations in a union so have
更加复杂。让我们在这里构建一个联合中有两个迭代

80
00:08:03,900 --> 00:08:08,550
zero + one and think of about what's that equal to but we've already know what
0+1，想一想这等于什么，但是我们已经知道了

81
00:08:08,550 --> 00:08:13,520
one is equal to. That's equal to all strings of ones and so by analogy zero
一等于。这等于所有的1字符串，所以可以类推为0

82
00:08:13,520 --> 00:08:17,669
must be all strings of zeroes then we take the union of those two things so this is
一定都是零的字符串，然后我们取这两个东西的和，所以这是

83
00:08:17,669 --> 00:08:22,889
actually really easy to write out. Let's write them out in this notation so we have
实际上很容易写出来。我们用这个符号把它们写出来，这样我们就有了

84
00:08:22,889 --> 00:08:29,889
zero to the i, for i again equal to zero, okay. That's zero union with. One to the
从零到i，因为i再次等于0，好的。这是零结合。一对一

85
00:08:30,639 --> 00:08:36,300
i or greater than = zero. That's the strings of all one. So there's a set at
i或大于等于零。那是所有人的主线。所以有一个场景设在

86
00:08:36,299 --> 00:08:43,300
this expression to nodes. And for our last example, let's think about zero + one.
将此表达式转换为节点。对于我们的最后一个例子，让我们考虑一下0+1。

87
00:08:45,420 --> 00:08:52,380
Now, that iterated. Okay? So, we put the star around the union of the two
现在，这又重复了一遍。好吧?所以，我们把星星放在两者的结合处

88
00:08:52,380 --> 00:08:56,240
individual character instead of having the star on each character individually in
单个字符，而不是将星号分别放在

89
00:08:56,240 --> 00:09:00,190
taking the union of the two things. So what is the, what is this expression equal
把这两样东西结合起来。那么，这个表达式等于什么呢？

90
00:09:00,190 --> 00:09:07,190
to? Well, let's work with the definition of star. So, we know. That this is the
致？好，让我们来研究一下明星的定义。所以，我们知道。这就是

91
00:09:08,520 --> 00:09:15,230
union over i greater than or equal to zero of zero + one to the i. And what does that
与i的并大于或等于0的0+1到i，这是什么意思？

92
00:09:15,230 --> 00:09:21,750
look like, well, that looks like first of all, there's the empty string, right? And
看起来，嗯，这看起来像是，首先，有一个空字符串，对吗？和

93
00:09:21,750 --> 00:09:28,750
then another string in this language is, is. Excuse me, is drawn from zero + one
那么这种语言中的另一个字符串是，is。打扰一下，是从0+1抽签的

94
00:09:30,560 --> 00:09:34,810
and so this, I shouldn't say another string but another set of strings is the
所以这个，我不应该说另一个字符串，但是另一组字符串是

95
00:09:34,810 --> 00:09:41,810
language zero + one. And then zero + one concatenated with itself, okay? And in
语言0+1。然后0+1和它自己连接起来，好吗？以及在

96
00:09:41,900 --> 00:09:48,900
general, is going to be zero + one concatenated by itself i times. Now what
一般情况下，将会是0+1自身串联的i倍。现在怎么办？

97
00:09:53,940 --> 00:09:57,940
does that mean? That means that every position, if we have a string of length i,
那是不是意味着？这意味着每个位置，如果我们有一根长度为i的弦，

98
00:09:57,940 --> 00:10:03,810
at every position we could pick a zero or a one to plug in and this works for any
在每个位置，我们都可以选择0或1来插入，这对任何

99
00:10:03,810 --> 00:10:07,330
length string. This is gonna be true of strings of every length and so in fact
长度字符串。所有长度的字符串都是如此，所以事实上

100
00:10:07,330 --> 00:10:14,330
this language is just going to be all strings Of 0's and 1's. In fact, what that
这门语言将全部是0和1的字符串。事实上，那是什么

101
00:10:18,890 --> 00:10:22,050
means is this, is the cycle effect on our alphabet. Our alphabet that consists of
意思是，这是我们字母表上的循环效应。我们的字母表包括

102
00:10:22,050 --> 00:10:26,620
zero and one and so this is the set of all strings that you can form over the entire
0加1，这是可以在整个上形成的所有字符串的集合

103
00:10:26,620 --> 00:10:31,710
alphabet, And that has a special name when that happens when you have a regular
字母表，它有一个特殊的名字，当你有一个常规的

104
00:10:31,710 --> 00:10:35,680
expression that denotes the set of all strings you can form out of the alphabet,
表示可以从字母表中形成的所有字符串的集合的表达式，

105
00:10:35,680 --> 00:10:40,300
we write that as sigma star, okay? So just meaning that all the strings of the
我们把它写成西格玛之星，好吗？所以我的意思是所有的字符串

106
00:10:40,300 --> 00:10:47,300
alphabet integrated as many times as you like One last point I wanna make on this
字母表按您的喜好集成了多少次，我想就这一点提出最后一点

107
00:10:47,570 --> 00:10:51,550
before we go on here is that there are actually lots of ways to write each of
在我们继续之前，实际上有很多方法来编写每个

108
00:10:51,550 --> 00:10:55,540
these different languages. There's not a unique way to write these. So for example,
这些不同的语言。没有一种独特的方式来写这些。举个例子，

109
00:10:55,540 --> 00:10:59,390
let's just take this language here. The second one that we did, and let me switch
让我们把这种语言放在这里。我们做的第二个，让我换一下

110
00:10:59,390 --> 00:11:03,180
colors. Another alternative way to write this since we know the meaning of it is
颜色。既然我们知道它的意思，另一种写这个词的方式是

111
00:11:03,180 --> 00:11:08,920
these two strings one, one and one zero, I could have written it as one, one. + one
这两个字符串1，1和1，我可以写成1，1。+1

112
00:11:08,920 --> 00:11:13,390
zero and that would mean exactly the same thing. We used two expressions denote
零，那是完全一样的意思。我们用两个表达式表示

113
00:11:13,390 --> 00:11:20,390
exactly the same set similarly with one star, I could write this as one 'lt;i>. + one.'lt;/i>
完全相同的集合与一颗星类似，我可以写成一‘lt；i>.’+1.‘lt；/i>

114
00:11:20,990 --> 00:11:24,180
And cuz this wouldn't change anything. Adding in the single string one wouldn't
因为这不会改变任何事。添加到单个字符串中不会

115
00:11:24,180 --> 00:11:27,670
change anything since one is already included in one'lt;i>. This might be kind of
更改任何内容，因为其中一个已经包含在一个‘lt；i>中。这可能是一种

116
00:11:27,670 --> 00:11:34,399
a'lt;/i> silly way to write that set but it doesn't matter it has a meaning and it means exactly
A‘lt；/i>写那一套很傻，但这无关紧要，它有意义，它的意思就是

117
00:11:34,399 --> 00:11:37,990
the same things as one'lt;i>. The point again is that there is more than one way'lt;/i>
和一个人一样的事情；我>。同样重要的是，有不止一种方法；/i>

118
00:11:37,990 --> 00:11:44,460
to write down the same set to write, to write, you can write multiple regular expressions
要写下同一组写，写，你可以写多个正则表达式

119
00:11:44,460 --> 00:11:45,930
that denote the same set.
表示相同的集合。

