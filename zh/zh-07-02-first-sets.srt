0
00:00:03,689 --> 00:00:07,939
In the next few videos, we're gonna talk about how to construct LL1 parsing tables.
在接下来的几个视频中，我们将讨论如何构造LL1解析表。

1
00:00:07,939 --> 00:00:11,799
And in this particular video, we're gonna begin by looking at how be build something
在这段特别的视频中，我们将从如何建造一些东西开始

2
00:00:11,799 --> 00:00:18,430
called first sets. Before we get into the main topic of this video, which is
叫做第一盘。在我们进入这段视频的主要主题之前，

3
00:00:18,430 --> 00:00:22,960
something called First Sets, we need to say a little bit about how we're going to
一个叫做第一组的东西，我们需要说一点关于我们将如何

4
00:00:22,960 --> 00:00:26,700
construct parsing tables, or what the conditions are for constructing LL1
构造解析表，或者构造LL1的条件是什么

5
00:00:26,700 --> 00:00:30,200
parsing tables. And so what we're interested in knowing, we're building a,
正在解析表。所以我们感兴趣的是，我们正在建造一个，

6
00:00:30,200 --> 00:00:34,430
we're building a parsing table. And we want to know, for a given non terminal A.
我们正在构建一个解析表。我们想知道，对于给定的非终端A，

7
00:00:34,430 --> 00:00:40,030
Kay, this is the leftmost non terminal. And a given input symbol, the next input
凯，这是最左边的非终点站。和给定的输入符号，下一个输入

8
00:00:40,030 --> 00:00:44,390
symbol T, [cough]. We want to know what con-, under what conditions we will make
符号T，[咳嗽]。我们想知道在什么情况下，我们会做什么？

9
00:00:44,390 --> 00:00:49,659
the move A goes to alpha. We'll replace A, the non terminal by the right hand side,
A步到了阿尔法。我们用右手边的非终结点A来代替，

10
00:00:49,659 --> 00:00:54,249
alpha. Alright and that means that the entry, in th, the AT entry in the table
阿尔法。好的，这意味着表中的AT条目

11
00:00:54,249 --> 00:00:58,079
would be Alpha and there are two situations in which we would like to do
将是Alpha，在两种情况下，我们希望

12
00:00:58,079 --> 00:01:05,079
this. Alright? So the first one is if alpha can derive T in the first position,
这。好吗？所以第一个问题是，如果阿尔法可以在第一个位置导出T，

13
00:01:05,870 --> 00:01:09,970
That means that beginning with alpha, there is some derivation, some sequence of
这意味着从阿尔法开始，有一些派生，一些序列

14
00:01:09,970 --> 00:01:15,000
moves, could be zero or more moves, that will result in a T appearing in the first
移动，可以是零个或多个移动，这将导致T出现在第一个移动中

15
00:01:15,000 --> 00:01:21,820
position of the string that's derived. And if there is such a derivation, then using
派生的字符串的位置。如果有这样的派生，则使用

16
00:01:21,820 --> 00:01:26,200
the move, A goes to alpha, at this point, when T is the next input symbol, would be
在这一点上，当T是下一个输入符号时，移动A到阿尔法，将是

17
00:01:26,200 --> 00:01:30,220
a good idea. Because then we would be able to match the T. Eventually, alpha could
好主意。因为那样我们就能匹配T。最终，阿尔法可以

18
00:01:30,220 --> 00:01:33,930
generate the T, and then we'd be able to match the T, and then continue with our
生成T，然后我们就可以匹配T，然后继续我们的

19
00:01:33,930 --> 00:01:38,730
parsing of the rest of the input. Alright, so in this situation, when alpha can
解析输入的睡觉。好的，在这种情况下，当阿尔法可以

20
00:01:38,730 --> 00:01:43,480
generate a T in the first position, we say that T is an element of the first of
在第一个位置生成T，我们说T是

21
00:01:43,480 --> 00:01:47,720
alpha. T is one of the things, there may be more things. But T is at least one of
阿尔法。这是其中的一件事，可能还有更多的事。但T至少是其中之一

22
00:01:47,720 --> 00:01:52,520
the things that alpha can produce, in the very first position. One of the terminals,
阿尔法可以产生的东西，在第一个位置。其中一个终端，

23
00:01:52,520 --> 00:01:57,930
I should say, that alpha can produce in the very first position. Now, there's
我应该说，阿尔法可以在第一个位置产生。现在，这里有

24
00:01:57,930 --> 00:02:02,460
another situation, a slightly, more complicated situation, in which we might
另一种情况，一种稍微更复杂的情况，在这种情况下，我们可能

25
00:02:02,460 --> 00:02:07,370
want to make the move, or we wou ld want to make the move, That if we see A as the
想要采取行动，否则我们就会采取行动，如果我们把A视为

26
00:02:07,370 --> 00:02:12,530
leftmost non terminal, and T as the next input that we'd like to replace A by, A
最左边的非终端，T作为下一个输入，我们希望将A替换为A，A

27
00:02:12,530 --> 00:02:18,500
goes to alpha. Alright? And the situation here that we're going to consider is what
去阿尔法。好吗？我们要考虑的情况是

28
00:02:18,500 --> 00:02:25,500
if, alpha, cannot derive T? So alpha cannot, in any sequence of moves, derive
如果α不能导出T？因此，在任何一系列动作中，阿尔法都不能派生出

29
00:02:27,040 --> 00:02:32,260
T. So, in fact, what does that mean? That means T is not. Gonna be in the first of
那么，事实上，这是什么意思呢？这意味着T不是。将会是第一个

30
00:02:32,260 --> 00:02:37,730
alpha, okay? So, and our next input symbol is T. We're still looking at the situation
阿尔法，好吗？那么，我们的下一个输入符号是T。我们还在观察情况

31
00:02:37,730 --> 00:02:41,990
where we have A as the leftmost non terminal, and T as the next input symbol.
其中A是最左边的非终端，T是下一个输入符号。

32
00:02:41,990 --> 00:02:46,470
Now, This doesn't sound very promising. Because we have an input symbol T that we
现在，这听起来并不是很有希望。因为我们有一个输入符号T，我们

33
00:02:46,470 --> 00:02:51,760
want to match And the leftmost non terminal that we've got, up next, that we
想要匹配和我们最左边的非终结点，接下来，我们

34
00:02:51,760 --> 00:02:57,150
have to do a derivation for, can't generate the T. And so, but it turns out
必须对其进行推导，不能生成T，所以，结果是

35
00:02:57,150 --> 00:03:02,060
that, this, that it's not hopeless. That we actually may still be able to parse the
那个，这个，那个不是没有希望的。我们实际上可能仍然能够解析

36
00:03:02,060 --> 00:03:08,730
string, even in that situation, provided that alpha can go to epsilon. So if alpha
字符串，即使在这种情况下也是如此，前提是alpha可以转到epsilon。所以如果阿尔法

37
00:03:08,730 --> 00:03:12,840
can derive epsilon, if alpha can go away completely, and we can basically erase the
可以导出ε，如果α可以完全消失，我们基本上可以擦除

38
00:03:12,840 --> 00:03:18,560
alpha, then it could be that some other part of the grammar can come in and match
Alpha，那么可能是语法的某个其他部分可以进入并匹配

39
00:03:18,560 --> 00:03:22,349
the T. Alright and so, in what situation would that be? Well, here are the
好的，那么，在什么情况下呢？好的，这就是

40
00:03:22,349 --> 00:03:27,430
conditions. So, if A goes to Alpha as a production and alpha can go to epsilon via
条件。因此，如果A作为产品进入Alpha，而Alpha可以进入epsilon Via

41
00:03:27,430 --> 00:03:32,420
zero or more moves. Alright, so alpha can eventually be completely wiped out.
零个或多个动作。好的，所以阿尔法最终可以被完全消灭。

42
00:03:32,420 --> 00:03:39,420
Alright, and. If T can come immediately after A in the grammar, so there has to be
好的，还有。如果在语法中，T可以紧跟在A之后，那么一定有

43
00:03:39,750 --> 00:03:44,720
a derivation for this to make sense, there should be a derivation where we are using
要让这个派生有意义，应该有一个派生，我们使用的地方应该有一个派生

44
00:03:44,720 --> 00:03:48,190
the A, okay? With the A as an important piece of the derivation you know, from the
A，好吗？A作为派生的一个重要部分，你知道，从

45
00:03:48,190 --> 00:03:52,860
start symbol. And what comes immediately after the A is the next input symbol that
开始符号。紧跟在A后面的是下一个输入符号

46
00:03:52,860 --> 00:03:59,500
we are expecting. So in this situation, if we could get rid of the A, Then by having
我们在等着呢。所以在这种情况下，如果我们可以去掉A，那么通过

47
00:03:59,500 --> 00:04:03,610
a go at the epsilon then we'll still be on track cuz potentially some other piece of
在ε上试一试，那么我们还会在轨道上，因为可能会有其他的一些碎片

48
00:04:03,610 --> 00:04:10,610
grammar could come in and match the T. Alright. So in that case, we would say
语法可能会出现，并与T匹配。好的。所以在这种情况下，我们会说

49
00:04:10,730 --> 00:04:15,160
what, what do we have to test for? What, under what conditions can we do it? Well
什么，我们要检测什么？什么，什么条件下才能做呢？井

50
00:04:15,160 --> 00:04:19,549
we want to be able to do this if T can come after A in the grammar and we say
我们希望，如果在语法中，T可以在A之后，我们就能做到这一点

51
00:04:19,548 --> 00:04:25,320
that T is in the follow of A. T is one of the things that can come after A in the
T在A之后，T是在A之后的事物之一

52
00:04:25,320 --> 00:04:29,770
grammar. Now this is an important point, and a place where people sometimes get
语法。这是一个重要的观点，人们有时会在这个地方

53
00:04:29,770 --> 00:04:34,400
confused and so I want to, to emphasize this, notice that. We are not talking
我很困惑，所以我想强调这一点，注意这一点。我们不是在说话

54
00:04:34,400 --> 00:04:41,400
about A deriving T. A does not produce T. T appears in a derivation After A, okay?
关于A的派生，A不会产生T，T出现在A之后的派生中，好吗？

55
00:04:42,240 --> 00:04:46,600
So the A and the T here it, it doesn't have anything to do with what A produces.
所以这里的A和T，和A产生的东西没有任何关系。

56
00:04:46,600 --> 00:04:51,480
This has to do with where A can appear in derivations, alright? So if the T can come
这与A在派生中出现的位置有关，对吗？所以如果T能来

57
00:04:51,480 --> 00:04:56,040
after the A in a derivation, then we say the T is in the follow of A. Right. So in
在派生中的A之后，我们说T跟在A的后面。所以在

58
00:04:56,040 --> 00:05:01,570
this video we're gonna focus on, only this first part, the first sets. In the next
我们要关注的这段视频，只有第一部分，第一组。在接下来的时间里

59
00:05:01,570 --> 00:05:06,090
video, we'll look at the follow sets, and then the video after that, we'll talk
视频，我们将看下面的场景，然后视频之后，我们将讨论

60
00:05:06,090 --> 00:05:13,090
about how to put it all together to build this parcing table. [sound] All right,
关于如何把所有的东西放在一起来做这张餐桌。[声音]好的，

61
00:05:14,000 --> 00:05:19,639
let's focus now on our main topic for this video, the computation of first sets. So
现在让我们来关注一下这个视频的主要话题，第一个集合的计算。所以

62
00:05:19,639 --> 00:05:23,060
here, first of all, we have to have a definition of what a first set is. And so
在这里，首先，我们必须对什么是第一组有一个定义。因此，

63
00:05:23,060 --> 00:05:28,660
we're going to say, for an arbitrary, string. This is actually, x here is a
我们会说，对于任意的字符串。这实际上是，x在这里是一个

64
00:05:28,660 --> 00:05:31,520
string. Could be a ter-, could be a single terminal, it could be a single
字符串。可以是TER-，可以是单个终端，也可以是单个终端

65
00:05:31,520 --> 00:05:35,440
non-terminal, or it could be a string of grammar symbol. All right, and if that If
非终止符，或者它可以是语法符号串。好的，如果这样的话

66
00:05:35,440 --> 00:05:40,630
that X, can derive T in the first position through some sequence of moves, then we
那个X，可以通过一些动作序列在第一个位置导出T，然后我们

67
00:05:40,630 --> 00:05:45,889
say that T, T is a terminal here, is in the first of X, okay? So all the possible
假设T，T是这里的终端，在X的第一个，好吗？所以所有可能的

68
00:05:45,889 --> 00:05:51,900
terminals that can be derived in the first position will be in the first, of X Now
现在，可以在第一个位置派生的端子将位于X的第一个位置

69
00:05:51,900 --> 00:05:57,150
For technical reasons that will become clear in a minute we also need to keep
出于技术上的原因，我们还需要保持

70
00:05:57,150 --> 00:06:03,419
track of whether x can produce epsilon. Now so even though epsilon is not a
追踪x是否能产生ε。所以，尽管epsilon不是一个

71
00:06:03,419 --> 00:06:09,530
terminal symbol, if x can go to epsilon be a zero or more steps then we'll say that
终端符号，如果x可以到ε是零或更多的步长，那么我们就说

72
00:06:09,530 --> 00:06:13,030
epsilon is in the first of x and this turns out to be needed. We need to keep
Epsilon在x的第一个，这是需要的。我们需要保持

73
00:06:13,030 --> 00:06:19,130
track of whether x whether things can produce epsilon in order to compute all
跟踪x是否可以产生ε，以便计算所有

74
00:06:19,130 --> 00:06:25,320
the terminals that are in the first set of a given grammar symbol. Alright so now
在给定语法符号的第一组中的终端。好的，那么现在

75
00:06:25,320 --> 00:06:30,270
here's a sketch of the algorithm. So first of all for any terminal symb ol the only
这是算法的草图。因此，首先，对于任何终端符号而言，

76
00:06:30,270 --> 00:06:34,960
thing the terminals can produce are themselves. So every terminal symbol in
终端可以产生的东西就是它们自己。所以这里的每个端子符号

77
00:06:34,960 --> 00:06:41,960
here I should just say T is the terminal. So for every terminal symbol, it is in,
这里我应该说T是终点站。所以对于每个端子符号，它都在，

78
00:06:41,970 --> 00:06:48,150
it's first set just consists of a the site containing only that terminal. All right,
它的第一组只包含一个只包含该终端的站点。好的,

79
00:06:48,150 --> 00:06:53,729
so now let's consider a non terminal X, okay so here X is a non terminal, and what
现在让我们考虑一个非终结点X，好的，这里X是一个非终结点，那么

80
00:06:53,729 --> 00:06:57,740
it would be in the conditions when epsilon is in the first of X, well, if there's a
当ε在X的第一个位置时，它会处于这样的条件下，嗯，如果有一个

81
00:06:57,740 --> 00:07:04,060
epsilon production, if X goes immediately to epsilon, then, obviously, X can produce
ε生产，如果X立即到ε生产，那么很明显，X可以生产

82
00:07:04,060 --> 00:07:08,110
epsilon, epsilon should be in the first of X But also, if X can produce any other
Epsilon，epsilon应该在X的第一个，但如果X可以产生任何其他

83
00:07:08,110 --> 00:07:14,669
right hand side Alright, Where everything on the right hand side can go to epsilon.
右手边好的，右手边的所有东西都可以到ε。

84
00:07:14,669 --> 00:07:17,949
Well, then the whole right hand side can go to epsilon. So, in that case also
好的，那么整个右手边就可以到埃西隆了。那么在这样的情况下，也

85
00:07:17,949 --> 00:07:23,300
epsilon is in the first of X. I noticed that this will only happen if this, it can
Epsilon在X的第一个，我注意到只有在这个，它可以的情况下，这种情况才会发生。

86
00:07:23,300 --> 00:07:29,180
only, it can only potentially happen if all the EIS here are non-terminal symbols
只有当这里的所有EIS都是非终端符号时，才有可能发生这种情况

87
00:07:29,180 --> 00:07:32,930
themselves. Obviously if there's any terminal symbols on the right hand side
他们自己。显然，如果右手边有任何端子符号

88
00:07:32,930 --> 00:07:37,669
then that production can never go completely to the empty string. Okay. It
那么生产就永远不可能完全走到空的地步。好吧。它

89
00:07:37,669 --> 00:07:41,979
will always produce at least that, that terminal But if every non-terminal. On the
总会产生至少那个，那个终端，但如果每个非终端。在

90
00:07:41,979 --> 00:07:45,330
right-hand side can produce epsilon. Meaning epsilon's in the first of all
右手边可以产生ε。意思是epsilon在第一位

91
00:07:45,330 --> 00:07:50,660
those non-terminals. And there are no terminals on the right hand side. Then,
那些非终结者。而且右手边没有终端。然后,

92
00:07:50,660 --> 00:07:57,660
Then, epsilon will be in the first of X. Alright there's one other situation and
然后，epsilon会在X的第一个，好的，还有一个情况，

93
00:07:58,139 --> 00:08:02,850
here's where we make use of the fact that we are keeping track of where epsilon can
在这里，我们利用了这样一个事实，即我们正在跟踪epsilon可以在哪里

94
00:08:02,850 --> 00:08:09,550
be produced alright. So let's say that we have a production like this okay and let's
做好了就可以了。假设我们有这样一部作品，好的，让我们

95
00:08:09,550 --> 00:08:16,009
say the first N symbols A1 through AN here can all go to epsilon. So this can all
假设前N个符号A1到An在这里都可以去epsilon。所以这一切都可以

96
00:08:16,009 --> 00:08:22,569
disappear and can be replaced by the empty string. What does that mean, so if we have
消失，并可由空字符串替换。这是什么意思，所以如果我们有

97
00:08:22,569 --> 00:08:29,569
derivation like this? Okay were, to some number of moves it goes to Alpha, well
像这样的推导吗？好的，对于一些动作，它是去阿尔法的，嗯

98
00:08:30,590 --> 00:08:37,450
that means that X can through a bunch of moves here to derive Alpha itself, okay.
这意味着X可以在这里通过一系列动作来推导出Alpha本身，好的。

99
00:08:37,450 --> 00:08:41,909
So, X will go to Alpha by wiping out all of the AIs, and I forgot to put the alpha
所以，X将通过清除所有的人工智能进入Alpha，而我忘了把Alpha

100
00:08:41,909 --> 00:08:47,100
here on the end, there should be an Alpha after As have been there. Okay? And wh at
在这里的尽头，应该有一个阿尔法之后，就像已经在那里。好吧?以及在什么时候

101
00:08:47,100 --> 00:08:51,370
does this mean? Well this means that anything that is in the first of alpha is
这是不是意味着？这意味着阿尔法的第一部分中的任何东西都是

102
00:08:51,370 --> 00:08:56,200
going to also be in the first of X. All right? So, if any prefix of the right-hand
也会是X的第一个，好吗？所以，如果右手边的任何前缀

103
00:08:56,200 --> 00:08:59,640
side can disappear then the remaining suffix, the alpha, it doesn't matter what
边可以消失，然后剩下的后缀，字母，不管是什么都无关紧要

104
00:08:59,640 --> 00:09:06,640
the alpha is, is left. Then the first of alpha will be a subset of the non-terminal
阿尔法是，是左边。则阿尔法的第一个将是非终端的子集

105
00:09:07,170 --> 00:09:12,690
on the right, left hand side of X in this case. All right? Okay? Alright. So that is
在这种情况下，在X的右手边，也就是左手边。好的?好吧?好的。那就是说

106
00:09:12,690 --> 00:09:18,000
a definition of a first sets and how you compute them. Okay. And we have to, we
第一个集合的定义以及如何计算它们。好吧。我们必须这样做，我们

107
00:09:18,000 --> 00:09:22,510
have to compute them for the terminals and for the non-terminals, alright? That's
必须为终端和非终端计算它们，好吗？那是

108
00:09:22,510 --> 00:09:27,050
what these; these second two rolls here cover the non-terminals. I just noticed,
这些是什么；这里的第二个两卷盖的是非终端。我刚注意到，

109
00:09:27,050 --> 00:09:30,920
as I mentioned here at the beginning that this is well defined for any other
正如我在开始时提到的，这对于任何其他

110
00:09:30,920 --> 00:09:36,200
Grammar, sequence as well. I mean, excuse me, any other string in the grammar as
语法，顺序也一样。我是说，打扰一下，语法中有没有其他字符串

111
00:09:36,200 --> 00:09:38,970
well. It doesn't, if I, if I know how to compute it for terminals, I know how to
井。它不是，如果我，如果我知道如何计算终端的它，我知道如何

112
00:09:38,970 --> 00:09:42,670
compute it for non terminals. Then I can compute it for arbitrary strings in the
为非终端计算它。中的任意字符串计算它。

113
00:09:42,670 --> 00:09:49,670
grammar, as well. Let's analyze, do an example. Let's take a look at this grammar
语法也一样。我们来分析一下，举个例子。让我们来看看这个语法

114
00:09:51,680 --> 00:09:57,070
and let's see if we can compute the first sets. Let's start with the easy stuff.
让我们看看我们是否能计算出第一个集合。让我们从简单的事情开始吧。

115
00:09:57,070 --> 00:10:03,970
Let's do the terminal symbols. Alright So, for the terminals, it's really, you know,
我们来做终端符号吧。好的，那么对于航站楼来说，真的，你知道，

116
00:10:03,970 --> 00:10:10,970
extremely straightforward. The first of plus is plus. The first of times Is just
非常直截了当。加号的第一个是加号。第一个时代就是

117
00:10:11,560 --> 00:10:16,240
times every terminal is in a, has its first set, the first set of every terminal
乘以每个终端在一个，有它的第一个集合，每个终端的第一个集合

118
00:10:16,240 --> 00:10:21,870
is just the second term in that terminal and so on for the others, and this is not
只是该终端的第二个术语，对其他终端依此类推，这不是

119
00:10:21,870 --> 00:10:28,870
worth writing out. So it'll be the first of open paren will just be open paren, the
值得写出来。所以这将是第一个开放的帕伦将只是开放的帕伦，

120
00:10:29,450 --> 00:10:35,100
first of close paren will be just close paren and I think that is all. Now we have
首先，帕伦只会很接近，帕伦，我想仅此而已。现在我们有了

121
00:10:35,100 --> 00:10:41,170
to do ants as well, okay? Alright, so these are the first sets for the terminal
也要做蚂蚁，好吗？好的，这是航站楼的第一组

122
00:10:41,170 --> 00:10:44,820
symbols. And now let's look at something more interesting; let's talk about the
符号。现在让我们来看一些更有趣的事情，让我们来谈谈

123
00:10:44,820 --> 00:10:51,820
first of the non terminal symbols. So What about the first of E? Well, if we look at
第一个非端子符号。那么E的第一个呢？嗯，如果我们看一下

124
00:10:55,070 --> 00:11:00,649
the production for E, let's remember our rules. So we know that anything that's in
E的制作，让我们记住我们的规则。所以我们知道里面的任何东西

125
00:11:00,649 --> 00:11:07,649
the first of T will also be in the first of E. So the first of T Is a subset of th
T的第一个也将位于E的第一个。因此，T的第一个是

126
00:11:09,089 --> 00:11:12,920
e first of E. Okay so in order to know what the first of E is we have to know
E的第一个，好的，为了知道E的第一个是什么，我们必须知道

127
00:11:12,920 --> 00:11:17,440
what the first of T is. At least to know part of the first of E we have to know the
T的第一个是什么。至少要知道第一个E的一部分，我们必须知道

128
00:11:17,440 --> 00:11:23,890
first of T. So let's move on then to first computing. The first of T Let's, let's try
首先是T，那么让我们接着来看第一个计算。T的第一个让我们，让我们试一试

129
00:11:23,890 --> 00:11:29,140
to get that set. Now the first of T is actually pretty easy because if we look at
才能拿到那套。现在T的第一个实际上非常简单，因为如果我们看一下

130
00:11:29,140 --> 00:11:33,580
the productions for T we can see that they produce terminals in the first position.
T的乘积，我们可以看到它们产生第一个位置的终端。

131
00:11:33,580 --> 00:11:39,610
All right? So the only possibility in the, the only possibilities in the first of T
好的?所以唯一的可能性在，唯一的可能性在第一个T

132
00:11:39,610 --> 00:11:43,950
are open per en and int. And since there are only two productions for T and both of
是PEN和INT开放的。因为T只有两部作品，而且两部都是

133
00:11:43,950 --> 00:11:47,940
them have a terminal in the very first position, there's no other terminal
他们在第一个位置有一个航站楼，没有其他的航站楼

134
00:11:47,940 --> 00:11:52,230
symbols that could be produced in the first position by T. So we can just read
可以由T在第一个位置产生的符号，所以我们可以只读

135
00:11:52,230 --> 00:11:59,230
off the first of T directly from the grammar. And it's the open paren in int.
直接从语法中去掉T的第一个。这是INT中的开场帕伦。

136
00:11:59,420 --> 00:12:06,140
Okay? Now, let's return to thinking about the first of E. So remember there was
好吧?现在，让我们回过头来想一下E的第一个，所以请记住

137
00:12:06,140 --> 00:12:10,540
another case that we need to keep track of. Or, sorry, that we have to consider.
又一个我们需要追踪的案子。或者，抱歉，这是我们必须考虑的。

138
00:12:10,540 --> 00:12:15,829
So, it could be, or, clearly everything in the first of T is in the first of E and
所以它可能是，或者，很明显，所有T的第一个都在E的第一个，

139
00:12:15,829 --> 00:12:20,740
we've already noted that down. But if T can go to epsilon then things that are in
我们已经把这一点记下来了。但是如果T可以到ε上，那么里面的东西

140
00:12:20,740 --> 00:12:25,769
the first of X Could also be in the first of E. And now we've computed the first of
X的第一个也可能是E的第一个，现在我们已经计算了第一个

141
00:12:25,769 --> 00:12:30,370
T and we see that epsilon is not in there. The first of T always generates at least
我们看到ε不在那里。T的第一个始终至少生成

142
00:12:30,370 --> 00:12:36,459
one terminal symbol, and so there'll never be a situation in which X can contribute
一个终端符号，所以永远不会有X可以做出贡献的情况

143
00:12:36,459 --> 00:12:39,850
to the first of E because T is always guaranteed to generate at least one
设置为E的第一个，因为T始终保证生成至少一个

144
00:12:39,850 --> 00:12:44,480
terminal. So in fact this subset that we wrote up here is not a subset at all, it's
终点站。所以实际上我们在这里写的这个子集根本不是一个子集，它是

145
00:12:44,480 --> 00:12:48,360
an inequality. The first of T and the first of E are equal. So the first of E is
一种不平等。T的第一个和E的第一个相等。所以E的第一个是

146
00:12:48,360 --> 00:12:55,339
also open per rand and Nth. All right? So now let's take a look at the first of X.
也是按兰特和第N次开放的。好的?现在我们来看一下X的第一个。

147
00:12:55,339 --> 00:13:01,850
Okay? So, the first effects well clearly pluses in the first of X because one
好吧?所以，第一个效应很明显加上X的第一个，因为1

148
00:13:01,850 --> 00:13:06,670
production per X plus immediately in the first positions, so we must add plus to
每个X加上第一个位置的产量，所以我们必须加到

149
00:13:06,670 --> 00:13:11,899
the first of X. And then X has an epsilon production so it can also go to epsilon so
第一个X，然后X有一个epsilon生产，所以它也可以去epsilon，所以

150
00:13:11,899 --> 00:13:18,899
that means epsilon is also in the first of X And what about the first of Y. Well, the
这意味着epsilon也在X的第一位，那么Y的第一位呢？

151
00:13:21,440 --> 00:13:24,890
fir st of Y, it's a similar structure to the productions request, we see we have
首先是Y，它的结构与生产要求相似，我们看到我们有

152
00:13:24,890 --> 00:13:27,450
one production here in the [inaudible] of the terminal in the first position, and
在第一个位置的终端的[听不见的]这里制作一部作品，以及

153
00:13:27,450 --> 00:13:32,829
that's times. So the first of y has times in it. And then, y also has an epsilon
这就是时代。所以第一个y是有时间的。然后，y也有一个ε

154
00:13:32,829 --> 00:13:37,880
production. Y can go directly to epsilon, so epsilon is also in the first of y.
制作。可以直接到epsilon，所以epsilon也在y的第一个。

155
00:13:37,880 --> 00:13:43,740
Alright? And that's actually it for this grammar. These are the complete first sets
好吗？实际上，这个语法就是这样。这些是完整的第一套

156
00:13:43,740 --> 00:13:47,889
for all of the symbols of the grammar. The terminals just have themselves in their
所有的语法符号。航站楼里只有他们自己

157
00:13:47,889 --> 00:13:53,389
first sets and then the non-terminals we computed have these sets. So that
首先是集合，然后是我们计算的非终端集合。所以

158
00:13:53,389 --> 00:13:57,880
concludes our discussion of first sets and in the next video, we're going to take a
结束了我们对第一组的讨论，在下一个视频中，我们将

159
00:13:57,880 --> 00:14:00,149
look at computing follow sets.
请看计算跟随集。

