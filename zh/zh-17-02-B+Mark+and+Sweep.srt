0
00:00:01,250 --> 00:00:03,389
Now, this algorithm is very simple. And conceptually,
现在，这个算法非常简单。从概念上讲，

1
00:00:03,389 --> 00:00:07,410
I think it's, it's very clear how it works. But there are a number
我认为，它是如何运作的，这是非常清楚的。但是有一个数字

2
00:00:07,410 --> 00:00:12,230
of tricky details and this is very typical of automatic memory management algorithms.
这是非常典型的自动内存管理算法。

3
00:00:12,230 --> 00:00:15,269
And there's actually a serious problem with the mark phase. And, and this is also
事实上，标记阶段有一个严重的问题。还有，这也是

4
00:00:15,269 --> 00:00:19,980
typical of, of garbage collection algorithms. Now, notice that we only run this
垃圾收集算法的典型。现在，请注意，我们只运行以下内容

5
00:00:19,980 --> 00:00:25,170
algorithm when we are out of space, okay. So, the whole point is that we're garbage
算法，当我们没有空间的时候，好的。所以，关键是我们是垃圾

6
00:00:25,170 --> 00:00:28,869
collecting because there's no more system memory available for allocating new
正在收集，因为没有更多的系统内存可用于分配新的

7
00:00:28,869 --> 00:00:34,320
objects. And yet we have this to-do list, okay. And notice that the work list was not
对象。不过，我们有个待办事项清单，好吧。请注意，工作列表并不是

8
00:00:34,320 --> 00:00:37,870
bounded in size. There was no guarantee about how many elements were going
在大小上有界限的。不能保证会有多少元素

9
00:00:37,870 --> 00:00:41,640
to be on the to-do list. And I think, it's easy to see that, that data structure
出现在待办事项清单上。我认为，很容易看出，这种数据结构

10
00:00:41,640 --> 00:00:46,480
could actually be fairly large, alright. And so, we can't just allocate a
实际上可能相当大，好吧。因此，我们不能就这样分配一个

11
00:00:46,480 --> 00:00:50,010
fixed amount of space for the to-do list or reserve some constant amount of space.
为待办事项列表保留固定数量的空间，或保留一定数量的空间。

12
00:00:50,010 --> 00:00:53,899
But we need to deal with the fact that we actually don't have any space at all when
但我们需要面对的事实是，当我们没有任何空间的时候

13
00:00:53,899 --> 00:00:59,039
we get around to doing a garbage collect ion. Now, there is a trick that can be used
我们抽出时间来做一次垃圾收集。现在，有一个小把戏可以用来

14
00:00:59,039 --> 00:01:04,899
to maintain the to-do list during the mark phase without having to use any extra
在标记阶段维护待办事项列表，而不必使用任何额外的

15
00:01:04,899 --> 00:01:08,810
storage. And that is to do what is called pointer reversal. So, when a pointer is followed,
储藏室。这就是所谓的指针反转。因此，当跟随指针时，

16
00:01:08,810 --> 00:01:12,860
it's going to be reversed to point back to its parent. And this is going
它将被反转，指向它的父级。这就是我们要做的

17
00:01:12,860 --> 00:01:17,490
to allows us actually to track what elements or what objects in the heap still
允许我们实际跟踪堆中仍有哪些元素或对象

18
00:01:17,490 --> 00:01:22,470
need to be processed without having to use any extra space. And let's just if you don't
需要在不使用任何额外空间的情况下进行处理。如果你不这么做的话

19
00:01:22,470 --> 00:01:25,540
understand that I'm going to do an example in just a second. I wanna mention
请理解，我马上就要做一个例子了。我想提一下

20
00:01:25,540 --> 00:01:29,040
a second problem as well and that is, you know, where is the free list stored? And this
第二个问题是，您知道，空闲列表存储在哪里？还有这个

21
00:01:29,040 --> 00:01:33,439
is a little easier to see how that works. So, the free list consists of blocks
更容易理解它是如何工作的。因此，空闲列表由块组成

22
00:01:33,439 --> 00:01:40,290
of memory. And, and we just use the space in these blocks to maintain the free
记忆中的一部分。而且，我们只是利用这些区块中的空间来保持空闲

23
00:01:40,290 --> 00:01:45,170
list so perhaps the first word or something of the block of memory will contain
所以也许记忆挡路的第一个词或某个东西会包含

24
00:01:45,170 --> 00:01:49,290
the size of the block and then the second word will point to the next block in
挡路的大小，然后第二个字将指向下一个挡路

25
00:01:49,290 --> 00:01:53,189
the list, you know, something like that but we can use the space in the blocks themselves
列表，你知道，类似的东西，但我们可以使用区块本身的空间

26
00:01:53,189 --> 00:01:56,619
to maintain the free list. And so, now let's come back to this pointer reversal
以维护空闲列表。所以，现在让我们回到指针反转这一点

27
00:01:56,619 --> 00:02:03,619
idea. Let's say that we have some objects, okay, and we want to track reachability,
好主意。假设我们有一些对象，好的，我们想要跟踪可达性，

28
00:02:04,030 --> 00:02:11,030
okay, and we can't maintain the to-do list, all right in a separate data
好的，我们不能把待办事项列表保存在单独的数据中

29
00:02:12,980 --> 00:02:16,800
structure. And so how are we going to do that? Well, well, here's the idea when
结构。那么我们要怎么做呢？好吧，好吧，我是这么想的

30
00:02:16,800 --> 00:02:20,910
we change colors. So, we're doing to come in here and we're going to mark this first
我们换颜色。所以，我们要进来这里，我们要首先标记这一点

31
00:02:20,910 --> 00:02:25,900
object. Let's say this is reachable from the root and now that this is the root the
对象。假设这是可以从根到达的，现在这是根

32
00:02:25,900 --> 00:02:30,599
first object. And now we're going to follow the pointers in this object and let's
第一个对象。现在我们将跟随此对象中的指针，让我们

33
00:02:30,599 --> 00:02:34,610
say this is one here, this one here is the first pointer in the object. So, we're
假设这里是1，这里的这个是对象中的第一个指针。所以，我们要

34
00:02:34,610 --> 00:02:38,849
going to follow it and then we're going to reverse it. We're going to have it
跟随它，然后我们要反转它。我们将拥有它

35
00:02:38,849 --> 00:02:43,950
point back to the parent. So, now we will mark this object and then we'll follow
指向父级。所以，现在我们将标记此对象，然后我们将跟随

36
00:02:43,950 --> 00:02:47,950
the pointers in, in this object, okay. And as we go down, we'll have this pointer
这个对象中的指针，好的。当我们往下走的时候，我们会看到这个指针

37
00:02:47,950 --> 00:02:52,769
point back and then we'll mark this object. And now, we got no point ers
向后指，然后我们将标记此对象。现在，我们没有得分者

38
00:02:52,769 --> 00:02:57,629
in this object and so we need to go back and process any pointers that weren't covered
在这个对象中，所以我们需要返回并处理任何未覆盖的指针

39
00:02:57,629 --> 00:03:02,269
in the object set that we that we have already seen, okay. And how do we find
在我们已经看到的对象集中，好的。我们怎么才能找到

40
00:03:02,269 --> 00:03:04,940
our way back? Well, that's what the pointer reversal was for. So, we could follow
我们回去的路？嗯，这就是指针反转的目的。所以，我们可以跟着

41
00:03:04,940 --> 00:03:09,690
the blue arrow back here, as we come back, we'll restore the original pointer.
后面的蓝色箭头，当我们回来的时候，我们将恢复原来的指针。

42
00:03:09,690 --> 00:03:12,470
So, we'll get rid of the reversed pointer. There are no more pointers in this
所以，我们要去掉反转指针。这里没有更多的指针了

43
00:03:12,470 --> 00:03:16,440
object either so we'll go back one more object and now, of course, this pointer
对象，所以我们再返回一个对象，当然，现在这个指针

44
00:03:16,440 --> 00:03:20,129
will go away and we'll restore the original pointer, alright. And now, we're
会消失，我们会恢复原来的指针，好吗？现在，我们正在

45
00:03:20,129 --> 00:03:23,640
in this object and we see there was a second pointer that we haven't followed yet,
在这个对象中，我们看到还有第二个指针，我们还没有跟随它，

46
00:03:23,640 --> 00:03:28,409
okay. And, and then we'll follow it and we'll reverse it and we'll follow the
好吧。然后，我们将跟随它，我们将反转它，我们将遵循

47
00:03:28,409 --> 00:03:33,209
other pointer from that, reversing it, and, and then we'll mark these two objects,
另一个指针，颠倒过来，然后我们会标记这两个物体，

48
00:03:33,209 --> 00:03:35,580
when we get down to this object and we discover there are no additional pointers,
当我们深入到这个对象时，我们发现没有额外的指针，

49
00:03:35,580 --> 00:03:39,659
we'll be able to use this, these blue arrows here to work our way back and
我们就可以用这个，这些蓝色箭头往回走，

50
00:03:39,659 --> 00:03:44,330
we'll restore the red arrows as we walk back up through the objects. So, essentially
当我们重新穿过这些物体时，我们将恢复红色箭头。所以，从本质上讲，

51
00:03:44,330 --> 00:03:48,720
the point of reversal does is it helps us maintain the stack for a depth
反转的要点是它帮助我们在一定深度内保持堆栈

52
00:03:48,720 --> 00:03:52,580
for search of the graph. So, if you're doing adept for search of the graph and you
用于搜索图表。所以，如果你做的是熟练的搜索图表，而你

53
00:03:52,580 --> 00:03:56,610
want to be sure that you cover all the notes that are reachable then you have to
想要确保您覆盖了所有可以到达的便条，那么您必须

54
00:03:56,610 --> 00:04:00,299
be able to do the back tracking. And the, the reversed pointers allow us to do that
能够进行回溯。反转的指针让我们可以做到这一点

55
00:04:00,299 --> 00:04:05,909
[cough]. There's one more tiny issue here with the reversed pointers. So, notice that
[咳嗽]。这里还有一个关于反向指针的小问题。所以，请注意，

56
00:04:05,909 --> 00:04:09,780
there's a little bit of a problem. So, I want to talk about reversing pointers
有一点小问题。所以，我想谈谈反向指针

57
00:04:09,780 --> 00:04:14,599
and let me draw two new objects here just to illustrate the point. Let's say,
让我在这里画两个新的物体来说明这一点。比方说，

58
00:04:14,599 --> 00:04:20,780
I have a, a pointer from this object to that object. So, when I cross over, to
我有一个，一个从这个对象指向那个对象的指针。所以，当我超度的时候，

59
00:04:20,779 --> 00:04:26,470
the object that is pointed to, what does it mean to reverse this pointer? Well the,
指向的对象，反转此指针意味着什么？那么这个，

60
00:04:26,470 --> 00:04:29,590
you know, the space where the pointer is actually in this object, there's no space
你知道，指针实际在这个物体中的空间，没有空格

61
00:04:29,590 --> 00:04:36,590
necessarily for the pointer at all in, in the object that I'm going to. And so, in fact,
对于指针来说是必要的，在我要去的对象里。所以，事实上，

62
00:04:36,740 --> 00:04:43,100
what's going to happen let's say this was part of a chain of objects, okay.
接下来会发生什么，让我们假设这是一系列物体的一部分，好的。

63
00:04:43,100 --> 00:04:49,220
And, and this problem is easily solved, the issue is just off by one problem. So,
而且，这个问题很容易解决，这个问题只是由一个问题引起的。所以,

64
00:04:49,220 --> 00:04:53,530
I have, I have space in this object for a pointer and I can change that pointer. I don't
我有，我在这个对象中有一个指针的空间，我可以改变那个指针。我没有

65
00:04:53,530 --> 00:04:56,870
know if I even have any pointers in this object yet, alright. So, let's say this
我知道我在这个对象中有没有任何指针，好的。那么，让我们这样说吧

66
00:04:56,870 --> 00:05:02,360
is part of a chain of objects, okay, and that I've walked down this chain to, to
是一系列物件的一部分，好的，我沿着这个链条走到，到

67
00:05:02,360 --> 00:05:07,000
this particular object. So, as I pass over to this third object with I, the pointer
这个特殊的物体。所以，当我使用指针i传递到第三个对象时

68
00:05:07,000 --> 00:05:12,240
that I will reverse is this one and I will make it point back to the previous
我要颠倒过来的是这一条，我会把它指向前一条

69
00:05:12,240 --> 00:05:18,100
object, okay. And then I'm just going to remember this particular object,
反对，好的。然后我就会记住这个特别的物体，

70
00:05:18,100 --> 00:05:22,110
you know, I'll keep the pointer to this particular object in a register. So, I'll
你知道，我会把指向这个特定对象的指针保存在一个寄存器中。所以，我会

71
00:05:22,110 --> 00:05:27,740
keep the last pointer at reversed in a register. An, and a pointer to the last object
将寄存器中的最后一个指针保持在反转位置。和指向最后一个对象的指针

72
00:05:27,740 --> 00:05:32,199
that I came from in a register and then when I go on to another object, I will
我是从一个登记处出来的，然后当我转到另一个物体时，我会

73
00:05:32,199 --> 00:05:37,520
use the pointer that I'm traversing in the current object to point back to the
使用我在当前对象中遍历的指针指向

74
00:05:37,520 --> 00:05:41,270
parent of the previous object, okay. So, it's just a off by one problem, I need one
上一个对象的父级，好的。所以，这只是一个问题，我需要一个

75
00:05:41,270 --> 00:05:46,979
register here to hold on to the previous object that I visited and then I can reverse
在此注册以保留我访问的前一个对象，然后我可以反转

76
00:05:46,979 --> 00:05:53,979
pointers back up to their parents and grandparents. Alright, to summarize the
回溯到他们的父母和祖父母身上。好的，总结一下

77
00:05:55,160 --> 00:05:58,600
discussion of mark-and-sweep. Space for a new object is going to be allocated
关于标记和清扫的讨论。将为新对象分配空间

78
00:05:58,600 --> 00:06:04,060
from the free list, little typo there. And we're always going to pick a block, we always
从免费列表上看，这里有个小打字错误。我们总是会选挡路，我们总是

79
00:06:04,060 --> 00:06:07,940
have to pick a block from the free list that is large enough to hold the object
我必须从免费列表中选择一个足够大的挡路来容纳该对象

80
00:06:07,940 --> 00:06:13,669
that we're allocating. And in an area of the size that we need is going to
我们正在分配的。在我们需要的面积内

81
00:06:13,669 --> 00:06:16,490
be allocated from that block and then the leftovers is to be put back on the free list.
从那个挡路中分配，然后剩下的就会被放回免费的名单上。

82
00:06:16,490 --> 00:06:20,520
So, let's say the free list has a block, let's say it has 100 bytes and then
那么，假设空闲列表有一个挡路，假设它有100Bytes，然后

83
00:06:20,520 --> 00:06:25,190
we need an object that has 50 bytes in it. So, what will happen is that this block will
我们需要一个包含50个字节的对象。那么接下来会发生什么呢，就是这个挡路

84
00:06:25,190 --> 00:06:29,900
get split up. We'll use this first half, the first 50 for the object and then
分头行动。我们将使用前半部分，前50个用于对象，然后

85
00:06:29,900 --> 00:06:36,310
this other part the leftover will get put back on to the free list. And the result of
剩下的这一部分将被重新放回免费列表中。其结果是

86
00:06:36,310 --> 00:06:39,870
that kind of strategy where we, we have to find blocks that are big enough but then
这样的策略，我们，我们必须找到足够大的区块，但是

87
00:06:39,870 --> 00:06:43,930
we might not use the entire block is that mark-and-sweep can fragment the memory.
我们可能不会使用整个挡路是因为标记和清除可以碎片化记忆。

88
00:06:43,930 --> 00:06:48,949
We might wind up with lots of little bits of leftover memory maybe nothing
我们可能会留下很多零碎的记忆，也许什么都没有

89
00:06:48,949 --> 00:06:52,400
big enough to actually hold an object. And these blocks, these little tiny
大到足以容纳一个物体。而这些积木，这些小小的

90
00:06:52,400 --> 00:06:56,729
blocks might be scattered all over the place. So, it's important actually, for
积木可能散落在各处。所以，事实上，这很重要，因为

91
00:06:56,729 --> 00:07:03,259
mark-and-sweep to also merge blocks whenever possible. So, it's merge free blocks,
只要有可能，也可以标记并清除以合并块。所以，它是自由合并的块，

92
00:07:03,259 --> 00:07:08,930
when possible. So, basically when the sweep phase is working on the free list.
如果可能的话。所以，基本上当扫描阶段在空闲列表上工作时。

93
00:07:08,930 --> 00:07:13,729
It needs to recognize when it has two adjacent blocks of memory that will be
它需要识别它何时有两个相邻的内存块

94
00:07:13,729 --> 00:07:17,810
immediately adjacent to each other in memory. So, if I have two blocks that are
在内存中彼此紧邻。所以，如果我有两个街区，这两个街区

95
00:07:17,810 --> 00:07:22,280
contiguous, what I really want to do is to merge them into one big block and just have
连续的，我真正想做的是把它们合并成一个大挡路

96
00:07:22,280 --> 00:07:26,770
one entry in the free list. That's a counteract fragmentation of memory. Now, one
空闲列表中的一个条目。这是对记忆的一种抵消的碎片化。现在，一个

97
00:07:26,770 --> 00:07:31,650
big advantage and perhaps the biggest advantage of mark-and-sweep is that objects
标记和清扫的最大优点，或许是最大的优点是，对象

98
00:07:31,650 --> 00:07:35,729
are not moved during garbage collection. And that means I don't have to
在垃圾收集期间不会移动。这意味着我不需要

99
00:07:35,729 --> 00:07:41,240
update the pointer objects. Object stay put, they don't move as part of garbage collection.
更新指针对象。对象保持不动，它们不会作为垃圾回收的一部分移动。

100
00:07:41,240 --> 00:07:44,729
And what this means is it's actually possible to adapt mark and sweet,
这意味着实际上有可能改编马克和斯威特，

101
00:07:44,729 --> 00:07:51,280
for languages like CNC++. So, in CNC++, pointers are exposed to the programmer so
用于像CNC++这样的语言。因此，在CNC++中，指针向程序员公开，因此

102
00:07:51,280 --> 00:07:56,349
programmers can, can manipulate pointers and test pointers and so you can't move objects
程序员可以，可以操纵指针和测试指针，所以你不能移动对象

103
00:07:56,349 --> 00:08:02,300
in CNC++ because the pointer is part of their semantics. The pointer address,
在CNC++中，因为指针是它们语义的一部分。指针地址，

104
00:08:02,300 --> 00:08:05,449
I should say, is part of their semantics. But it is actually possible and
我应该说，是他们语义的一部分。但这实际上是可能的，而且

105
00:08:05,449 --> 00:08:11,759
people actually have done it to build conservative or, you know, variations of a
人们这样做实际上是为了构建保守的或，你知道的，变体的

106
00:08:11,759 --> 00:08:16,720
mark-and-sweep garbage collection for C++ precisely because the objects don't move.
C++的标记和清除垃圾回收正是因为对象不会移动。

